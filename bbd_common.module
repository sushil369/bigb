<?php

/**
 * @file
 * The theme system, which controls the output of Drupal.
 *
 * The file to perform all add to cart functionality and other common activity
 * customized by user themes.
 */
module_load_include('module', 'bbd_phone_commerce', 'bbd_phone_commerce');
module_load_include('module', 'bbd_order_refund', 'bbd_order_refund');

/**
 *  Implements hook_node_presave
 */
function bbd_common_node_presave($node) {
  global $user;
  if ($node->type == 'product_display') {
    if (($node->status == 1) && (empty($node->original->field_first_enabled['und'][0]['value']))) {
      $node->field_first_enabled['und'][0]['value'] = REQUEST_TIME;
    }

    $status_disable_log = "";
    $pids = bbd_common_get_pid_from_nid($node->nid);
    $color_incomplete = 0;
    $size_incomplete = 0;
    $bool = 0;
    if (!empty($pids)) {
      $count = count($pids);
      $debug = debug_backtrace();
      //dsm($debug, "debug");
      foreach ($pids as $key => $pid) {
        if ($debug[4]['function'] != 'bundle_product_entity_presave') {
          //dsm($debug[4]['function'], "debug4");
          $product = commerce_product_load($pid->product_id);
          if (!empty($product->field_kit_type_franchisee)) {
            if ($product->field_kit_type_franchisee[LANGUAGE_NONE][0]['value']) {
              $bool = 1;
            }
          }
          if (empty($product->field_product_images[LANGUAGE_NONE])) {

            $status_disable_log .= "SKU: $product->sku Image is Missing. \n";
          }
          if (empty($product->commerce_price[LANGUAGE_NONE]) || $product->commerce_price[LANGUAGE_NONE][0]['amount'] == 0) {
            $error = "Product with SKU -- " . $product->sku . " cannot be activated without setting a price. \n";
            drupal_set_message(check_plain($error), 'error');
            $status_disable_log .= $error;
          }
          if (is_decimal($product->commerce_price[LANGUAGE_NONE][0]['amount'] / 100)) {
            $error = "Product SKU :" . $product->sku . ':Price ' . $product->commerce_price[LANGUAGE_NONE][0]['amount'] / 100 . " must be integer value(C). \n";
            drupal_set_message(check_plain($error), 'error');
            $status_disable_log .= $error;
          }
          if (empty($product->field_product_mrp[LANGUAGE_NONE]) || $product->field_product_mrp[LANGUAGE_NONE][0]['amount'] == 0) {
            $error = "Product with SKU -- " . $product->sku . " cannot be activated without setting a MRP. \n";
            drupal_set_message(check_plain($error), 'error');
            $status_disable_log .= $error;
          }
          if (is_decimal($product->field_product_mrp[LANGUAGE_NONE][0]['amount'] / 100)) {
            $error = "Product SKU" . $product->sku . ':MRP ' . $product->field_product_mrp[LANGUAGE_NONE][0]['amount'] / 100 . " must be integer value(C). \n";
            drupal_set_message(check_plain($error), 'error');
            $status_disable_log .= $error;
          }
          if (empty($product->field_franchise_comission[LANGUAGE_NONE]) || $product->field_franchise_comission[LANGUAGE_NONE][0]['amount'] == 0) {
            $error = "Product with SKU -- " . $product->sku . " cannot be activated without Commission. \n";
            drupal_set_message(check_plain($error), 'error');
            $status_disable_log .= $error;
          }

          if (count($pids) > 1) {
            if (!empty($product->field_config_colors[LANGUAGE_NONE])) {
              $color = bbd_common_get_term_name_from_tid($product->field_config_colors[LANGUAGE_NONE][0]['tid']);
            }
            if (!empty($product->field_config_sizes[LANGUAGE_NONE])) {
              $size = bbd_common_get_term_name_from_tid($product->field_config_sizes[LANGUAGE_NONE][0]['tid']);
            }
            if (empty($product->field_config_colors[LANGUAGE_NONE]) || empty($color)) {
              $color_incomplete ++;
            }
            if (empty($product->field_config_sizes[LANGUAGE_NONE]) || empty($size)) {
              $size_incomplete ++;
            }
          }
        }
      }
      if (!(($color_incomplete == $count && $size_incomplete == 0) || ($color_incomplete == 0 && $size_incomplete == $count) || ($color_incomplete == $count && $size_incomplete == $count) || ($color_incomplete == 0 && $size_incomplete == 0))) {

        $error = "Product with SKU -- " . $product->sku . " cannot be activated with Invalid variant Data. \n";
        drupal_set_message(check_plain($error), 'error');
        $status_disable_log .= $error;
      }
    }
    else {
      if (!$node->is_new) {
        $error = "Product with SKU -- " . $product->sku . " cannot be activated with Invalid product Data. \n";
        $status_disable_log .= $error;
        drupal_set_message(check_plain($error), 'error');
      }
    }
    /*
     * QC Badge assign Start
     */
    //unset($node->field_badge[LANGUAGE_NONE]);
    if (isset($node->field_qa_flag[LANGUAGE_NONE][0]['value'])) {
      if ($node->field_qa_flag[LANGUAGE_NONE][0]['value']) {
        $node->field_badge[LANGUAGE_NONE][0]['tid'] = bbd_common_get_term_id_from_name('QC', 'badge');
        if ($node->status) {
          $error = "Node can not be activated as QA Flag is active. \n";
          $status_disable_log .= $error;
          drupal_set_message(check_plain($error), 'error');
        }
      }
    }

    $active_products = array();
    if ($node->nid) {
      $active_products = bbd_common_get_active_product_from_nid($node->nid);
    }
    else {
      if (!empty($node->field_product_reference[LANGUAGE_NONE])) {
        foreach ($node->field_product_reference[LANGUAGE_NONE] as $product_id) {
          $active_products[$product_id['product_id']] = _get_mc_code_from_product_id($product_id['product_id']);
        }
      }
    }
    if (!empty($active_products)) {
      foreach ($active_products as $pid => $mc_code) {
        $mc_id = bbd_common_get_mc_category_from_mc_code($mc_code);
        // Added tablet category.
        $tab_category = bbd_common_get_tab_category_from_mc_leaf($mc_id);
        if (is_numeric($mc_id)) {
          $node->field_product_master_category[LANGUAGE_NONE][0]['tid'] = $mc_id;
          $node->field_product_category[LANGUAGE_NONE][0]['tid'] = $tab_category->tid;
          break;
        }
      }
    }

    if (($node->original->status != $node->status) && ($node->original->status == 1) && $debug[4]['function'] != 'bundle_product_entity_presave') {
      $status_disable_log .= "Node Status disabled manually. \n";
    }

    if (!is_numeric($mc_id)) {
      unset($node->field_product_master_category[LANGUAGE_NONE]);
      $status_disable_log .= "Master Catagory is missing. \n";
    }

    if (!empty($status_disable_log)) {
      $node->status = 0;
      $node->body[LANGUAGE_NONE][0]['value'] = $status_disable_log;
    }
    if (($node->original->status != $node->status) && ($node->status == 1)) {
      $node->body[LANGUAGE_NONE][0]['value'] = '';
    }
    if ($node->is_new) {
      $node->body[LANGUAGE_NONE][0]['value'] = 'Disabled By System. First Time Created';
      //calling bbd_common_update_node_flat_table function at the end coz this function requires nid and if new node
      //created, nid is generated only after the node_save.
      drupal_register_shutdown_function('bbd_common_update_node_flat_table', $node);
    }
    else {
      //Update node (and product) data in flat table
      bbd_common_update_node_flat_table($node);
    }
    // Hide Node in Search for Food & Deactive Nodes
    $food_tid = bbd_common_get_term_id_from_name('food', 'mc_category');
    $food_category = bbd_category_get_all_children($food_tid);
    if ($node->status == 0 || in_array($node->field_product_master_category[LANGUAGE_NONE][0]['tid'], $food_category) || $bool) {
      $node->apachesolr_exclude_node_enabled = 1;

      //Remove nodes if already present in SOLR index
      if ($node->nid) {
        $env_id = apachesolr_default_environment();
        apachesolr_remove_entity($env_id, 'node', $node->nid);
      }
    }
    else {
      $node->apachesolr_exclude_node_enabled = 0;
    }
    $node->field_disabled_log_user[LANGUAGE_NONE][0]['uid'] = $user->uid;
  }
  if ($node->type == 'egv_schema') {
    global $base_url;
    $mobile_no = $node->field_egv_mobile_no['und'][0]['value'];
    $original_exp = $node->original->field_egv_expiry_date['und'][0]['value'];  // original expiray date
    $changed_exp = $node->field_egv_expiry_date['und'][0]['value'];
    if ($changed_exp != $original_exp && $changed_exp < strtotime(date('Y-m-d'))) {  // if expiry date is changed and less than current time
      $node->field_egv_status['und'][0]['value'] = 2;  // then make status as expired
    }
    $node->field_egv_uid[LANGUAGE_NONE][0]['uid'] = $user->uid;
    // Create new EGV
    if ($node->is_new) {
      $node->uid = $user->uid; //capture feed uid
      $random_egv = _get_random_string(variable_get('egv_length', 12));
      //Check if EGV already exists
      while (bbd_common_check_egv($random_egv)) {
        $random_egv = _get_random_string(variable_get('egv_length', 12));
      }
      $node->title = $random_egv; // Generate EGV code
    }

    $var['egv_code'] = $node->title;
    $var['egv_amount'] = $node->field_egv_amount['und'][0]['amount'] / 100;
    $var['website_url'] = $base_url;
    if ($node->field_egv_sms_flag[LANGUAGE_NONE][0]['value'] == 1) {
      $count = 0;
      foreach ($node->field_egv_franchisee_code['und'] as $fr_code) {
        $count++;
        $franchisees[] = $fr_code['value'];
        if ($count == 2) {
          break;
        }
      }
      if (!empty($node->field_egv_franchisee_code['und'][0]['value'])) {
        $mobile_nos = get_mobile_nos_by_franchisee_codes($franchisees);
        $var['mobile_no'] = $mobile_nos; // All mobile no "," seperated
        $status = sms_configuration_helper_for_sms_template($mobile_no, 'egv_issued_for_specific_franchisee', $var);
      }
      else {
        $status = sms_configuration_helper_for_sms_template($mobile_no, 'egv_issued_for_all_franchisee', $var);
      }
      $node->body[LANGUAGE_NONE][0]['value'] = 'SMS was sent at ' . date('Y-m-d H:i:s');
      $node->field_egv_sms_flag[LANGUAGE_NONE][0]['value'] = 0; // Reset flag back to 0 after sending / Resend EGV
    }
  }
}

/**
 * 
 * @param type $random_egv
 * Returns EGV code if exist
 */
function bbd_common_check_egv($random_egv) {
  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->condition('n.type', 'egv_schema');
  $query->condition('n.title', $random_egv);
  $egv = $query->execute()->fetchField();
  return $egv;
}

/**
 * 
 * Get Product Status from Product id
 */
function bbd_common_get_active_product_from_nid($nid) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_product_reference', 'pr', 'pr.entity_id = n.nid');
  $query->join('commerce_product', 'cp', 'cp.product_id = pr.field_product_reference_product_id');
  $query->join('field_data_field_mc_sap_hierarchy_number', 'mc', 'mc.entity_id = cp.product_id');
  $query->fields('cp', array('product_id'));
  $query->fields('mc', array('field_mc_sap_hierarchy_number_value'));
  $query->condition('cp.status', 1);
  $query->condition('n.nid', $nid);
  $active_products = $query->execute()->fetchAllKeyed(0, 1);
  return $active_products;
}

/**
 * 
 * Returns Mc Category from Mc code
 */
function bbd_common_get_mc_category_from_mc_code($mc_code) {
  $mc_category_tid = db_select('field_data_field_mc_sap_hierarchy_number', 'n')
          ->fields('n', array('entity_id'))
          ->condition('n.field_mc_sap_hierarchy_number_value', $mc_code)
          ->condition('bundle', 'mc_category')
          ->condition('n.entity_type', 'taxonomy_term')
          ->execute()->fetchField();
  return $mc_category_tid;
}

/*
 *  Return tab category id from mc leaf.
 */

function bbd_common_get_tab_category_from_mc_leaf($mc_category_id) {
  // Query return tid of tab category.
  $query = db_select('taxonomy_term_data', 'ttd');
  $query->join('field_data_field_mc_leaf', 'fcl', 'fcl.entity_id = ttd.tid');
  $query->Fields('ttd', array('tid'));
  $query->condition('fcl.field_mc_leaf_tid', $mc_category_id);
  $result = $query->execute()->fetchObject();

  return $result;
}

/**
 * 
 * Update Node Entries of flat table
 */
function bbd_common_update_node_flat_table($node) {


  //dsm($node,'new node');
  //building original_product_ids
  $original_product_ids = array();

  if (isset($node->original->field_product_reference[LANGUAGE_NONE])) {
    $temp = $node->original->field_product_reference[LANGUAGE_NONE];

    foreach ($temp as $t) {
      $original_product_ids[] = $t['product_id'];
    }
  }

  //building new_product_ids
  $temp = $node->field_product_reference[LANGUAGE_NONE];
  foreach ($temp as $t) {
    $new_product_ids[] = $t['product_id'];
  }


  $diff_new = array_diff($new_product_ids, $original_product_ids);


  $diff_original = array_diff($original_product_ids, $new_product_ids);


  $intersect = array_intersect($new_product_ids, $original_product_ids);


  foreach ($node->field_product_reference[LANGUAGE_NONE] as $product_id) {
    $promo_data = bbd_promotions_get_promo_id_from_node_object($node);
    $featured_product = bbd_common_get_term_name_from_tid($node->field_homepageoffer[LANGUAGE_NONE][0]['tid']);
    $top_offer = 0;
    $best_sellers = 0;
    if (!empty($featured_product)) {
      if ($featured_product == 'top offer') {
        $top_offer = 1;
      }
      elseif ($featured_product == 'Best Sellers') {
        $best_sellers = 1;
      }
    }
    if (in_array($product_id['product_id'], $intersect)) {
      db_merge('flat_table')
          ->key(array('nid' => $node->nid, 'product_id' => $product_id['product_id']))
          ->fields(array(
            'nid' => $node->nid,
            'node_status' => $node->status,
            'node_created' => $node->created,
            'node_changed' => $node->changed,
            'home_offer' => !empty($node->field_homepageoffer[LANGUAGE_NONE]) ? $node->field_homepageoffer[LANGUAGE_NONE][0]['tid'] : 0,
            'promotion' => !empty($promo_data) ? 1 : 0,
            'best_seller' => $best_sellers,
            'top_offer' => $top_offer,
          ))
          ->execute();
    }
    else if (in_array($product_id['product_id'], $diff_new)) {
      $entity = commerce_product_load($product_id['product_id']);


      $stock = $entity->commerce_stock[LANGUAGE_NONE][0]['value'];

      $stock = ($stock > 0) ? 1 : 0;
      $specs = !empty($entity->field_product_specification[LANGUAGE_NONE]) ? json_decode($entity->field_product_specification[LANGUAGE_NONE][0]['value']) : '';

      $spec1 = $specs->feature1;
      $spec2 = $specs->feature2;
      $spec3 = $specs->feature3;
      $spec4 = $specs->feature4;

      $promo_data = bbd_promotions_get_promo_id_from_node_object($node);

      $image_fid = $entity->field_product_images[LANGUAGE_NONE][0]['fid'];
      $image_uri = bbd_category_get_uri_from_fid($image_fid);
      $offers = !empty($entity->field_home_page_block_offer) ? $entity->field_home_page_block_offer[LANGUAGE_NONE][0]['value'] : '';
      db_merge('flat_table')
          ->key(array('nid' => $node->nid, 'product_id' => $product_id['product_id']))
          ->fields(array(
            'nid' => $node->nid,
            'node_status' => $node->status,
            'node_created' => $node->created,
            'node_changed' => $node->changed,
            'home_offer' => !empty($node->field_homepageoffer[LANGUAGE_NONE]) ? $node->field_homepageoffer[LANGUAGE_NONE][0]['tid'] : 0,
            'promotion' => !empty($promo_data) ? 1 : 0,
            'best_seller' => $best_sellers,
            'top_offer' => $top_offer,
            'product_title' => $entity->title,
            'product_status' => $entity->status,
            'in_stock' => $stock,
            'spec1' => !empty($spec1) ? $spec1 : '',
            'spec2' => !empty($spec2) ? $spec2 : '',
            'spec3' => !empty($spec3) ? $spec3 : '',
            'spec4' => !empty($spec4) ? $spec4 : '',
            'product_id' => $entity->product_id,
            'sku' => $entity->sku,
            'type' => $entity->type,
            'product_image' => $image_uri,
            'product_sp' => $entity->commerce_price[LANGUAGE_NONE][0]['amount'],
            'product_mrp' => $entity->field_product_mrp[LANGUAGE_NONE][0]['amount'],
            'bachat_price' => $entity->field_bachat_price[LANGUAGE_NONE][0]['amount'],
            'offer' => $offers,
          ))
          ->execute();
    }

    if ($diff_original) {
      foreach ($diff_original as $old_pids) {
        if ($node->type == 'product_display') {
          db_delete('flat_table')
              ->condition('product_id', $old_pids)
              ->execute();
        }
      }
    }
  }
}

/**
 * Get Mc category from SKu & Removed Node load
 * 
 */
function get_category_from_sku($sku) {
  $query = db_select('commerce_product', 'cp');
  $query->join('field_data_field_product_reference', 'pr', 'pr.field_product_reference_product_id = cp.product_id');
  $query->join('field_data_field_product_master_category', 'mc', 'mc.entity_id = pr.entity_id');
  $query->join('taxonomy_term_data', 't', 't.tid = mc.field_product_master_category_tid');
  $query->fields('t', array('name'));
  $query->condition('cp.sku', $sku);
  $mc_cat_name = $query->execute()->fetchField();
  return $mc_cat_name;
}

/**
 * Returns pid from nid
 */
function bbd_common_get_pid_from_nid($nid) {
  $query = db_select('field_data_field_product_reference', 'p');
  $query->addField('p', 'field_product_reference_product_id', 'product_id');
  $query->condition('p.entity_id', $nid);
  $pids = $query->execute()->fetchAll();
  return $pids;
}

/*
 * Gets delta = 0 product_id from node
 */

function bbd_common_get_first_pid_from_nid($nid) {
  $query = db_select('field_data_field_product_reference', 'p');
  $query->addField('p', 'field_product_reference_product_id', 'product_id');
  $query->condition('p.entity_id', $nid);
  $query->condition('p.delta', 0);
  $pid = $query->execute()->fetchField();
  return $pid;
}

/*
 * author : Manish
 * Desc : Returns first pid if stock is greater than 0 or pid at delta 0 if stock = 0 for the given nid
 */

function bbd_common_get_first_instock_or_first_oos_pid($nid) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_product_reference', 'sku', 'sku.entity_id = n.nid');
  $query->join('commerce_product', 'cp', 'cp.product_id = sku.field_product_reference_product_id');
  $query->join('field_data_commerce_stock', 'cs', 'cs.entity_id = sku.field_product_reference_product_id');
  $query->fields('cp', array('product_id'));
  $query->fields('cs', array('commerce_stock_value'));
  $query->fields('n', array('nid'));
  $query->condition('n.type', 'product_display');
  $query->condition('nid', $nid);
  $query->orderBy('sku.delta');
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  if ($res) {
    $prod_id = '';
    foreach ($res as $result) {
      if ($result['commerce_stock_value'] > 0) {
        $prod_id = $result['product_id'];
        break;
      }
    }
    if ($prod_id == '') {
      $prod_id = $res[0]['product_id'];
    }
  }
  return $prod_id;
}

/**
 * Returns sku from nid
 */
function bbd_common_get_sku_from_nid($nid) {
  $query = db_select('field_data_field_product_reference', 'p');
  $query->join('commerce_product', 'cp', 'cp.product_id = p.field_product_reference_product_id');
  $query->fields('cp', array('sku'));
  $query->condition('p.entity_id', $nid);
  $query->condition('p.delta', 0);
  $sku = $query->execute()->fetchField();
  return $sku;
}

/**
 * Returns nid from sku
 */
function bbd_common_get_nid_from_sku($sku) {
  $query = db_select('field_data_field_product_reference', 'p');
  $query->join('commerce_product', 'cp', 'cp.product_id = p.field_product_reference_product_id');
  $query->fields('p', array('entity_id'));
  $query->condition('cp.sku', $sku);
  $nid = $query->execute()->fetchField();
  return $nid;
}

/**
 * Returns nid from pid
 */
function bbd_common_get_nid_from_pid($pid) {
  $query = db_select('field_data_field_product_reference', 'p');
  $query->addField('p', 'entity_id', 'nid');
  $query->condition('p.field_product_reference_product_id', $pid);
  $nids = $query->execute()->fetchField();
  return $nids;
}

/**
 * Returns pid from sku
 */
function bbd_common_get_pid_from_sku($sku) {
  $query = db_select('commerce_product', 'p');
  $query->fields('p', array('product_id'));
  $query->condition('p.sku', $sku);
  $pids = $query->execute()->fetchField();
  return $pids;
}

/**
 * Returns pid from sku
 */
function bbd_common_get_sku_from_pid($pid) {
  $query = db_select('commerce_product', 'p');
  $query->fields('p', array('sku'));
  $query->condition('p.product_id', $pid);
  $sku = $query->execute()->fetchField();
  return $sku;
}

/**
 * Get Image uri From Fid for tag name
 */
function bbd_common_get_uri_from_fid_of_tags_tid($tid) {
  $query = db_select('field_data_field_product_tags_image', 't');
  $query->fields('t', array('field_product_tags_image_fid'));
  $query->condition('t.entity_id', $tid);
  $fid = $query->execute()->fetchField();
  $file = file_load($fid);
  return $file->uri;
}

function bbd_common_get_uri_from_fid_of_product_pid($pid) {
  $query = db_select('field_data_field_product_images', 't');
  $query->fields('t', array('field_product_images_fid'));
  $query->condition('t.entity_id', $pid);
  $fid = $query->execute()->fetchField();
  $file = file_load($fid);
  return $file->uri;
}

/**
 * Implements  hook_services_request_postprocess_alter
 */
function bbd_common_services_request_postprocess_alter($controller, $args, &$result) {
  if (isset($args['view_name'])) {
    $views_list = array(
      'category_list',
      'slate_category',
      'new_category_list',
      'new_slate_category_list',
      'new_qa_category_list',
      'qa_category_list'
    );
    $tab_views = array(
      'category_list',
      'new_category_list'
    );
    $slate_views = array(
      'slate_category',
      'new_slate_category_list'
    );
    $qa_views = array(
      'new_qa_category_list',
      'qa_category_list'
    );
    $new_views = array(
      'new_category_list',
      'new_slate_category_list'
    );
    $old_views = array(
      'category_list',
      'slate_category'
    );
    if (in_array($args['view_name'], $views_list)) {
      foreach ($result as $res) {
        $tid = $res->cid_1;
        $res->category_name = strtoupper(htmlspecialchars_decode($res->category_name));
        $cat_type = 'OLD';
// Optimized children from Flat table
        $childrens = bbd_catalog_sync_get_child_from_parent($tid);
        if (!empty($childrens)) {
          foreach ($childrens as $key => $child) {

            if (in_array($args['view_name'], $new_views) || $args['view_name'] == 'new_qa_category_list') {
              $data = end(bbd_catalog_sync_new_get_data_from_category($child->tid));
            }
            else {
              $data = end(bbd_catalog_sync_get_data_from_category($child->tid));
            }

            //If category has no products, then do not pass that category
            if (in_array($args['view_name'], $tab_views) || in_array($args['view_name'], $slate_views)) {
              $data_to_check = 'tab_data';
            }
            elseif (in_array($args['view_name'], $qa_views)) {
              $data_to_check = 'qa_data';
            }

            if (!empty($data) && !is_null($data->$data_to_check)) {
              $res->sub_category[$key]['sub_category_name'] = strtoupper($child->name);
              $res->sub_category[$key]['cid_2'] = $child->tid;

              $zoom = bbd_common_check_zoom_from_category($child->tid);

              if ($zoom == $child->tid && (in_array($args['view_name'], $tab_views) || in_array($args['view_name'], $qa_views))) {
                $image_style = 'tab_zoom_image';
              }
              elseif (in_array($args['view_name'], $tab_views) || in_array($args['view_name'], $qa_views)) {
                $image_style = 'tab_non_zoom_image';
              }

              if ($zoom == $child->tid && in_array($args['view_name'], $slate_views)) {
                $image_style = 'slate_zoom';
              }
              elseif (in_array($args['view_name'], $slate_views)) {
                $image_style = 'slate_non_zoom';
              }

              //Removing so that it works for both old and new views
              //if (in_array($args['view_name'], $new_views) || $args['view_name'] == 'new_qa_category_list') {
              $res->sub_category[$key]['image_path'] = '/sites/default/files/styles/' . $image_style . '/public/';
              //}

              if (in_array($args['view_name'], $new_views)) {
                $res->sub_category[$key]['nid_list'] = unserialize($data->tab_data);
              }
              elseif ($args['view_name'] == 'new_qa_category_list') {
                $res->sub_category[$key]['nid_list'] = unserialize($data->qa_data);
              }

              //For old views
              elseif (in_array($args['view_name'], $old_views)) {
                $res->sub_category[$key]['product_list'] = unserialize($data->tab_data);
              }
              elseif ($args['view_name'] == 'qa_category_list') {
                $res->sub_category[$key]['product_list'] = unserialize($data->qa_data);
              }
              #########################################
              //Create CSV file of catalog
              if ($args['view_name'] == 'new_category_list') {//Do only for tab to avoid duplicate CSVs
                $tab_data = unserialize($data->tab_data);
                foreach ($tab_data as $k1 => $v1) {

                  foreach ($v1['products'] as $product_data) {

                    $count = count($product_data['size_variant_data']);

                    for ($i = 0; $i < $count; $i++) {
                      $rows[] = array(
                        $res->cid_1,
                        $res->category_name,
                        $data->c2_id,
                        $data->c2_name,
                        $product_data['size_variant_data'][$i]['sku'],
                        $product_data['title'],
                        $v1['nid'],
                        (!empty($product_data['badge_id'])) ? bbd_common_get_term_name_from_tid($product_data['badge_id']) : '',
                        (!empty($product_data['product_description'])) ? 'Yes' : 'No',
                        (!empty($product_data['product_specification'])) ? 'Yes' : 'No',
                        (!empty($product_data['specification'])) ? 'Yes' : 'No',
                        count($product_data['product_image']),
                      );
                    }
                  }
                }
              }
              ####################################
            }
          }
        }
      }
      ##############################
      if ($args['view_name'] == 'new_category_list') {//Do only for tab to avoid duplicate CSVs
        //header('Content-Type: text/csv; charset=utf-8');
        bbd_common_write_csv_file($rows);
      }
      #################################        
    }
  }
}

/**
 * Helper Function to generate/write a csv file
 */
function bbd_common_write_csv_file($rows) {
  $directory_name = 'catalog_csv';
  $file_realpath = drupal_realpath(file_build_uri($directory_name));
  $files = glob("$file_realpath/*.csv");
  if ($files !== false) {
    $filecount = count($files);
    if ($filecount >= 3) {
      array_multisort(
          array_map('filemtime', $files), SORT_NUMERIC, SORT_ASC, $files
      );
      $file_to_delete = $files[0];
      unlink($file_to_delete);
    }
    $file_name = date('Ymd_His');
    $fp = fopen($file_realpath . '/' . $file_name . '.csv', 'w');
    fputcsv($fp, array('C1_id', 'C1_name', 'C2_id', 'C2_name', 'SKU', 'Title', 'NID', 'Badge name', 'Description', 'Specification', 'Features', 'Image count'));
    foreach ($rows as $k => $v) {
      fputcsv($fp, $v);
    }
    chmod($file_realpath . '/' . $file_name . '.csv', 0777);
    fclose($fp);
  }
}

/**
 * Helper Function to generate Product Part in XML
 */
function bbd_common_get_xml_product($nids, $cat_type = NULL, $image_style = NULL) {
  $array = array();
  if (!empty($nids)) {
    foreach ($nids as $node_key => $nid) {
      $node = node_load($nid->entity_id);
      $pids = bbd_common_get_pid_from_nid($nid->entity_id);

      $pid_count = 0;
      $first_product = '';

      foreach ($pids as $product_key => $pid) {

        $product = commerce_product_load($pid->product_id);
        $product_count = count($pids);
        $color = !empty($product->field_config_colors) ? htmlspecialchars_decode(bbd_common_get_term_name_from_tid($product->field_config_colors[LANGUAGE_NONE][0]['tid'])) : '';
        $size = !empty($product->field_config_sizes) ? htmlspecialchars_decode(bbd_common_get_term_name_from_tid($product->field_config_sizes[LANGUAGE_NONE][0]['tid'])) : '';

        if ($product_count > 1 && !empty($size) && empty($color)) {
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['product_id'] = !empty($product->product_id) ? $product->product_id : '';
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['size'] = $size;

          $sku = htmlspecialchars_decode($product->sku);
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['sku'] = !empty($product->sku) ? $sku : '';
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['hide_unhide'] = display_mrp($sku) ? 1 : 0;
        }
        else {
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['product_id'] = !empty($product->product_id) ? $product->product_id : '';
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['size'] = $size;

          $sku = htmlspecialchars_decode($product->sku);
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['sku'] = !empty($product->sku) ? $sku : '';
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['hide_unhide'] = display_mrp($sku) ? 1 : 0;
        }

        if ((!empty($size) && $product_key == 0) || ($product_count == 1) || (!empty($color))) {
          $array[$node_key]['products'][$product_key]['c2_id'] = $node->field_product_category[LANGUAGE_NONE][0]['tid'];
          $array[$node_key]['products'][$product_key]['nid'] = !empty($nid->entity_id) ? $nid->entity_id : '';
          $array[$node_key]['products'][$product_key]['title'] = !empty($product->title) ? htmlspecialchars_decode($product->title) : '';

          $array[$node_key]['products'][$product_key]['badge_id'] = !empty($node->field_badge) ? $node->field_badge[LANGUAGE_NONE][0]['tid'] : 0;
          if (!empty($node->field_product_offer)) {
            foreach ($node->field_product_offer[LANGUAGE_NONE] as $offer_key => $offers) {
              $array[$node_key]['products'][$product_key]['offers'][$offer_key]['offer_name'] = !empty($node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid']) ? bbd_common_get_term_name_from_tid($node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid']) : '';
              $array[$node_key]['products'][$product_key]['offers'][$offer_key]['offer_id'] = !empty($node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid']) ? $node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid'] : '';
            }
          }

          if (!empty($node->field_product_tag)) {
            foreach ($node->field_product_tag[LANGUAGE_NONE] as $tag_key => $tags) {
              $tag_name = bbd_common_get_term_name_from_tid($node->field_product_tag[LANGUAGE_NONE][$tag_key]['tid']);
              $tag_url = bbd_common_get_uri_from_fid_of_tags_tid($node->field_product_tag[LANGUAGE_NONE][$tag_key]['tid']);
              $array[$node_key]['products'][$product_key]['tags'][$tag_key]['tag_name'] = $tag_name;
              $array[$node_key]['products'][$product_key]['tags'][$tag_key]['tag_image'] = image_style_url('thumbnail', $tag_url);
            }
          }

          $array[$node_key]['products'][$product_key]['color'] = $color;

          $prod_des = !empty($product->field_product_short_description) ? htmlspecialchars_decode($product->field_product_short_description[LANGUAGE_NONE][0]['value']) : '';
          $prod_spec = !empty($product->field_product_long_description) ? htmlspecialchars_decode($product->field_product_long_description[LANGUAGE_NONE][0]['value']) : '';

          $array[$node_key]['products'][$product_key]['product_description'] = str_replace('&#11', "", $prod_des);
          $array[$node_key]['products'][$product_key]['product_specification'] = str_replace('&#11', "", $prod_spec);

          $payback_points = variable_get('payback_points', '');
          $payback_price = variable_get('payback_price', '');

          /* if (!empty($payback_points) && !empty($product->commerce_price) && !empty($payback_price)) {
            $payback_points = round(($product->commerce_price[LANGUAGE_NONE][0]['amount'] * $payback_points) / ($payback_price * 100));
            $array[$node_key]['products'][$product_key]['payback_points'] = !empty($payback_points) ? $payback_points : '';
            } */
          if ($product->type == 'product') {
            $array[$node_key]['products'][$product_key]['franchisee_commisson'] = !empty($product->field_franchise_comission) ? ($product->field_franchise_comission[LANGUAGE_NONE][0]['amount'] / 100) : '';
          }
          elseif ($product->type == 'bundle_product') {
            $fc_percent = bbd_common_get_franchisee_commission_of_bundle($product);
            $array[$node_key]['products'][$product_key]['franchisee_commisson'] = !empty($fc_percent) ? ($fc_percent) : '';
          }



          $specif = !empty($product->field_product_specification) ? htmlspecialchars_decode($product->field_product_specification[LANGUAGE_NONE][0]['value']) : '';
//$array[$node_key]['products'][$product_key]['specification'] = 
          $array[$node_key]['products'][$product_key]['specification'] = str_replace('&#11', "", $specif) . "\r";

          $config = array();
          foreach ($product as $field => $value) {
            $pos = strpos($field, 'config');
            if ($pos != FALSE && !empty($value)) {
              $config[] = $field;
            }
          }
          foreach ($config as $field_key => $field) {
            $array[$node_key]['products'][$product_key]['variants'][$field_key] = bbd_common_get_field_label_from_field_machine_name($field);
          }

          $promo_ids = bbd_promotions_get_promo_id_from_node_object($node);
          foreach ($promo_ids as $promo_ids_key => $promo_id) {
            $array[$node_key]['products'][$product_key]['promo_ids'][$promo_ids_key] = $promo_id;
          }
//Attach Exchange offer ID
          $exchange_ids = commerce_coupons_get_coupon_id_from_sku($product->sku);
          foreach ($exchange_ids as $exchange_key => $exchange_id) {
            $array[$node_key]['products'][$product_key]['exchange_ids'][$exchange_key] = $exchange_id->coupon_code;
          }

//if($pid_count == 0){
          $image_count = 0;

          if (empty($first_product)) {
            $first_product = $product; // Store First product Data
          }

          foreach ($first_product->field_product_images[LANGUAGE_NONE] as $image_key => $image) {
            $array[$node_key]['products'][$product_key]['product_image'][$image_key] = $image['filename'];

            $image_count++;
            if ($image_count > 1) {
              break;
            }
          }
//}

          if ($cat_type == 'qa-product') {
            $array[$node_key]['products'][$product_key]['mrp'] = !empty($product->field_product_mrp) ? $product->field_product_mrp[LANGUAGE_NONE][0]['amount'] / 100 : '';
            $array[$node_key]['products'][$product_key]['price'] = !empty($product->commerce_price) ? $product->commerce_price[LANGUAGE_NONE][0]['amount'] / 100 : '';
            $array[$node_key]['products'][$product_key]['inventory'] = !empty($product->commerce_stock) ? $product->commerce_stock[LANGUAGE_NONE][0]['value'] : '';
          }
        }

        $pid_count++;
      }
    }
  }
  return $array;
}

/**
 * Helper Function to generate Product Part in XML
 */
function bbd_common_get_xml_product_new($nids, $cat_type = NULL, $image_style = NULL) {
  $array = array();
  if (!empty($nids)) {
    foreach ($nids as $node_key => $nid) {
      $node = node_load($nid->entity_id);
      $pids = bbd_common_get_pid_from_nid($nid->entity_id);

      $pid_count = 0;
      $first_product = '';

      foreach ($pids as $product_key => $pid) {
        $product = commerce_product_load($pid->product_id);
        $product_count = count($pids);
        $color = !empty($product->field_config_colors) ? htmlspecialchars_decode(bbd_common_get_term_name_from_tid($product->field_config_colors[LANGUAGE_NONE][0]['tid'])) : '';
        $size = !empty($product->field_config_sizes) ? htmlspecialchars_decode(bbd_common_get_term_name_from_tid($product->field_config_sizes[LANGUAGE_NONE][0]['tid'])) : '';

        if ($product_key == 0) {
          $array[$node_key]['nid'] = !empty($nid->entity_id) ? $nid->entity_id : '';
          array_unshift($array[$node_key]['nid']);
        }
        if ($product_count > 1 && !empty($size) && empty($color)) {
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['product_id'] = !empty($product->product_id) ? $product->product_id : '';
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['size'] = $size;

          $sku = htmlspecialchars_decode($product->sku);
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['sku'] = !empty($product->sku) ? $sku : '';
          $array[$node_key]['products'][0]['size_variant_data'][$product_key]['hide_unhide'] = display_mrp($sku) ? 1 : 0;
        }
        else {
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['product_id'] = !empty($product->product_id) ? $product->product_id : '';
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['size'] = $size;

          $sku = htmlspecialchars_decode($product->sku);
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['sku'] = !empty($product->sku) ? $sku : '';
          $array[$node_key]['products'][$product_key]['size_variant_data'][0]['hide_unhide'] = display_mrp($sku) ? 1 : 0;
        }

        if ((!empty($size) && $product_key == 0) || ($product_count == 1) || (!empty($color))) {

          $array[$node_key]['products'][$product_key]['c2_id'] = $node->field_product_category[LANGUAGE_NONE][0]['tid'];
          $array[$node_key]['products'][$product_key]['title'] = !empty($product->title) ? htmlspecialchars_decode($product->title) : '';

          $array[$node_key]['products'][$product_key]['badge_id'] = !empty($node->field_badge) ? $node->field_badge[LANGUAGE_NONE][0]['tid'] : 0;
          if (!empty($node->field_product_offer)) {
            foreach ($node->field_product_offer[LANGUAGE_NONE] as $offer_key => $offers) {
              $array[$node_key]['products'][$product_key]['offers'][$offer_key]['offer_name'] = !empty($node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid']) ? bbd_common_get_term_name_from_tid($node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid']) : '';
              $array[$node_key]['products'][$product_key]['offers'][$offer_key]['offer_id'] = !empty($node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid']) ? $node->field_product_offer[LANGUAGE_NONE][$offer_key]['tid'] : '';
            }
          }

          if (!empty($node->field_product_tag)) {
            foreach ($node->field_product_tag[LANGUAGE_NONE] as $tag_key => $tags) {
              $tag_name = bbd_common_get_term_name_from_tid($node->field_product_tag[LANGUAGE_NONE][$tag_key]['tid']);
              $tag_url = bbd_common_get_uri_from_fid_of_tags_tid($node->field_product_tag[LANGUAGE_NONE][$tag_key]['tid']);
              $array[$node_key]['products'][$product_key]['tags'][$tag_key]['tag_name'] = $tag_name;
              $array[$node_key]['products'][$product_key]['tags'][$tag_key]['tag_image'] = image_style_url('thumbnail', $tag_url);
            }
          }

          $array[$node_key]['products'][$product_key]['color'] = $color;

          $prod_des = !empty($product->field_product_short_description) ? htmlspecialchars_decode($product->field_product_short_description[LANGUAGE_NONE][0]['value']) : '';
          $prod_spec = !empty($product->field_product_long_description) ? htmlspecialchars_decode($product->field_product_long_description[LANGUAGE_NONE][0]['value']) : '';

          $array[$node_key]['products'][$product_key]['product_description'] = str_replace('&#11', "", $prod_des);
          $array[$node_key]['products'][$product_key]['product_specification'] = str_replace('&#11', "", $prod_spec);

          $payback_points = variable_get('payback_points', '');
          $payback_price = variable_get('payback_price', '');

          /* if (!empty($payback_points) && !empty($product->commerce_price) && !empty($payback_price)) {
            $payback_points = round(($product->commerce_price[LANGUAGE_NONE][0]['amount'] * $payback_points) / ($payback_price * 100));
            $array[$node_key]['products'][$product_key]['payback_points'] = !empty($payback_points) ? $payback_points : '';
            } */
          if ($product->type == 'product') {
            $array[$node_key]['products'][$product_key]['franchisee_commisson'] = !empty($product->field_franchise_comission) ? ($product->field_franchise_comission[LANGUAGE_NONE][0]['amount'] / 100) : '';
          }
          elseif ($product->type == 'bundle_product') {
            $fc_percent = bbd_common_get_franchisee_commission_of_bundle($product);
            $array[$node_key]['products'][$product_key]['franchisee_commisson'] = !empty($fc_percent) ? ($fc_percent) : '';
          }



          $specif = !empty($product->field_product_specification) ? htmlspecialchars_decode($product->field_product_specification[LANGUAGE_NONE][0]['value']) : '';
//$array[$node_key]['products'][$product_key]['specification'] = 
          $array[$node_key]['products'][$product_key]['specification'] = str_replace('&#11', "", $specif) . "\r";

          $config = array();
          foreach ($product as $field => $value) {
            $pos = strpos($field, 'config');
            if ($pos != FALSE && !empty($value)) {
              $config[] = $field;
            }
          }
          foreach ($config as $field_key => $field) {
            $array[$node_key]['products'][$product_key]['variants'][$field_key] = bbd_common_get_field_label_from_field_machine_name($field);
          }

          $promo_ids = bbd_promotions_get_promo_id_from_node_object($node);
          foreach ($promo_ids as $promo_ids_key => $promo_id) {
            $array[$node_key]['products'][$product_key]['promo_ids'][$promo_ids_key] = $promo_id;
          }
//Attach Exchange offer ID
          $exchange_ids = commerce_coupons_get_coupon_id_from_sku($product->sku);
          foreach ($exchange_ids as $exchange_key => $exchange_id) {
            $array[$node_key]['products'][$product_key]['exchange_ids'][$exchange_key] = $exchange_id->coupon_code;
          }

//if($pid_count == 0){
          $image_count = 0;

          if (empty($first_product)) {
            $first_product = $product; // Store First product Data
          }

          foreach ($first_product->field_product_images[LANGUAGE_NONE] as $image_key => $image) {
            $array[$node_key]['products'][$product_key]['product_image'][$image_key] = $image['filename'];

            $image_count++;
            if ($image_count > 1) {
              break;
            }
          }
//}

          if ($cat_type == 'qa-product') {
            $array[$node_key]['products'][$product_key]['mrp'] = !empty($product->field_product_mrp) ? $product->field_product_mrp[LANGUAGE_NONE][0]['amount'] / 100 : '';
            $array[$node_key]['products'][$product_key]['price'] = !empty($product->commerce_price) ? $product->commerce_price[LANGUAGE_NONE][0]['amount'] / 100 : '';
            $array[$node_key]['products'][$product_key]['inventory'] = !empty($product->commerce_stock) ? $product->commerce_stock[LANGUAGE_NONE][0]['value'] : '';
          }
        }

        $pid_count++;
      }
    }
  }
  return $array;
}

/**
 * Returns If C2 Category has ZOOM Enabled
 */
function bbd_common_check_zoom_from_category($tid) {
  $query = db_select('field_data_field_zoom', 'fz');
  $query->fields('fz', array('entity_id'));
  $query->condition('fz.entity_id', $tid);
  $query->condition('fz.field_zoom_value', 1);
  $zoom = $query->execute()->fetchField();
  return $zoom;
}

function bbd_common_get_franchisee_commission_of_bundle($product) {
  $line_items = $product->field_bundle_products[LANGUAGE_NONE];
  $bundle_fc_percent_total = 0;
  foreach ($line_items as $child) {
    $child_line_item = commerce_line_item_load($child['line_item_id']);
    if (!empty($child_line_item->field_franchise_comission)) {
      $child_fc_percent = $child_line_item->field_franchise_comission[LANGUAGE_NONE][0]['amount'] / 100;
    }
    else {
      $child_product = commerce_product_load_by_sku($child_line_item->line_item_label);
      $child_fc_percent = $child_product->field_franchise_comission[LANGUAGE_NONE][0]['amount'] / 100;
    }

    $child_sp = $child_line_item->commerce_total[LANGUAGE_NONE][0]['amount'] / 100;
    $bundle_fc_percent_total += $child_fc_percent * $child_sp / 100;
  }
  $bundle_sp = $product->commerce_price[LANGUAGE_NONE][0]['amount'] / 100;
  $bundle_fc_percent = round($bundle_fc_percent_total / $bundle_sp * 100, 2);
  return $bundle_fc_percent;
}

/**
 * Get Field label from field name
 * 
 */
function bbd_common_get_field_label_from_field_machine_name($field) {
  $field_name = field_info_instance('commerce_product', $field, 'product');
  return $field_name['label'];
}

/**
 * Get similar products from Node
 * 
 */
function bbd_common_get_similar_product_from_nid($node) {
  $category_id = !empty($node->field_product_category) ? $node->field_product_category[LANGUAGE_NONE][0]['tid'] : '';
  $temp = bbd_common_get_pid_from_nid($node->nid);
  foreach ($temp as $pid) {
    $pids[] = $pid->product_id;
  }
  $query = db_select('node', 'n');
  $query->join('field_data_field_product_brand', 'b', 'b.entity_id = n.nid');
  $query->join('field_data_field_product_category', 'c', 'c.entity_id = n.nid');
  $query->join('field_data_field_product_reference', 'p', 'p.entity_id = n.nid');
  $query->addField('p', 'field_product_reference_product_id', 'product_id');
  $query->condition('c.field_product_category_tid', $category_id);
  $query->condition('n.status', 1);
  $query->condition('p.field_product_reference_product_id', $pids, 'NOT IN');
  $query->range(0, 3);
  $sku = $query->execute()->fetchAll();
  return $sku;
}

/**
 * Return Childrens from Parent tid
 */
function bbd_common_get_children_from_parent_tid($tid, $cat_type = NULL, $return_type = NULL) {
  if (!empty($tid)) {
    $query = db_select('taxonomy_term_hierarchy', 'h');
    $query->join('taxonomy_term_data', 't', 'h.tid =t.tid');
    if ($cat_type == 'OLD') {
      $query->join('field_data_field_product_category', 'c', 'c.field_product_category_tid =t.tid');
    }
    else {
      $query->join('field_data_field_product_master_category', 'c', 'c.field_product_master_category_tid =t.tid');
    }
    $query->fields('t', array('tid', 'name'));
    $query->condition('h.parent', $tid);
    if ($return_type == 'TID') {
      $childrens = $query->groupBy('t.tid')->orderBy('t.weight')->execute()->fetchAllKeyed(0, 0);
    }
    else {
      $childrens = $query->groupBy('t.tid')->orderBy('t.weight')->execute()->fetchAll();
    }
    return $childrens;
  }
}

/**
 * Returns Term Name from tid
 */
function bbd_common_get_term_name_from_tid($tid) {
  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('name'));
  $query->condition('t.tid', $tid);
  $term_name = $query->execute()->fetchField();
  return $term_name;
}

/**
 * Returns All nids from given category tid
 */
function bbd_common_get_nids_from_category_tid($tid, $qa_product = NULL, $cat_type = NULL) {
  if ($tid) {
    if ($cat_type == 'OLD') {
      $query = db_select('field_data_field_product_category', 'c');
      $query->condition('c.field_product_category_tid', $tid);
    }
    else {
      $query = db_select('field_data_field_product_master_category', 'c');
      $query->condition('c.field_product_master_category_tid', $tid);
    }
    $query->leftJoin('node', 'n', 'n.nid = c.entity_id');
    $query->leftJoin('field_data_field_product_reference', 'pr', 'pr.entity_id = c.entity_id');
    $query->leftJoin('field_data_commerce_stock', 'cs', 'cs.entity_id = pr.field_product_reference_product_id');
    $query->leftJoin('field_data_field_assortment_flag', 'ass', 'ass.entity_id = pr.field_product_reference_product_id');
    $query->leftJoin('field_data_field_qa_flag', 'qa', 'qa.entity_id = c.entity_id');
    $query->fields('c', array('entity_id'));
    $query->condition('c.bundle', 'product_display');
    if ($qa_product == 'qa-product') {
      $query->condition('qa.field_qa_flag_value', 1);
    }
    else {
      $query->condition('n.status', 1);
      $db_or1 = db_or();
      $db_or1->condition('qa.field_qa_flag_value', 1, '<>');
      $db_or1->isNull('qa.field_qa_flag_value');
      $query->condition($db_or1);

      $db_or = db_or();
      $db_or->condition('cs.commerce_stock_value', 0, '>');
      $db_or->condition('ass.field_assortment_flag_value', 1);
      $query->condition($db_or);
    }
    $nids = $query->groupBy('c.entity_id')->execute()->fetchAll();
    return $nids;
  }
}

function bbd_common_update_mc_terms($term, $item, $c_tid) {
  $allterms = db_select('field_data_field_master_category', 'fmc')->fields('fmc', array('field_master_category_tid'))->condition('entity_id', $c_tid)->condition('entity_type', 'taxonomy_term')->execute()->fetchAll();
  $count = count($term->field_master_category[LANGUAGE_NONE]);
  foreach ($term->field_master_category[LANGUAGE_NONE] as $new_term) {
    $new_terms[$new_term['tid']] = $new_term['tid'];
  }
  foreach ($allterms as $existing_term) {
    if (!in_array($existing_term->field_master_category_tid, $new_terms)) {
      $term->field_master_category[LANGUAGE_NONE][$count]['tid'] = $existing_term->field_master_category_tid;
      $check[$count] = $existing_term->field_master_category_tid;
      $count++;
    }
  }
  taxonomy_term_save($term);
  return TRUE;
}

/**
 *  Implements hook_feeds_presave
 */
function bbd_common_feeds_presave(FeedsSource $source, $entity, $item) {
  if ($entity->feeds_item->id == 'product_price_upload') {
    $sku = $entity->sku;
    $disc_value = variable_get('sp_max_discount', 60) / 100;
    $allowed_discount = $entity->field_product_mrp[LANGUAGE_NONE][0]['amount'] - ($entity->field_product_mrp[LANGUAGE_NONE][0]['amount'] * $disc_value);
    if ($entity->commerce_price[LANGUAGE_NONE][0]['amount'] > $entity->field_product_mrp[LANGUAGE_NONE][0]['amount']) {
      // drupal_set_message('SP Can not be greater than MRP for SKU ' . $sku, 'error');
      drupal_set_message(check_plain(t('SP Can not be greater than MRP for SKU  @sku', array('@sku' => $sku))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
    elseif ($entity->commerce_price[LANGUAGE_NONE][0]['amount'] < $allowed_discount) {
      // drupal_set_message('Maximum Discount can be upto ' . variable_get('sp_max_discount', 60) . '% for SKU ' . $sku, 'error');
      drupal_set_message(check_plain(t('Maximum Discount can be upto @discount% for SKU @sku', array('@sku' => $sku, '@discount' => variable_get('sp_max_discount', 60)))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }

  if ($entity->feeds_item->id == 'egv_schema') {
    if (isset($_SESSION['egv_row_count'])) {
      $_SESSION['egv_row_count'] = $_SESSION['egv_row_count'] + 1;
    }
    else {
      $_SESSION['egv_row_count'] = 2; // initialize session and assign row value
    }
    $rw_no = $_SESSION['egv_row_count'];
    if ($item['egv amount'] <= 0 && is_int($item['egv amount'])) {
      drupal_set_message(check_plain(t('Kindly Enter proper Amount at row @rw_no', array('@rw_no' => $rw_no))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
    $mobile_check = preg_match('/^([0-9]{10})$/', $item['egv mobile no']);
    if ($mobile_check == FALSE) {
      drupal_set_message(check_plain(t('Kindly Enter 10 digit mobile no at row @rw_no', array('@rw_no' => $rw_no))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
    if ($item['egv sms flag'] != '0' && $item['egv sms flag'] != '1') {
      drupal_set_message(check_plain(t('Sms flag should be either 0 or 1 at row @rw_no', array('@rw_no' => $rw_no))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
    $exp_time = $item['egv expiry date (yyyy/mm/dd)'] + 86399;
    if (empty($item['egv expiry date (yyyy/mm/dd)'])) {
      drupal_set_message(check_plain(t('Expiry date should not be empty at row @rw_no', array('@rw_no' => $rw_no))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
    elseif ($exp_time < REQUEST_TIME) {
      drupal_set_message(check_plain(t('Expiry date should not less than current time at row @rw_no', array('@rw_no' => $rw_no))), 'error');
      $entity->feeds_item->skip = TRUE;
    }

    if (!empty($item['egv frachisee code'][0])) {
      foreach ($item['egv frachisee code'] as $fr_code) {
        $franchisee_uid = get_franchisee_id_by_code($fr_code);
        if (empty($franchisee_uid)) {
          drupal_set_message(check_plain(t('Franchisee code is not valid at row @rw_no', array('@rw_no' => $rw_no))), 'error');
          $entity->feeds_item->skip = TRUE;
        }
      }
    }
    if ($item['egv type'] != '0' && $item['egv type'] != '1' && $item['egv type'] != '2' && $item['egv type'] != '3') {
      drupal_set_message(check_plain(t('Please enter correct egv type at row @rw_no', array('@rw_no' => $rw_no))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
    if (empty($item['egv customer'])) {
      drupal_set_message(check_plain(t('Please enter Name of customer at row @rw_no', array('@rw_no' => $rw_no))), 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }


  if ($entity->feeds_item->id == 'master_specification_importer') {
    if ($item['spcification name']) {
      $p_tid = db_select('taxonomy_term_data', 'd')->fields('d', array('tid'))->condition('d.vid', $entity->vid)->condition('d.name', $item["spcification name"])->execute()->fetchField();
    }
    if ($item['spcification value']) {
      $c_tid = db_select('taxonomy_term_data', 'd')->fields('d', array('tid'))->condition('d.vid', $entity->vid)->condition('d.name', $item["spcification value"])->execute()->fetchAllKeyed(0, 0);
      if ($p_tid) {
        $childs = db_select('taxonomy_term_hierarchy', 'h')->fields('h', array('tid'))->condition('h.parent', $p_tid)->execute()->fetchAllKeyed(0, 0);
        foreach ($childs as $child) {
          if (in_array($child, $c_tid)) {
            bbd_common_update_mc_terms($entity, $item, $child);
            $entity->feeds_item->skip = TRUE;
          }
        }
      }
      else {
        if (!empty($item['spcification name'])) {
          drupal_set_message("‘Specification Name does not exist. Please first create the Specification Name.’");
          $entity->feeds_item->skip = TRUE;
        }
      }
    }
    if (empty($p_tid) && $c_tid) {
      $tid = db_select('taxonomy_term_hierarchy', 'h')->fields('h', array('tid'))->condition('h.tid', key($c_tid))->condition('h.parent', 0)->execute()->fetchField();
      bbd_common_update_mc_terms($entity, $item, $tid);
      $entity->feeds_item->skip = TRUE;
    }
    $entity_id = _get_tid_from_ext_id($item['ext id']);
    if ($entity_id) {
      $entity->tid = $entity_id;
      $entity->feeds_item->is_new = 0;
      $entity->feeds_item->entity_id = $entity_id;
    }
  }
  if ($entity->feeds_item->id == 'master_specification_remove_importer') {
    $s_tid = bbd_common_get_term_id_from_name($item['specification name'], 'master_specifications');
    $new_term = taxonomy_term_load($s_tid);
    $count = (count($new_term->field_master_category[LANGUAGE_NONE])) - 1;
    $terms = array();
    while ($count >= 0) {
      $terms[] = $new_term->field_master_category[LANGUAGE_NONE][$count]['tid'];
      $count--;
    }
    $del = (explode("|", $item['master category']));
    $new_category = (array_diff($terms, $del));
    $count = (count($new_category)) - 1;
    unset($new_term->field_master_category['und']);
    while ($count >= 0) {
      $new_term->field_master_category[LANGUAGE_NONE][$count]['tid'] = $new_category[$count];
      $count--;
    }
    $new_term->field_available_for_compare['und'][0]['value'] = $item['available for compare'];
    $new_term->field_available_for_filter['und'][0]['value'] = $item['available for filter'];
    taxonomy_term_save($new_term);
    $entity->feeds_item->skip = TRUE;
  }
  if ($entity->feeds_item->id == 'city_wise_price_upload' || $entity->feeds_item->id == 'city_wise_price_upload_no_valdation') {
    $cities = explode('|', $item['city']);
    $mrp = explode('|', $item['mrp']);
    $sp = explode('|', $item['sp']);
// $fc = explode('|', $item['fc']);
    $disc_value = variable_get('sp_max_discount', 60) / 100;

    foreach ($cities as $key => $city) {
      $allowed_discount = $mrp[$key] - ($mrp[$key] * $disc_value);

      if ($sp[$key] > $mrp[$key] && $entity->feeds_item->id != 'city_wise_price_upload_no_valdation') {

        // drupal_set_message('SP Can not be greater than MRP for City ' . $cities[$key], 'error');
        drupal_set_message(check_plain(t('SP Can not be greater than MRP for City @city', array('@city' => $cities[$key]))), 'error');
        continue;
      }
      elseif ($sp[$key] < $allowed_discount && $entity->feeds_item->id != 'city_wise_price_upload_no_valdation') {
        //drupal_set_message('Maximum Discount can be upto ' . variable_get('sp_max_discount', 60) . '% for City ' . $cities[$key], 'error');
        drupal_set_message(check_plain(t('Maximum Discount can be upto @sp_discount% for City @city', array('@city' => $cities[$key], '@sp_discount' => variable_get('sp_max_discount', 60)))), 'error');
        continue;
      }
      else {
        $city_id = bbd_common_get_term_id_from_name($city, 'pincode_master');
        $delta = bbd_common_get_delta_from_sku_and_city($item['sku'], $city_id);
        $query = db_select('field_data_field_main_city', 'mc');
        $query->leftJoin('taxonomy_term_data', 't', 't.tid = mc.field_main_city_tid');
        $query->fields('t', array('name'));
        $results = $query->groupBy('t.tid')->execute()->fetchCol();
        if (!in_array($city, $results) && $entity->feeds_item->id != 'city_wise_price_upload_no_valdation') {
          drupal_set_message($city . 'is not in Main city list');
          continue;
        }
        if (!is_Numeric($delta)) {
          if (isset($entity->field_citywise_price)) {
            $delta = count($entity->field_citywise_price);
          }
          else {
            $delta = 0;
          }
          $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_citywise_price'));
          $field_collection_item->setHostEntity('commerce_product', $entity);
          $field_collection_item->field_pincodes[LANGUAGE_NONE][0]['tid'] = $city_id;
          $field_collection_item->field_city_price[LANGUAGE_NONE][0]['amount'] = $sp[$key] * 100;
          $field_collection_item->field_city_price[LANGUAGE_NONE][0]['currency_code'] = 'INR';
          $field_collection_item->field_city_mrp[LANGUAGE_NONE][0]['amount'] = $mrp[$key] * 100;
          $field_collection_item->field_city_mrp[LANGUAGE_NONE][0]['currency_code'] = 'INR';
// $field_collection_item->field_city_comission[LANGUAGE_NONE][0]['amount'] = $fc[$key] * 100;
// $field_collection_item->field_city_comission[LANGUAGE_NONE][0]['currency_code'] = 'INR';
          $field_collection_item->save();
        }
        else {
          $field_id = $entity->field_citywise_price[LANGUAGE_NONE][$delta]['value'];
          $field_collection_item = entity_load('field_collection_item', array($field_id));
          $field_collection_item = end($field_collection_item);

          $original_mrp = $field_collection_item->field_city_mrp['und'][0]['amount'];
          $original_sp = $field_collection_item->field_city_price['und'][0]['amount'];

          $field_collection_item->field_pincodes[LANGUAGE_NONE][0]['tid'] = $city_id;
          $field_collection_item->field_city_price[LANGUAGE_NONE][0]['amount'] = $sp[$key] * 100;
          $field_collection_item->field_city_price[LANGUAGE_NONE][0]['currency_code'] = 'INR';
          $field_collection_item->field_city_mrp[LANGUAGE_NONE][0]['amount'] = $mrp[$key] * 100;
          $field_collection_item->field_city_mrp[LANGUAGE_NONE][0]['currency_code'] = 'INR';
//$field_collection_item->field_city_comission[LANGUAGE_NONE][0]['amount'] = $fc[$key] * 100;
//$field_collection_item->field_city_comission[LANGUAGE_NONE][0]['currency_code'] = 'INR';
          $field_collection_item->save();
          if ($original_mrp != $mrp[$key] * 100 || $original_sp != $sp[$key] * 100) {
            $sku = $entity->sku;
            $a = db_update('bbd_assortment_new')
                ->condition('sku', $sku)
                ->condition('city_tid', $city_id)
                ->fields(array(
                  'changed' => REQUEST_TIME,
                  'mrp' => $field_collection_item->field_city_mrp[LANGUAGE_NONE][0]['amount'],
                  'sp' => $field_collection_item->field_city_price[LANGUAGE_NONE][0]['amount'],
                ))
                ->execute();
          }
        }
      }
    }
  }

  if ($entity->feeds_item->id == 'buulk_product_upload' || $entity->feeds_item->id == 'bundle_product_upload') {
    if ($entity->feeds_item->id == 'buulk_product_upload') {
      /*
       * Logic : Remove logic and empty value should not update
       */
      $mappings = feeds_importer($entity->feeds_item->id)->processor->config['mappings'];
      foreach ($mappings as $mapping) {
        $final_mappings[strtolower($mapping['source'])] = $mapping;
      }
      foreach ($item as $key => $value) {
        if (array_key_exists($key, $final_mappings)) {
          $field_name = $final_mappings[$key]['target'];
          if (empty($value) || $value == '') {
            unset($entity->{$field_name});
          }
          if (in_array($value, array('<remove>', '&lt;remove&gt;'))) {
            $field_info = field_info_field($field_name);
            if (!empty($field_info)) {
              $first_key = key($field_info['columns']);
              unset($entity->{$field_name}[LANGUAGE_NONE]);
            }
            else {
              $entity->{$field_name} = '';
            }
          }
        }
      }
      /*
       * END : Remove logic and empty value should not update
       */
    }
    $header = array_keys($item);

    $start = array_search('feature1', $header);
    $end = $start + 4;

    $attributes = json_encode(array_slice($item, $start, 4)); // Fetching Specification After General Attribs
    $attributes = preg_replace('/[[:^print:]]/', '', $attributes);

    $spec_attrs = array_slice($item, $end);

    $specs = array();
    if (count(array_filter($spec_attrs)) > 0) {
      foreach ($spec_attrs as $key => $val) {
        $val = preg_replace('/[[:^print:]]/', '', $val);
        $specs['spec'][] = array(
          "name" => ucwords($key),
          "value" => htmlspecialchars_decode($val),
        );
      }
      $specification_attrs = json_encode($specs);
      $entity->field_product_long_description[LANGUAGE_NONE][0]['value'] = $specification_attrs;
    }
    /*
     * Feature remove and update logic
     */
    $prev_feature = $entity->field_product_specification[LANGUAGE_NONE][0]['value'];
    $prev_feature = json_decode($prev_feature);
    $cur_feature = json_decode($attributes);
    foreach ($cur_feature as $key => $val) {
      if ($val == '<remove>') {
        $prev_feature->$key = "";
      }
      elseif (trim($val) != "") {
        $prev_feature->$key = $val;
      }
      else {
        if (!isset($prev_feature->$key)) {
          $prev_feature->$key = "";
        }
      }
    }

    $prev_feature = json_encode($prev_feature);

    /*
     * Feature remove and update logic end
     */
    $entity->field_product_specification[LANGUAGE_NONE][0]['value'] = $prev_feature;
    if ($entity->feeds_item->id == 'buulk_product_upload') {
      if (trim($item['product images']) == '<remove>') {
        unset($entity->field_product_images);
      }
      elseif (trim($item['product images']) != '') {
        $large_image = explode(',', trim($item['product images']));
        $type = 'product images';
        $field_name = 'field_product_images';
        $entity_main_image = bbd_common_save_images($large_image, $type, $field_name);
        foreach ($entity_main_image->field_product_images[LANGUAGE_NONE] as $key => $image) {
          $entity->field_product_images[LANGUAGE_NONE][$key] = $image;
        }
      }
    }
    else {// Same as before
      $large_image = $item['product images'];
      $type = 'product images';
      $field_name = 'field_product_images';
      $entity_main_image = bbd_common_save_images($large_image, $type, $field_name);
      foreach ($entity_main_image->field_product_images[LANGUAGE_NONE] as $key => $image) {
        $entity->field_product_images[LANGUAGE_NONE][$key] = $image;
      }
    }
    if ($entity->type == 'bundle_product') {
      $sku = explode('|', $item['sku']);
      $qty = explode('|', $item['qty']);
      $unit_price = explode('|', $item['unit price']);
      $fc_commission = explode('|', $item['fc in percentage']);
      foreach ($sku as $key => $value) {
        $product = commerce_product_load_by_sku(str_pad((string) $sku[$key], 18, '0', STR_PAD_LEFT));
        $line_item = commerce_product_line_item_new($product, $qty[$key], 0);
        $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] = $unit_price[$key] * 100;
        $line_item->commerce_unit_price[LANGUAGE_NONE][0]['currency_code'] = 'INR';
        $line_item->field_franchise_comission[LANGUAGE_NONE][0]['amount'] = $fc_commission[$key] * 100;
        $line_item->field_franchise_comission[LANGUAGE_NONE][0]['currency_code'] = 'INR';
        commerce_line_item_save($line_item);
        $entity->field_bundle_products[LANGUAGE_NONE][$key]['line_item_id'] = $line_item->line_item_id;
      }
    }
  }

  if ($entity->feeds_item->id == 'category_location_group') {
    if (array_key_exists('mc category', $item)) {
      if (!is_numeric($item['mc category'])) {
        drupal_set_message(check_plain('Mc Category: ' . $item['mc category'] . " Record skiped ", 'error'));
        $entity->feeds_item->skip = TRUE;
      }
    }
    else {
      drupal_set_message(t('Header with Mc Category not found.'), 'error');
    }
  }

  if ($entity->feeds_item->id == 'sap_hierarchy_') {
    $entity->parent[0] = $item['parent category'];
  }

  if ($entity->feeds_item->id == 'egv_schema') {
    $entity->field_egv_expiry_date['und'][0]['value'] += 86399;
  }

  ########### content validation ###########
  if ($entity->feeds_item->id == 'bulk_node_upload') {
    if ($entity->is_new) {
      $pid = array();
      foreach ($entity->field_product_reference['und'] as $pid_val) {
        $pid[] = $pid_val['product_id'];
        // $pid = $entity->field_product_reference['und'][0]['product_id'];
      }
      $scm_flag = check_scm_flag_from_pid($pid);
      $scm_check = array_filter($scm_flag);
      if (empty($scm_check)) {
        drupal_set_message('Can not create node since scm qc flag is still attached', 'error');
        $entity->feeds_item->skip = TRUE;
      }
    }
  }
  // This, the most confusing code was written so that blank value of any field doesnt get updated
  if ($entity->feeds_item->id == 'scm_content_validation') {
    // Mapping is needed to get the field name, so as to unset it.
    $mappings = feeds_importer($entity->feeds_item->id)->processor->config['mappings'];
    foreach ($mappings as $mapping) {
      $final_mappings[strtolower($mapping['source'])] = $mapping;
    }
    foreach ($item as $key => $value) {
      if (array_key_exists($key, $final_mappings)) {
        $field_name = $final_mappings[$key]['target'];
        $val = trim($value);
        $field_name = preg_replace('/:[A-Za-z0-9.\-]*/', '', $field_name); // This weird piece of code was done to remove the ':Amount' from the 'Package cost : Amount' header of the excel header.
        if ($val === '') {
          unset($entity->{$field_name});
        }
      }
    }
  }
  if ($entity->feeds_item->id == 'scm_content_validation_bundle') {
    $mappings = feeds_importer($entity->feeds_item->id)->processor->config['mappings'];
    foreach ($mappings as $mapping) {
      $final_mappings[strtolower($mapping['source'])] = $mapping;
    }
    foreach ($item as $key => $value) {
      if (array_key_exists($key, $final_mappings)) {
        $field_name = $final_mappings[$key]['target'];
        $val = trim($value);
        $field_name = preg_replace('/:[A-Za-z0-9.\-]*/', '', $field_name);
        if ($value === '') {
          unset($entity->{$field_name});
        }
      }
    }
  }
  if ($entity->feeds_item->id == 'scm_validation_freight') {
    $mappings = feeds_importer($entity->feeds_item->id)->processor->config['mappings'];
    foreach ($mappings as $mapping) {
      $final_mappings[strtolower($mapping['source'])] = $mapping;
    }
    foreach ($item as $key => $value) {
      if (array_key_exists($key, $final_mappings)) {
        $field_name = $final_mappings[$key]['target'];
        $val = trim($value);
        $field_name = preg_replace('/:[A-Za-z0-9.\-]*/', '', $field_name);
        if ($value === '') {
          unset($entity->{$field_name});
        }
      }
    }
  }
}

########### content validation ###########

/**
 * ########### content validation ###########
 * @param type $pid
 * @returns 1 or 0 depending on the sc flag status
 */
function check_scm_flag_from_pid($pid) {
  $query = db_select('commerce_product', 'cp');
  $query->join('field_data_field_scm_qc_flag', 'sf', 'cp.product_id=sf.entity_id');
  $query->condition('product_id', $pid, 'IN');
  $query->fields('sf', array('field_scm_qc_flag_value'));
  $res = $query->execute()->fetchField();
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $result = array();
  foreach ($res as $val) {
    $result[] = $val['field_scm_qc_flag_value'];
  }
  return $result;
}

########### content validation ###########

/**
 * 
 * @param type $sku
 * @param type $city_id
 * 
 */
function bbd_common_get_delta_from_sku_and_city($sku, $city_id) {
  $query = db_select('commerce_product', 'cp');
  $query->join('field_data_field_citywise_price', 'fcwp', 'fcwp.entity_id = cp.product_id');
  $query->join('field_data_field_pincodes', 'pc', 'pc.entity_id = fcwp.field_citywise_price_value');
  $query->fields('fcwp', array('delta'));
  $query->condition('cp.sku', $sku);
  $query->condition('pc.field_pincodes_tid', $city_id);
  $delta = $query->execute()->fetchField();
  return $delta;
}

/**
 * 
 * @param type $tid
 * 
 */
function bbd_common_get_parent_id_from_category_id($tid) {
  $query = db_select('taxonomy_term_hierarchy', 't');
  $query->fields('t', array('parent'));
  $query->condition('t.tid', $tid);
  $parent_tid = $query->execute()->fetchField();
  return $parent_tid;
}

function bbd_common_save_images($images, $type, $field_name) {

  if (!empty($images) && !is_null($images[0])) {
    $key = 0;
    $flag = 0;
    foreach ($images as $image) {
      $flag = 0;
      if (file_exists('sites/default/files/images/Product_images/' . $image)) {
        $filepath = drupal_realpath('sites/default/files/images/Product_images/' . $image);
        $flag = 1;
      }
      elseif (file_exists('sites/default/files/' . $image)) {
        $filepath = drupal_realpath('sites/default/files/' . $image);
//$flag = 1;
        $flag = 2;
      }
      if ($flag == 1) {
        $fid = bbd_common_check_image_exist($image);
        if (!empty($fid)) {

//Moves the actual file from '/images/Product_images' to '/default/files/'
//without any database changes to the file object 
          file_unmanaged_move($filepath, 'public://', FILE_EXISTS_REPLACE);
          $file = file_load($fid);
//file_delete($file, TRUE);
        }
        else {
          $file = (object) array(
                'uid' => 1,
                'uri' => $filepath,
                'filemime' => file_get_mimetype($filepath),
                'status' => 1,
                'filename' => $image,
          );
//$file = file_copy($file, 'public://');
          $file = file_move($file, 'public://');
        }

        if ($field_name == 'field_product_images') {
          $entity->field_product_images[LANGUAGE_NONE][$key] = (array) $file;
        }
        if ($field_name == 'field_tile_image') {
          $entity->field_tile_image[LANGUAGE_NONE][$key] = (array) $file;
        }
        if ($field_name == 'field_grid_image') {
          $entity->field_grid_image[LANGUAGE_NONE][$key] = (array) $file;
        }
        $key++;
//Clear all image styles of the product so they will be rebuilt
        image_path_flush('public://' . $image);
      }
      elseif ($flag == 2) {
        $fid = bbd_common_check_image_exist($image);
        if (!empty($fid)) {
          $file = file_load($fid);

          if ($field_name == 'field_product_images') {
            $entity->field_product_images[LANGUAGE_NONE][$key] = (array) $file;
          }
        }

        $key++;
//Clear all image styles of the product so they will be rebuilt
        image_path_flush('public://' . $image);
      }
      else {
        drupal_set_message(check_plain($image, 'error'));
      }
    }
  }
  return $entity;
}

/**
 * 
 * @param type $file_name
 * @return type
 * 
 */
function bbd_common_check_image_exist($file_name) {
  $query = db_select('file_managed', 'fm');
  $query->fields('fm', array('fid'));
  $query->condition('fm.filename', $file_name);
  return $query->execute()->fetchField();
}

/**
 * Implements hook_permission().
 */
function bbd_common_permission() {
  $permissions = array(
    'bbd_common_image_upload' => array(
      'title' => t('Upload Images'),
    ),
    'bbd_cart_remove_line_item' => array(
      'title' => t('remove line item'),
    ),
    'bbd_common_get_customer_data' => array(
      'title' => t('Get Franchisees Customer Data'),
    ),
    'franchisee_restriction' => array(
      'title' => t('franchisee restriction for customers'),
    )
  );
  return $permissions;
}

/**
 * Implments hook_menu
 *
 */
function bbd_common_menu() {


  ############## (Hardik)Get Latest Franchisee and their customer data##########
  $items['franchisee/customer'] = array(
    'title' => 'All Franchisee Customer',
    'description' => 'All Franchisee Customer',
    'page callback' => 'get_customer_from_franchisee',
    'access arguments' => array('bbd_common_get_customer_data'),
    'file' => 'bbd_common_get_customer_data.inc',
    'file path' => drupal_get_path('module', 'bbd_common'),
  );

  $items['franchisee/download/excel'] = array(
    'title' => 'All Franchisee Customer',
    'description' => 'All Franchisee Customer',
    'page callback' => 'get_thankyou_msg',
    'access arguments' => array('bbd_common_get_customer_data'),
    'file' => 'bbd_common_get_customer_data.inc',
    'file path' => drupal_get_path('module', 'bbd_common'),
  );
####################### END #####################################################
  $items['admin/manage-price-discount'] = array(
    'title' => 'MAX Allowed Discount',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbd_common_price_discount_config_form'),
    'access callback' => 'check_if_fr_role_user_admin',
    'file' => 'bbd_common.inc',
    'file path' => drupal_get_path('module', 'bbd_common'),
  );
  $items['admin/management'] = array(
    'title' => 'Management',
    'page callback' => 'bbd_common_image_upload_multiple',
    'access arguments' => array('bbd_common_image_upload'),
  );
  $items['admin/management/image_upload'] = array(
    'title' => 'Upload Image',
    'page callback' => 'bbd_common_image_upload_multiple',
    'access arguments' => array('bbd_common_image_upload'),
  );
  $items['admin/management/inventory/import'] = array(
    'title' => 'Import Virtual Inventory',
    'description' => 'Import Virtual Inventory',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbd_common_import_inventory_form'),
    'access arguments' => array('bbd_common_image_upload'),
  );
  $items['admin/management/inventory/import/physical'] = array(
    'title' => 'Import Physical Inventory',
    'description' => 'Import Physical Inventory',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbd_common_import_physical_inventory_form'),
    'access arguments' => array('bbd_common_image_upload'),
  );
  $items['bundle/product/%/autofill'] = array(
    'title' => 'Inventory / Unit price Autofill',
    'description' => 'Bundle product Autofill',
    'page callback' => 'bbd_common_bundle_product_autofill',
    'page arguments' => array(2),
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('bbd_common_image_upload'),
  );
  $items['custom-add-to-cart/%'] = array(
    'title' => 'Custom Add to cart button',
    'description' => 'Custom Add to cart button',
    'page callback' => 'bbd_common_get_custom_add_to_cart',
    'page arguments' => array(1),
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('bbd_common_image_upload'),
  );
  $items['customer-cart/remove_line_item'] = array(
    'title' => 'Remove Line item',
    'description' => 'Remove Line item',
    'page callback' => 'bbd_common_remove_line_item',
    /* 'page arguments' => array(1), */
    /* 'delivery  callback' => 'drupal_json_output', */
    'access arguments' => array('bbd_cart_remove_line_item'),
  );
  $items['customer-cart'] = array(
    'title' => 'My Shopping Cart',
    'page callback' => 'bbd_common_custom_cart_data',
    'page arguments' => array(1, 0),
    'access callback' => TRUE,
    'type ' => MENU_CALLBACK,
  );
  $items['admin/management/delivery/import'] = array(
    'title' => 'Import Revised Delivery dates',
    'description' => 'Import Revised Delivery dates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbd_common_import_delivery_dates_form'),
    'access arguments' => array('bbd_common_image_upload'),
  );
  $items['admin/catalog/dump'] = array(
    'title' => 'Catalogs',
    'description' => 'Last 3 Catalogs',
    'page callback' => 'show_catalogs',
    'access callback' => 'check_if_fr_role_user_admin',
    'file' => 'bbd_common.inc',
    'file path' => drupal_get_path('module', 'bbd_common'),
  );
  $items['admin/device-statistics-configuration'] = array(
    'title' => 'Device Statistics Configuraton',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('device_statistics_config_form'),
    'access callback' => 'check_if_fr_role_user_admin',
    'file' => 'bbd_common.inc',
    'file path' => drupal_get_path('module', 'bbd_common'),
  );
  ################ content validation #################
  $items['admin/content-validation-report'] = array(
    'title' => 'Content Validation Report',
    'page callback' => 'content_validation_report',
    'access callback' => 'check_if_fr_role_user_admin',
  );
  $items['admin/content-validation-report/export'] = array(
    'title' => 'Content Validation Report',
    'page callback' => 'content_validation_report',
    'access callback' => 'check_if_fr_role_user_admin',
  );

  ######### Hardik & Vikee ############
  ########### variable set For,  From and To for Email Trigger if inventory is negative and address is not attached to order ###############
  $items['admin/config/order-email-trigger'] = array(
    'title' => 'Order Email Trigger',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_email_configuration_form'),
    'access callback' => 'check_if_fr_role_user_admin',
  );
################ END ############################
  return $items;
}

######### Hardik & Vikee ############ 

function order_email_configuration_form($form, $form_state) {

  $form['from_email_id'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#default_value' => variable_get('from_email_id', ''),
    '#required' => TRUE,
  );
  $form['to_email_id'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#default_value' => variable_get('to_email_id', ''),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

################ END ############################

function content_validation_report() {
  $form = drupal_get_form('content_dropdown');
  $out = drupal_render($form);

  if (arg(2) != 'export') {
    $query = db_select('commerce_product', 'a')->extend('PagerDefault')->limit(10);
  }
  else {
    $query = db_select('commerce_product', 'a');
  }
  $query->leftjoin('field_data_field_transit_worthy', 'c', 'a.product_id=c.entity_id');
  $query->leftjoin('field_data_field_packing_improvement', 'd', 'a.product_id=d.entity_id');
  $query->leftjoin('field_data_field_package_cost', 'e', 'a.product_id=e.entity_id');
  $query->leftjoin('field_data_field_freight_approval', 'f', 'a.product_id=f.entity_id');
  $query->leftjoin('field_data_field_package_approval', 'g', 'a.product_id=g.entity_id');
  $query->leftjoin('field_data_field_freight_amount', 'h', 'a.product_id=h.entity_id');
  $query->leftjoin('field_data_field_package_type', 'i', 'a.product_id=i.entity_id');
  $query->leftjoin('taxonomy_term_data', 'ttd', 'i.field_package_type_tid = ttd.tid');
  $query->leftjoin('field_data_field_product_reference', 'j', 'a.product_id = j.field_product_reference_product_id');
  $query->leftjoin('field_data_field_product_master_category', 'k', 'j.entity_id = k.entity_id');
  $query->leftjoin('taxonomy_term_data', 'ttmc', 'k.field_product_master_category_tid = ttmc.tid');
  $query->leftjoin('field_data_field_product_short_description', 'm', 'a.product_id = m.entity_id');
  $query->leftjoin('field_data_field_product_mrp', 'n', 'a.product_id = n.entity_id');
  $query->leftjoin('field_data_field_franchise_comission', 'o', 'a.product_id = o.entity_id');
  $query->leftjoin('field_data_commerce_price', 'p', 'a.product_id = p.entity_id');
  $query->leftjoin('field_data_field_product_images', 'pi', 'a.product_id = pi.entity_id');
  //$query->leftjoin('file_managed', 'fm', 'pi.field_product_images_fid = fm.fid');
  if (isset($_GET['filter'])) {
    $query->isNull($_GET['filter']); //, '%' . '' . '%', 'LIKE');
  }
  $query->groupBy('a.product_id');
  $query->fields('a', array('sku'));
  $query->fields('c', array('field_transit_worthy_value'));
  $query->fields('d', array('field_packing_improvement_value'));
  $query->fields('e', array('field_package_cost_amount'));
  $query->fields('f', array('field_freight_approval_value'));
  $query->fields('g', array('field_package_approval_value'));
  $query->fields('h', array('field_freight_amount_amount'));
  $query->fields('m', array('field_product_short_description_value'));
  $query->addField('ttd', 'name', 'package_type');
  $query->addExpression('(p.commerce_price_amount/100)', 'selling price');
  $query->addExpression('(n.field_product_mrp_amount/100)', 'mrp');
  $query->addExpression('(o.field_franchise_comission_amount/100)', 'commission');
  $query->addExpression('GROUP_CONCAT(pi.field_product_images_fid)', 'Image');
  $query->addField('ttmc', 'name', 'mc_category');

  if (isset($_GET['filter'])) {
    $result = $query->execute()->fetchAll();
  }
  $rows = array();
  foreach ($result as $res) {
    $rows[] = array($res->sku,
      $res->field_transit_worthy_value,
      $res->field_packing_improvement_value,
      $res->field_package_cost_amount,
      $res->field_freight_approval_value,
      $res->field_package_approval_value,
      $res->field_freight_amount_amount,
      $res->field_product_short_description_value,
      $res->package_type,
      $res->mc_category,
      $res->sellingprice,
      $res->mrp,
      $res->commission,
      $res->Image,
    );
  }
  $header = array('Sku', 'Transit worthy', 'Packaging improvement', 'Packaging Cost', 'Freight Approval', 'Package Approval', 'Freight Amount', 'Description', 'Package Type', 'MC Category', 'Selling Price', 'MRP', 'Commision', 'Image');

  $out .= theme('table', array('header' => $header, 'rows' => $rows));
  $out .= theme('pager');


  if (arg(2) == 'export') {
    export_to_csv_validation($rows, 'validation report.csv', $header);
  }
  unset($_GET['q']);
  $out .= l(t('CSV'), 'admin/content-validation-report/export', array('query' => array($_GET)));
  return $out;
}

function content_dropdown($form, &$form_state) {
  $prod_fields = array('field_product_mrp_amount' => 'MRP', 'commerce_price_amount' => 'Selling Price', 'field_franchise_comission_amount' => 'Franchisee Commission', 'ttmc.name' => 'MC Category', 'pi.field_product_images_fid' => 'Image', 'field_transit_worthy_value' => 'Transit Worthy', 'field_packing_improvement_value' => 'Packing Improvement', 'field_package_approval_value' => 'Package Approval', 'ttd.name' => 'Package Type', 'field_package_cost_amount' => 'Package Cost', 'field_freight_amount_amount' => 'Freight Amount', 'field_freight_approval_value' => 'Freight Approval');
  $form ['product_fields'] = array(
    '#title' => t('Product fields'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => $prod_fields,
    '#default_value' => isset($_GET['filter']) ? $_GET['filter'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );
  return $form;
}

function content_dropdown_submit($form, &$form_state) {
  $search_string = array();
  $search_string['filter'] = $form_state['input']['product_fields'];
  drupal_goto($_GET['q'], array('query' => $search_string));
}

/* to export csv */

function export_to_csv_validation($row_array, $filename, $column_titles) {

  drupal_add_http_header('Content-Type', 'text/csv; charset=utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $filename);
  $fp = fopen('php://output', 'w');
  fputcsv($fp, $column_titles);
  foreach ($row_array as $line) {
    fputcsv($fp, $line);
  }
  fclose($fp);
  drupal_exit();
}

######### content validation #############

function bbd_common_get_custom_add_to_cart($form, &$form_state, $sku) {
  $quantity = 1;
  $message = bbd_common_check_inventory($sku, $quantity);

  if ($message != 'out_of_stock') {
    $form['custom_add_to_cart'] = array(
      '#type' => 'submit',
      '#value' => t('Add to cart')
    );
    $form['sku'] = array(
      '#type' => 'hidden',
      '#value' => $sku
    );
  }
  else {
    $form['out_of_stock'] = array(
      '#type' => 'submit',
      '#value' => t('Out Of Stock'),
      '#disabled' => TRUE
    );
  }
  return $form;
}

/**
 * submit handler of custom add to cart form 
 * 
 */
function bbd_common_get_custom_add_to_cart_submit($form, &$form_state) {
  $channel = bbd_common_get_channel();
  $sku = $form_state['values']['sku'];
  $franchisee_code = $_SESSION[$channel]['franchisee_code'];
  $pincode = $_SESSION[$channel]['pin_code'];
  $franchisee_uid = $_SESSION[$channel]['userID'];

  if (isset($_SESSION[$channel]['order_id'])) {
    $order_id = $_SESSION[$channel]['order_id'];
    $order_old = commerce_order_load($order_id);
  }
  else {
    $order_id = 0;
  }
  $i = 0;
  $order_data['order_id'] = $order_id;
  if (!empty($order_old)) {
    foreach ($order_old->commerce_line_items[LANGUAGE_NONE] as $val) {
      $line_item = commerce_line_item_load($val['line_item_id']);
      if ($line_item->type == 'product') {
        $order_data['products'][$i]['SKU'] = $line_item->line_item_label;
        $order_data['products'][$i]['quantity'] = $line_item->quantity;
        $i++;
      }
    }
  }
  $order_data['products'][$i]['SKU'] = $sku;
  $order_data['products'][$i]['quantity'] = 1;
  foreach ($order_data['products'] as $orderkey => $orderval) {
    $category[] = get_category_from_sku($orderval['SKU']);
  }
  $category = array_unique($category);
  $countcategories = array_count_values($category);
  if (count($countcategories) > 1 && array_key_exists("Food", $countcategories)) {
    form_set_error('', t("You cannot have food items and other category items in one cart."));
  }
  else {
    $_SESSION[$channel]['order_data'] = $order_data;
    $order = android_services_order_create_new($franchisee_code, $franchisee_uid, $order_data, $pincode, 1);

    $error = NULL;
    if ((isset($order->error) && !empty($order->error)) || isset($order->non_serviceable) || isset($order->out_of_stock) || isset($order->messages) || isset($order->invalid_sku)) {
      if (!empty($order->error)) {
        $error = $order->error;
      }
      if (!empty($order->non_serviceable)) {
        $error = "Product with SKU-" . $order->non_serviceable[0]['SKU'] . " is not servicable";
      }
      if (!empty($order->out_of_stock)) {
        $error = "This Product is out of stock";
      }
      if (!empty($order->invalid_sku)) {
        $error = "Invalid SKU";
      }

      if ($error) {
        form_set_error('', t($error));
      }
    }

    if (!empty($order) && !isset($error)) {
      $order->field_order_placed_using[LANGUAGE_NONE][]['value'] = "Phone Commerce";
      commerce_order_save($order);

      $_SESSION[$channel]['order_id'] = $order->order_id;
//unset($_SESSION[$channel]);
      $product = commerce_product_load_by_sku($sku);
      drupal_set_message(t('%title added to <a href="!cart-url/' . $order->order_id . '">your cart</a>.', array('%title' => $product->title, '!cart-url' => url('customer-cart'))));
    }
  }
}

function bbd_common_forms($form_id, $args) {
  if (strpos($form_id, 'bbd_common_get_custom_add_to_cart') !== FALSE) {
    $forms[$form_id] = array(
      'callback' => 'bbd_common_get_custom_add_to_cart',
    );
    return $forms;
  }
}

/**
 * 
 * returns Channel from user role Website / Phone commerce
 */
function bbd_common_get_channel() {
  global $user;
  $role = 'Customer Support';
  if (in_array($role, $user->roles)) {
    $channel = 'phone_commerce_variables';
  }
  else {
    $channel = 'website_variables';
  }
  return $channel;
}

/**
 * Remove Line Item Id
 * 
 */
function bbd_common_remove_line_item($line_item_id) {
  $channel = bbd_common_get_channel();
  if (isset($_GET['sku']) && $_GET['sku'] == 'all') {
    unset($_SESSION[$channel]['order_data']['products']);
    return array('message' => 'Cart is empty');
  }

  $products = $_SESSION[$channel]['order_data']['products'];
  foreach ($products as $product) {
    $product_array[] = $product['SKU'];
  }
  $product_array = array_unique($product_array);
  $duplicate_exist = 0;
  if (count($product_array) != count($_SESSION[$channel]['order_data']['products'])) {
    $duplicate_exist = 1;
  }

  if (isset($_GET['item'])) {
    if ($_SESSION[$channel]['order_data']) {
      foreach ($_SESSION[$channel]['order_data']['products'] as $key => $product) {
        $check_line_item = 1;
        if ($duplicate_exist) {
          if ($product['line_item_id'] != $_GET['item']) {
            $check_line_item = 0;
          }
        }
        if ($product['SKU'] == $_GET['sku'] && $check_line_item) {
          if (isset($_GET['qty'])) {
            $commerce_product = commerce_product_load_by_sku($_GET['sku']);
            $_GET['qty'] = bbd_web_return_qty_using_min_max_validation($commerce_product, $_GET['qty']);
            $_SESSION[$channel]['order_data']['products'][$key]['quantity'] = $_GET['qty'];
          }
          else {
            if (count($_SESSION[$channel]['order_data']['products'] < 2)) {
              commerce_line_item_delete($_GET['item']);
            }
            unset($_SESSION[$channel]['order_data']['products'][$key]);
          }
        }
      }
    }

    if (isset($_SESSION[$channel]['order_id'])) {
      $order = commerce_order_load($_SESSION[$channel]['order_id']);
    }

    if ($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] < 50000) {
      bbd_order_refund_shipping_line_item_attache($order, 'bbd_shipping');
    }
    return array('message' => 'line_item_deleted');
  }
}

/* * *
 * 
 * call back for custom cart page
 */

function bbd_common_custom_cart_data($order_id, $page_name) {
  $output = '';
  $output .= drupal_render(drupal_get_form('bbd_common_get_custom_cart_form', $page_name));
  return $output;
}

function get_numbers_list() {
  $i = 0;
  $ar = array();
  while ($i != 10) {
    $i++;
    $ar[$i] = $i;
  }
  return $ar;
}

/**
 * Implements form for custom cart operations
 * 
 */
function bbd_common_get_custom_cart_form($form, &$form_state, $page_name) {
  global $custom_theme, $theme, $user;
  $user = user_load($user->uid);
  if (!empty($user->theme)) {
    $current_theme = $user->theme;
  }
  elseif (!empty($custom_theme)) {
    $current_theme = $custom_theme;
  }
  else {
    $current_theme = $theme ? $theme : variable_get('theme_default', 'garland');
  }
  $channel = bbd_common_get_channel();
  if (!empty($_SESSION[$channel]['message'])) {
    drupal_set_message($_SESSION[$channel]['message']);
    unset($_SESSION[$channel]['message']);
  }
  //$page_name = arg(0);
  if ($_SESSION[$channel]) {
    if (in_array(FRANCHISEE_ROLE_NAME, $user->roles)) {
      $_SESSION[$channel]['franchisee_code'] = bbd_common_get_franchisee_code_uid($user->uid);
    }
    if ($_SESSION[$channel]['mcoupon']) {
      $mcoupon = $_SESSION[$channel]['mcoupon'];
    }
    else {
      $mcoupon = NULL;
    }
    if (!$user->uid) {
      if ($_SESSION['website_variables']['mcoupon_mobile']) {
        $mcoupon_mobile = $_SESSION['website_variables']['mcoupon_mobile'];
      }
      else {
        $mcoupon_mobile = NULL;
      }
    }
    else {
      $mcoupon_mobile = $user->field_phone_number[LANGUAGE_NONE][0]['value'];
    }
    $franchisee_code = $_SESSION[$channel]['franchisee_code'] ? $_SESSION[$channel]['franchisee_code'] : NULL;
    $order_data = $_SESSION[$channel]['order_data'];

####Pincode attach in case not attached till checkout (from profile)
    if ($page_name == 'customer-checkout' && empty($_SESSION[$channel]['pin_code'])) {
      global $user;
      $order_id = arg(1);
      $query = db_select('field_data_commerce_customer_shipping', 'b');
      $query->fields('b', array('commerce_customer_shipping_profile_id'));
      $query->condition('b.entity_type', 'commerce_order');
      $query->condition('b.bundle', 'commerce_order');
      $query->condition('b.entity_id', $order_id);
      $profile_id = $query->execute()->fetchField();
      $profile = commerce_customer_profile_load($profile_id);
      $pin_code = $profile->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'];
      $_SESSION[$channel]['pin_code'] = $pin_code;
    }
    $pincode = $_SESSION[$channel]['pin_code'] ? $_SESSION[$channel]['pin_code'] : NULL;


    ################ Vikee & Hardik ########################
    ################ Assign franchisee's pincode for anonymous user to check the stock availability ######## 
    if (empty($_SESSION[$channel]['pin_code'])) {
      $franchisee_entity_id = db_query("SELECT entity_id  FROM field_data_field_franchisee_code where field_franchisee_code_value = $franchisee_code")->fetchField();
      $pincode = db_query("SELECT field_user_billing_address_postal_code  FROM field_data_field_user_billing_address where entity_id = $franchisee_entity_id")->fetchField();
    }

    ############### END ################################################
    $franchisee_uid = $_SESSION[$channel]['userID'] ? $_SESSION[$channel]['userID'] : NULL;
    if (isset($_SESSION[$channel]['channel_mode'])) {
      $channel_mode = $_SESSION[$channel]['channel_mode'];
    }
    else {
      $channel_mode = 3;
    }
    ######abhishek FGSF
    $fg_loyalty_card_earn = NULL;
    if ($_SESSION[$channel]['order_id']) {
      $fg_loyalty_card_earn = get_fgsf_cardno_using_order_id($_SESSION[$channel]['order_id']);
    }

    $order = android_services_order_create_new($franchisee_code, $franchisee_uid, $order_data, $pincode, $channel_mode, NULL, $mcoupon, $mcoupon_mobile, $fg_loyalty_card_earn); // 3 For Website created Orders  
###check for out of stock / Non serviceable product if exists pass null pincode
    if ((isset($order->error) && !empty($order->error)) || (isset($order->non_serviceable) && !empty($order->non_serviceable)) || (isset($order->out_of_stock) && !empty($order->out_of_stock))) {
      $non_serviceable_sku = array();
      $out_of_stock_sku = array();
      if (isset($order->error)) {
        drupal_set_message(check_plain($order->error), "error");
      }
      if (!empty($order->non_serviceable)) {
        foreach ($order->non_serviceable as $non_serviceable_value) {
          $non_serviceable_sku[] = $non_serviceable_value['SKU'];
//drupal_set_message(check_plain($non_serviceable_value['SKU'] . ' is not serviceable at your Pincode') . '<br/>');
        }
      }
      if (!empty($order->out_of_stock)) {
        foreach ($order->out_of_stock as $out_of_stock_value) {
          $out_of_stock_sku[] = $out_of_stock_value['SKU'];
//drupal_set_message(check_plain($out_of_stock_value['SKU'] . ' is not in stock at your Pincode') . '<br/>');
        }
      }
      if (empty($order->out_of_stock) && empty($order->non_serviceable[0])) {
        foreach ($_SESSION[$channel]['order_data']['products'] as $sess_product) {
          $error_products[] = $sess_product['SKU'];
        }
      }
      ######abhishek FGSF
//      if (!empty($order->fgsf_limit_error)) {
//        $fgsf_unset_order = commerce_order_load($_SESSION[$channel]['order_id']);
//        unset($fgsf_unset_order->field_fg_loyalty_card['und']);
//        commerce_order_save($fgsf_unset_order);
//        drupal_set_message($order->error,"error");
//      }

      $order = android_services_order_create_new($franchisee_code, $franchisee_uid, $order_data, NULL, 3, NULL, $mcoupon, $mcoupon_mobile, $page_name); // 3 For Website created Orders
###use this variable for checkout review page to stop submitting form
      $error = 1;
      if (!isset($error_products)) {
        $error_products = array_merge($out_of_stock_sku, $non_serviceable_sku);
      }
    }
##set order status as pending
    $order->status = 'pending';

    if (!empty($order->order_id)) {
      $_SESSION[$channel]['order_data']['order_id'] = $order->order_id;
      $_SESSION[$channel]['order_id'] = $order->order_id;
    }
    if ($page_name == 'customer-cart') {
      $quantity = $_SESSION[$channel]['order_data']['products'] ? count($_SESSION[$channel]['order_data']['products']) : 0;
      $items = ($quantity > 1) ? 'Items' : 'Item';
      if (!$quantity) {
        drupal_set_title(t('<div class="cart-title">My Shopping Cart / <span class="cart-item">' . $quantity . ' ' . $items . '</span></div>'), PASS_THROUGH);
      }
      else {
        drupal_set_title(t('<div class="cart-title">My Shopping Cart / <span class="cart-item">' . $quantity . ' ' . $items . '</span>' . '<a id="remove-all-item" href="#" sku = "all"><input type="button" class="form-submit" value="Remove All" name="remove_all"/></a>' . '</div>'), PASS_THROUGH);
      }
    }
    else {
      drupal_set_title(t('<div class="cart-title">Review your order</div>'), PASS_THROUGH);
    }
  }

  if ($current_theme == 'bbdmobile') {
    $header = array(
//'spacer1' => array('data' => '', 'class' => 'h_spacer'),
      'Product Details' => array('data' => 'Product Details', 'class' => 'title_c'),
      //'Quantity' => array('data' => 'Quantity', 'class' => 'qty_c'),
//'Price' => array('data' => 'Price', 'class' => 'total_c'),
      'spacer2' => array('data' => '', 'class' => 'h_spacer'),
    );
  }
  else {
    $header = array(
      'spacer1' => array('data' => '', 'class' => 'h_spacer'),
      'Product Details' => array('data' => 'Product Details', 'class' => 'title_c'),
      'Quantity' => array('data' => 'Quantity', 'class' => 'qty_c'),
      //'Delivery Detail' => array('data' => 'Delivery Detail', 'class' => 'delivery_c'),
      'Price' => array('data' => 'Price', 'class' => 'total_c'),
      'spacer2' => array('data' => '', 'class' => 'h_spacer'),
    );
  }

  $array = array();
  $date_range_map = array();
  foreach ($order->commerce_line_items[LANGUAGE_NONE] as $key => $val) {

    $dates = android_services_get_customer_delivery_date_from_line_item_id($val['line_item_id']);

    $line_item_type = db_query('SELECT type FROM {commerce_line_item} WHERE line_item_id = :line_item_id', array(':line_item_id' => $val['line_item_id']))->fetchField();

    if ($line_item_type == 'product') {
      $array[$dates['timestamp']][] = $val['line_item_id'];
      $date_range_map[$dates['timestamp']] = $dates['date_range'];
    }
  }

//Sort the array
  ksort($array);

  $form['#prefix'] = '<div id="form-replace">';
  $form['#suffix'] = '</div>';

  if ($page_name == 'customer-checkout') {
    $profile = commerce_customer_profile_load($order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id']);
    $billing_profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
    #### start of oxigen wallet display dob on delivery address#######
    if (!empty($profile->field_oxi_customer_dob[LANGUAGE_NONE][0]['value'])) {
      $customer_dob = "<b>DOB :</b>" . Date("d-m-Y", $profile->field_oxi_customer_dob[LANGUAGE_NONE][0]['value']);
    }
    ############# Db check to see if Oxigen wallet exists or not -> start ###############
    $partner_name = variable_get('oxi_partner_name', '');
    $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code'], $partner_name);
    if ($agent_id && function_exists('get_wallet_api_response') && !user_is_anonymous() && !isset($_SESSION['resend_otp_bypass'])) {
      $order_id = arg(1);
      $mobile_num = $billing_profile->field_phone_number[LANGUAGE_NONE][0]['value'];
      if (function_exists('get_oxigen_wallet_details_using_mobile_number')) {
        $res = get_oxigen_wallet_details_using_mobile_number($mobile_num);
      }
      if ($res) {
        //That means customer oxigen wallet exists and we have its record!
        $bbd_cb_wallet_flag = $res['bbd_cb_wallet_flag'];
        if (!$bbd_cb_wallet_flag) {
          //That means customer oxigen wallet exists but customer cb wallet doesn't!
          $wallet_owner = 'BBCashBackWallet';
        }
      }
      else {
        //Now we check if customer oxigen wallet exists using oxigen api
        ############# API call to check Oxigen wallet exisits or not-> start#################
        ############# author : Manish #######################################################
        $data = array();
        $data['Transid'] = $order_id;
        $data['Requestdate'] = Date("YmdHis", REQUEST_TIME);
        $data['Mobile'] = '91' . $mobile_num; //Mobile number shud start with 91. Refer oxigen api
        $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code']);
        $data['RetailerMDN'] = $agent_id;
        $response = get_wallet_api_response('oxigen_get_wallet_details', $data);
        $response_data = (array) $response->output;
        ############# API call to check Oxigen wallet exisits or not -> ends#################
        if ($response->status == TRUE) {
          if ($response_data) {
            $wallet_count = $response_data['WalletCount'];
            $wallet_response = array();
            switch ($wallet_count) {
              //No wallet exist for customer
              case 0: {
                  $wallet_owner = 'OxigenWallet';
                  break;
                }
              //Only oxigen wallet exist for customer
              case 1: {
                  $wallet_owner = 'BBCashBackWallet';
                  break;
                }
//                //Both oxigen wallet & customer cb oxi wallet exist
              //This case will never occur but is still written to be on safer side! #cheers
              case 2: {
                  $wallet_response['oxi_wallet_flag'] = 1;
                  $wallet_response['bbd_cb_wallet_flag'] = 1;
                  $wallet_response['cashback_wallet_id'] = $response_data['BigBazaarCashBackEwalletId'];
                  $wallet_response['billing_profile_id'] = $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'];
                  bbd_oxigen_insert_record_to_oxigen_wallet_holders($mobile_num, $wallet_response);
                  break;
                }
            }
          }
        }
      }
      if ($wallet_owner) {
        ################# API call to generate otp in order to create oxigen wallet for customer -> start #####################
        ############# author : Manish #######################################################
        $data = array();
        $data['Transid'] = $order_id;
        $data['Requestdate'] = Date("YmdHis", REQUEST_TIME);
        //Append 91 in front of mob_num. Refer oxigen api
        $data['Mobile'] = '91' . $mobile_num;
        $data['WalletOwner'] = $wallet_owner;
        $data['OTPType'] = 1;
        $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code']);
        $data['RetailerMDN'] = $agent_id;
        $response = get_wallet_api_response('oxigen_get_otp_to_create_wallet', $data);
        ################# API call to generate otp inorder to create oxigen wallet for customer -> end #####################
        if ($response->status == TRUE) {
          $response_data = (array) $response->output;
          if ($response_data['ResponseCode'] == 0) {
            /* Set session variable to bypass generating otp on page loads ->start */
            $_SESSION['resend_otp_bypass'] = TRUE;
            /* Set session variable to bypass generating otp on page loads ->end */

            /* Enable the otp checkbox and apply button -> start */
            $otp_checkbox_access = TRUE;
            /* Enable the otp checkbox and apply button -> end */

            /* Set session variable for walletowner -> start */
            $_SESSION[$channel]['wallet_owner'] = $wallet_owner;
            /* Set session variable for walletowner -> end */
          }
        }
      }
    }
    #### end of oxigen wallet display dob on delivery address#######
    $form['delivery_address'] = array(
      '#markup' => '<div class="d-address" style="margin:0 0 20px;">
   <h1 style="border-bottom: 2px solid #ccc; font-size: 17px; line-height: 17px; margin: 0 0 10px; padding-bottom: 7px;">Delivery Address</h1>
   <p class="d-add1" style="margin-bottom: 0;"><b>' . $profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'] . '</b></p>
   <p class="d-add2" style="margin-bottom:15px;">' . $profile->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'] .
      ', ' . $profile->commerce_customer_address[LANGUAGE_NONE][0]['locality'] .
      ', ' . $profile->commerce_customer_address[LANGUAGE_NONE][0]['administrative_area'] . '</p>
   <div class="d-add3"><b>Mobile Number :</b> ' . $profile->field_phone_number[LANGUAGE_NONE][0]['value'] . '</div>
   <div class="d-add4"><b>Email ID :</b> ' . $profile->field_neft_customer_email[LANGUAGE_NONE][0]['value'] . '</div>
   <div class="d-add4"> ' . $customer_dob . '</div>' .
      ###Adding Bottom Border###
      ###RDM####   
      '<div style="border-bottom: 2px solid #ccc; font-size: 17px; line-height: 17px; margin: 0 0 10px; padding-bottom: 7px;" class="d-add5"><b>Pincode :</b> ' . $profile->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'] . '</div>
</div>'
    );

    #####RDM#######
    if (!$otp_checkbox_access) {
      if (isset($_SESSION['resend_otp_bypass'])) {
        $otp_checkbox_access = TRUE;
      }
    }
    if ($wallet_owner = $_SESSION[$channel]['wallet_owner']) {
      if ($wallet_owner == 'OxigenWallet') {
        $otp_oxigen_msg = 'Enter OTP received on your registered Mobile No. to create Oxigen and Bigbazaar cash back wallet.';
      }
      elseif ($wallet_owner == 'BBCashBackWallet') {
        $otp_oxigen_msg = 'Enter OTP received on your registered Mobile No. to create Bigbazaar cash back wallet.';
      }
    }
    $form['otp_oxigen'] = array(
      '#type' => 'textfield',
      '#size' => 10,
      '#title' => t($otp_oxigen_msg),
      '#attributes' => array('placeholder' => t('Enter OTP')),
      '#access' => isset($otp_checkbox_access) ? $otp_checkbox_access : FALSE,
        //'#markup' => '<div style="border-bottom: 2px solid #ccc; font-size: 17px; line-height: 17px; margin: 0 0 10px; padding-bottom: 7px;" class="bottom-border-otp-field">'
    );
    $form['resend_otp'] = array(
      '#type' => 'submit',
      '#value' => t('Resend Otp'),
      '#prefix' => '<div id="resend-otp">',
      '#suffix' => '</div>',
      '#ajax' => array(
        'callback' => array('resend_otp_ajax'),
        'wrapper' => array('form-replace'),
      ),
      '#access' => isset($otp_checkbox_access) ? $otp_checkbox_access : FALSE,
      '#submit' => array('resend_otp_submit'),
    );
    global $base_url;
    $path_to_tnc = $base_url . '/content/terms-and-conditions';
    $form['terms_and_conditions'] = array(
      '#type' => 'markup',
      '#markup' => "<a href=$path_to_tnc target='_blank'>Terms & Conditions</a>",
      '#access' => isset($otp_checkbox_access) ? $otp_checkbox_access : FALSE,
    );
    $all = array(0 => 'All');
    $options = $all + $date_range_map;
    $form['delivery_date_filter'] = array(
      '#type' => 'select',
      '#title' => t('Filter items by delivery date'),
      '#options' => $options,
      '#prefix' => '<div class = "filter-div"><span>Items by Recent Delivery Dates</span>',
      '#suffix' => '</div>'
    );
  }

  $form['cart_line_items'] = array(
    '#prefix' => '<div class="shopping-cart-outer"><div id="cart_line_items">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
  );
  $order_id = $order->order_id;
  if (empty($order->commerce_line_items)) {
    global $base_url;
    $form = array();
    $form['refine-search'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="empty-cart"><h2 class="empty-cart-message"> There are no items in your shopping cart</h2><a class="shopping-button" href="' . $base_url . '">Continue Shopping</a></div>',
    );
    return $form;
  }
  $line_total = $order_total_val = $line_mrp = $line_bachat = $shipping_charge = $line_item_total = $exchange_bachat = $increment = 0;
  $bundle_skus = array();

  foreach ($array as $date => $val) {
    foreach ($val as $key => $lid) {
//foreach ($order->commerce_line_items[LANGUAGE_NONE] as $key => $val) {
//$commerce_line_item = commerce_line_item_load($val['line_item_id']);
      $commerce_line_item = commerce_line_item_load($lid);
      if ($commerce_line_item->type == 'product') {

        if (isset($_SESSION[$channel])) {
### check for bundle product (2)
          if ($commerce_line_item->field_product_type_lineitem[LANGUAGE_NONE][0]['value'] == 1) {
            $session[$increment]['SKU'] = $commerce_line_item->line_item_label;
            $session[$increment]['quantity'] = $commerce_line_item->quantity;
            $session[$increment]['line_item_id'] = $commerce_line_item->line_item_id;
            if (isset($commerce_line_item->field_kit_description[LANGUAGE_NONE][0]['value'])) {
              $session[$increment]['remarks'] = $commerce_line_item->field_kit_description[LANGUAGE_NONE][0]['value'];
            }
//dsm($session);
            $increment++;
            $is_bundle = 0;
          }
          elseif ($commerce_line_item->field_product_type_lineitem[LANGUAGE_NONE][0]['value'] == 2) {
            if (!in_array($commerce_line_item->field_bundle_id[LANGUAGE_NONE][0]['value'], $bundle_skus)) {
              $bundle_sku = $commerce_line_item->field_bundle_id[LANGUAGE_NONE][0]['value'];
              $bundle_skus[] = $bundle_sku;
              $bundle_product = commerce_product_load_by_sku($bundle_sku);
              foreach ($bundle_product->field_bundle_products[LANGUAGE_NONE] as $bundle_child) {
                $bundle_child_product = commerce_line_item_load($bundle_child['line_item_id']);
                if ($bundle_child_product->line_item_label == $commerce_line_item->line_item_label) {
                  $bundle_qty = $commerce_line_item->quantity / $bundle_child_product->quantity;
                }
              }
              $session[$increment]['SKU'] = $bundle_sku;
              $session[$increment]['quantity'] = $bundle_qty;
              $session[$increment]['line_item_id'] = $bundle_sku;
              if (isset($commerce_line_item->field_kit_description[LANGUAGE_NONE][0]['value'])) {
                $session[$increment]['remarks'] = $commerce_line_item->field_kit_description[LANGUAGE_NONE][0]['value'];
              }
              $increment++;
              $is_bundle = 1;
            }
            else {
              continue;
            }
          }
        }

        if ($is_bundle) {
          $productdetail = $bundle_product;
          $actual_price_val = $productdetail->commerce_price[LANGUAGE_NONE][0]['amount'] / 100;
        }
        else {
          $productdetail = commerce_product_load_by_sku($commerce_line_item->line_item_label);
          $actual_price_val = $commerce_line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] / 100;
        }

        $order_total_val += $order_total_val;
        $product_id = $productdetail->product_id;
        $product_title = $productdetail->title . '-' . $productdetail->sku;
        $product_actual_price = ($productdetail->commerce_price[LANGUAGE_NONE][0]['amount'] / 100) . " Rs.";

        $nid = bbd_common_get_nid_from_pid($product_id);
        $nodeobj = bbd_performance_get_flat_table_data_from_nid($nid, $product_id);
        if (empty($nodeobj)) {
          $nodeobj = bbd_category_nid_mini_load($nid);
        }
        $promo_ids = bbd_promotions_get_promo_id_from_node_object($nodeobj);
        $order_total_val = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100;
        $marked_price_val = $productdetail->field_product_mrp[LANGUAGE_NONE][0]['amount'] / 100;
        $bachat = $marked_price_val - $actual_price_val;
        $promo_price = $actual_price_val . " Rs.";

        $token = drupal_get_token();
        $promo_desc = 'NA';
        if (isset($commerce_line_item->field_neft_bank_address[LANGUAGE_NONE][0])) {
          $promotion = array_keys(unserialize($commerce_line_item->field_neft_bank_address[LANGUAGE_NONE][0]['value']));
          if ($promotion) {
            $promo_desc = bbd_common_get_promo_description_from_promo_id($promotion[0]);
          }
        }
        $wishlist = '';
        if ($user->uid) {
          $wishlist = '<div class="add-to-wishlist"><li class="add-w">'
              . '<a id ="add-to-wish-list" '
              . 'nid="' . $nid . '" '
              . 'token="' . $token . '" ';
          if ($is_bundle) {
            $wishlist .= 'sku="' . $bundle_sku . '" sku_item="' . $bundle_sku . '"';
          }
          else {
            $wishlist .= 'sku="' . $commerce_line_item->line_item_label . '" sku_item="' . $commerce_line_item->line_item_id . '"';
          }
          $wishlist .= 'product_id="' . $product_id . '" '
              . 'uid="' . $user->uid . '"'
              . 'href="#">Add to wishlist</a>'
              . '</li></div>';
        }


//        $wishlist = '';
//        if ($user->uid) {
//          $wishlist = '<div class="add-to-wishlist"><li class="add-w">'
//              . '<a id ="add-to-wish-list" '
//              . 'nid="' . $nid . '" '
//              . 'token="' . $token . '" ';
//          if ($is_bundle) {
//            $wishlist .= 'sku="' . $bundle_sku . '" sku_item="' . $bundle_sku . '"';
//          }
//          else {
//            $wishlist .= 'sku="' . $commerce_line_item->line_item_label . '" sku_item="' . $commerce_line_item->line_item_id . '"';
//          }
//          $wishlist .= 'product_id="' . $product_id . '" '
//              . 'uid="' . $user->uid . '"'
//              . 'href="#">Add to wishlist</a>'
//              . '</li></div>';
//        }

        $fid = $productdetail->field_product_images[LANGUAGE_NONE][0]['fid'];
        $file = file_load($fid);
        $uriprod = $file->uri;
        $imageprod = image_style_url('cart_page_product_image', $uriprod);

        /* $imageprod = theme('image_style', array('style_name' => 'cart_page_product_image',
          'path' => $uriprod,
          'getsize' => TRUE,
          'alt' => 'No image',
          'title' => '')
          ); */

        $color = $size = '';
        if (!empty($productdetail->field_config_colors[LANGUAGE_NONE])) {
          $color_tid_name = bbd_common_get_term_name_from_tid($productdetail->field_config_colors[LANGUAGE_NONE][0]['tid']);
          if (!empty($color_tid_name)) {
            $color = '<div class="subdiv-color">Color - ' . $color_tid_name . '</div>';
          }
        }
        if (!empty($productdetail->field_config_sizes[LANGUAGE_NONE])) {
          $size_tid_name = bbd_common_get_term_name_from_tid($productdetail->field_config_sizes[LANGUAGE_NONE][0]['tid']);
          if (!empty($size_tid_name)) {
            $size = '<div class="subdiv-size">Size : ' . $size_tid_name . '</div>';
          }
        }
        $image_mobile['#markup'] = '<div class="subdiv-image">' . l('<img src="' . $imageprod . '"/>', 'node/' . $nid, array('html' => TRUE)) . '</div>';
        $details_mobile['#markup'] = '<div><div class= "subdiv-title">' . l($product_title, 'node/' . $nid) . '</div>'
            . $wishlist
            . '<div><a  id ="remove-item" sku="';
        $image['#markup'] = '<div class="subdiv-image">' . l('<img src="' . $imageprod . '"/>', 'node/' . $nid, array('html' => TRUE)) . '</div>'
            . '<div class= "subdiv-title">' . l($product_title, 'node/' . $nid) . '</div>'
            . $wishlist
            . '<div class = "subdiv-attribute-change">' . $size . $color . '</div>'
            . '<div><a  id ="remove-item" sku="';
        if (!$is_bundle) {
          $image['#markup'] .= $commerce_line_item->line_item_label . '"sku_item="' . $commerce_line_item->line_item_id . '"';
          $details_mobile['#markup'] .= $commerce_line_item->line_item_label . '"sku_item="' . $commerce_line_item->line_item_id . '"';
        }
        else {
          $image['#markup'] .= $bundle_sku . '" sku_item="' . $bundle_sku . '"';
          $details_mobile['#markup'] .= $bundle_sku . '" sku_item="' . $bundle_sku . '"';
        }
        $image['#markup'] .= 'title="' . $product_title . '" href="#">'
            . '<input type="button" class="form-submit" value="Remove"></a></div>';
        $details_mobile['#markup'].='title="' . $product_title . '" href="#">'
            . '<input type="button" class="form-submit" value="Remove"></a></div>';
        if ($promo_desc != 'NA' && $promo_desc != '') {
          $image['#markup'] .= '<div class="promo_info"><label>Promotion : </label>' . $promo_desc . '</div>';
        }
        $title = array(
          '#markup' => $product_title,
        );
        $optqty = get_numbers_list();
        if ($is_bundle) {
//$default_qty = array_search(intval($bundle_qty), $optqty, true);
          $default_qty = (int) $bundle_qty;
          $final_qty = $bundle_qty;
        }
        else {
//$default_qty = array_search(intval($commerce_line_item->quantity), $optqty, true);
          $default_qty = (int) $commerce_line_item->quantity;
          $final_qty = $commerce_line_item->quantity;
        }
        $quantity = array(
          '#id' => 'line-item-' . $lid . '-qty',
          '#type' => 'textfield',
          '#value' => array($default_qty),
          '#attributes' => array('sku' => $commerce_line_item->line_item_label, 'sku_item' => $commerce_line_item->line_item_id, 'title' => $product_title, 'class' => array('sku_qty')),
            //'#options' => $optqty,
        );
        //Do not allow editing of quantity on Checkout page
        if ($page_name == 'customer-checkout') {
          $quantity['#attributes']['readonly'] = 'readonly';
        }
        $line_total = $commerce_line_item->commerce_total[LANGUAGE_NONE][0]['amount'] / 100;
        if ($is_bundle) {
          $quantity['#attributes'] = array('sku' => $bundle_sku, 'sku_item' => $bundle_sku, 'title' => $product_title, 'class' => array('sku_qty'));
          $line_total = $actual_price_val * $final_qty;
        }
        $quantity_mobile = $quantity;
        $details_mobile['#markup'] .='<div class="qty_c">' . render($quantity_mobile) . '</div>';
        $check = $error ? ($is_bundle ? (in_array($bundle_sku, $error_products) ? 1 : 0) : in_array($commerce_line_item->line_item_label, $error_products) ? 1 : 0) : 0;
        $line_mrp = $marked_price_val * $final_qty;
        $cur_line_bachat = $line_mrp - $line_total;
        if (display_mrp($productdetail->sku)) {
          $line_bachat += $cur_line_bachat;
        }
        if ($cur_line_bachat > 0 && display_mrp($productdetail->sku)) {
          $line_item_total = array(
            '#markup' => ' <div class="bbd-prod-price"> '
            . '<span class="cross-price"><span class="WebRupee">Rs. </span>'
            . '<span class="c-amount">' . number_format($line_mrp, 2) . ' </span></span>'
            . '<h2 class="p-price"><span class="WebRupee">Rs. </span>' . number_format($line_total, 2) . ' </h2>'
            . '<span class="save-price">Save <span class="WebRupee">Rs. </span>' . number_format($cur_line_bachat, 2) . ' </span>'
            . '</div>',
          );
        }
        else {
          $line_item_total = array(
            '#markup' => '<div class="bbd-prod-price"><h2 class="p-price">'
            . '<span class="WebRupee">Rs. </span>' . number_format($line_total, 2)
            . ' </h2></div>',
          );
        }

        $line_item_total_mobile = $line_item_total;
        $details_mobile['#markup'] .= render($line_item_total_mobile) . '</div>';
        $dynamic_shipping = dynamic_shipping_get_shipping_charge($order_id, $commerce_line_item->line_item_label);
        if (isset($dynamic_shipping) && ($dynamic_shipping != 0)) {
          $delivery = 'Rs. ' . number_format($dynamic_shipping, 2);
        }
        else {
          $delivery = 'FREE';
        }

        $form['cart_line_items'][$commerce_line_item->line_item_id] = array(
          'title' => &$title,
          'quantity' => &$quantity,
          'line_item_total' => &$line_item_total,
        );
        $class = '';
        if ($check) {
          $class = 'error-row';
          if ($is_bundle) {
            $check_sku = $bundle_sku;
          }
          else {
            $check_sku = $commerce_line_item->line_item_label;
          }
          if (!empty($out_of_stock_sku)) {
            if (in_array($check_sku, $out_of_stock_sku)) {
              $class .= ' out-of-stock';
            }
          }
          if (!empty($non_serviceable_sku)) {
            if (in_array($check_sku, $non_serviceable_sku)) {
              $class .= ' not-serviceable';
            }
          }
        }
        $class = array($class);
        if ($current_theme == 'bbdmobile') {
          $form['cart_line_items']['#rows'][] = array('data' => array(
              array('data' => &$image_mobile, 'class' => 'title_c'),
              array('data' => &$details_mobile, 'class' => 'spacer_td')),
            'id' => array($is_bundle ? $bundle_sku : $commerce_line_item->line_item_label),
            'class' => $class,
          );
        }
        else {
          if ($key == 0 && $page_name == 'customer-checkout') {
            $form['cart_line_items']['#rows'][] = array('data' => array(
                array('data' => 'Below ' . count($val) . ' items will be delivered between ' . $date_range_map[$date], 'colspan' => 5),
              ),
              'class' => array('date-range'),
              'timestamp' => $date
            );
          }

          $form['cart_line_items']['#rows'][] = array('data' => array(
              array('data' => '', 'class' => 'spacer_td'),
              array('data' => &$image, 'class' => 'title_c'),
              array('data' => &$quantity, 'class' => 'qty_c'),
              //array('data' => &$delivery, 'class' => 'delivery_c'),
              array('data' => &$line_item_total, 'class' => 'total_c'),
              array('data' => '', 'class' => 'spacer_td')),
            'id' => array($is_bundle ? $bundle_sku : $commerce_line_item->line_item_label),
            'class' => $class,
            'timestamp' => $date
          );
        }
        unset($image_mobile);
        unset($quantity_mobile);
        unset($details_mobile);
        unset($line_item_total_mobile);
        unset($title);
        unset($image);
        unset($quantity);
        unset($delivery);
        unset($remove);
        unset($line_item_total);
        unset($promo_price);
        unset($promo_desc);
        unset($product_actual_price);
      }
    }
  }
//}

  $_SESSION[$channel]['order_data']['products'] = $session;


  $shipping_charge = dynamic_shipping_get_full_shipping($order_id);
  $shipping_charge = $shipping_charge / 100;

  if ($current_theme == 'bbdmobile') {
    $bachat_div = '';
    if ($line_bachat > 0) {

      $bachat_div = '<tr>
      <td class="calculation-label"><span class="cost-label">Total Bachat:</span></td>
      <td class="calculation-data"><span class="c-amt"> Rs. ' . number_format($line_bachat, 2) . '</span></td>
    </tr>';
    }
    $mcoupon_discount = 0;
    if (!empty($_SESSION[$channel]['mcoupon']) && $order->mcoupon['status'] == 1) {
      $mcoupon_discount = $order->field_mcoupon_discount[LANGUAGE_NONE][0]['value'];
    }
    $coupon_div = '';
    if ($mcoupon_discount > 0) {

      $coupon_div = '<tr>
      <td class="calculation-label"><span class="cost-label-coupon">Coupon Code Discount:</span></td>
      <td class="calculation-data"><span class="c-amt-coupon"> Rs. ' . number_format($mcoupon_discount, 2) . '</span></td>
    </tr>';
    }


    $form['calculation'] = array(
      '#markup' => '<table class="shoppingcart-total"><tr>'
      . '<td class="calculation-label"><span class="cost-label">Total:</span></td>'
      . '<td class="calculation-data"><span class="c-amt"> Rs. ' . number_format($order_total_val - $shipping_charge + $line_bachat, 2) . '</span></td>'
      . '</tr>' . $coupon_div . '<tr>'
      . '<td class="calculation-label"><span class="cost-label">Shipping:</span></td>'
      . '<td class="calculation-data"><span class="c-amt"> Rs. ' . number_format($shipping_charge, 2) . '</span></td>'
      . '</tr>' . $bachat_div . '<tr>'
      . '<td class="total-payable-label"><span class="cost-label">Grand Total:</span></td>'
      . '<td class="total-payable-data"><span class="c-amt"> Rs. ' . number_format($order_total_val, 2) . '</span></td>'
      . '</tr></table>',
    );
  }
  /*
    if (isset($_SESSION['fg_loyalty_anonymous'])) {
    $fg_loyalty_card = $_SESSION['fg_loyalty_anonymous'];
    }
    else {
    $fg_loyalty_card = $user->field_fg_loyalty_card_user[LANGUAGE_NONE][0]['value'];
    }
   * 
   */
  ######abhishek FGSF 

  $fg_loyalty_card = "";
  if ($_SESSION[$channel]['order_id']) {
    $fg_loyalty_card = get_fgsf_cardno_using_order_id($_SESSION[$channel]['order_id']);
  }

  $form['open_div']['#markup'] = '<div class="fg-loyalty-card-div calulation-div">';

  if ($page_name == 'customer-cart' && variable_get('fgsc_earn_flag')) {

    $form['wrapper_fg_loyalty'] = array(
      '#type' => 'fieldset',
      //'#prefix' => '<div class="fg-loyalty-card-div calulation-div"><div class= "fg-loyalty-card">',
      '#prefix' => '<div id="fg_earn_wrapper">',
      '#suffix' => '</div>',
    );

    #########################  FGSF EARN TEST  #######################################
    $form['wrapper_fg_loyalty']['fg_loyalty_card'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter FGSF card'),
      '#size' => 20,
      '#maxlength' => 14,
      '#attributes' => array('class' => array('payback_card_inputs')),
      '#default_value' => $fg_loyalty_card,
    );
    $form['wrapper_fg_loyalty']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Apply'),
      '#name' => 'add_fg_loyalty_card',
      '#ajax' => array(
        'callback' => 'bbd_cart_fg_loyalty_ajax_submit',
        'wrapper' => 'form-replace',
      ),
      '#submit' => array('bbd_cart_fg_earn_add'),
    );

    $form['wrapper_fg_loyalty']['remove'] = array(
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#ajax' => array(
        'callback' => 'bbd_cart_fg_loyalty_ajax_remove',
        'wrapper' => 'form-replace',
      ),
      '#submit' => array('bbd_cart_fg_earn_remove'),
    );

//    $form['wrapper_fg_loyalty']['fg_loyalty_error_wraper'] = array(
//      '#prefix' => '<div id ="fg_loyalty_error_wrap">',
//      '#suffix' => '</div>',
//      '#type' => 'markup',
//    );

    if (!empty($fg_loyalty_card)) {
      $form['wrapper_fg_loyalty']['fg_loyalty_card']['#attributes']['readonly'] = 'readonly';
      $form['wrapper_fg_loyalty']['submit']['#access'] = FALSE;
      $form['wrapper_fg_loyalty']['remove']['#access'] = TRUE;
    }
    else {

      if (isset($form['wrapper_fg_loyalty']['fg_loyalty_card']['#attributes']['readonly'])) {
        unset($form['wrapper_fg_loyalty']['fg_loyalty_card']['#attributes']['readonly']);
      }

      $form['wrapper_fg_loyalty']['submit']['#access'] = TRUE;
      $form['wrapper_fg_loyalty']['remove']['#access'] = FALSE;
    }
    if (isset($form_state['bbd_cart']['error']) && !empty($form_state['bbd_cart']['error'])) {
      $form['wrapper_fg_loyalty']['message_markup']['#markup'] = $form_state['bbd_cart']['error'];
    }

    /*  if ($page_name == 'customer-checkout') {
      $form['wrapper_fg_loyalty']['fg_loyalty_card']['#disabled'] = TRUE;
      $form['wrapper_fg_loyalty']['submit']['#disabled'] = TRUE;
      }
     */
  }
##############################################################################################
//Franchisee code  check form if not franchisee && !strstr(($_GET['q']), 'customer-checkout')
  $roles = user_roles();
  $rid = array_search('Franchisee', $roles);
  if ((!array_key_exists($rid, $user->roles))) {
    $form['order_id'] = array(
      '#type' => 'hidden',
      '#value' => $order_id,
    );

    $channel = bbd_common_get_channel();
    $form['franchisee_code_check'] = array('#type' => 'markup',
      '#prefix' => '<div class= "franchisee-code-check" id="franchisee-code-check">',
      '#suffix' => '</div>',
    );
    $partner_name = variable_get('oxi_partner_name', '');
    $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code'], $partner_name);
    $form['franchisee_code_check']['franchisee_check'] = array(
      '#title' => get_default_value_for_franchisee_check_title(),
      '#type' => 'textfield',
      '#size' => 18,
      '#maxlength' => 12,
      #######################Customised url #######################################################
      '#disabled' => ((isset($_COOKIE['track_visit']) && $_COOKIE['track_visit'] == 'customised_url') || !empty($agent_id)) ? TRUE : FALSE,
      '#attributes' => array('class' => array('fraanchisee_code_inputs'), 'placeholder' => (isset($form_state['values']['agent_selector']) && $form_state['values']['agent_selector'] == 1) ? t('Enter Franchisee Code/Mobile No.') : t('Enter Agent id./Mobile No.'),),
      //'#default_value' => isset($_SESSION[$channel]['franchisee_code']) ? $_SESSION[$channel]['franchisee_code'] : '',
      '#default_value' => get_default_value_for_franchisee_check_textbox(),
    );
//if (!isset($_SESSION[$channel]['franchisee_code'])) {
    $form['franchisee_code_check']['franchisee_submit'] = array(
      '#type' => 'submit',
      '#value' => t('ENTER'),
      '#name' => 'add_fr_code',
      #######################Customised url #######################################################
      '#access' => ((isset($_COOKIE['track_visit']) && $_COOKIE['track_visit'] == 'customised_url') || !empty($agent_id)) ? FALSE : TRUE,
      '#ajax' => array(
        'callback' => 'bbd_cart_fr_code_check_ajax',
        //'#suffix' => '</div>',
        'wrapper' => 'franchisee-code-check',
      //'wrapper' => 'form-replace',
      ),
      '#submit' => array('bbd_cart_fr_code_check_ajax_submit'),
    );
    if (isset($_SESSION[$channel]['franchisee_code'])) {
      $namebycode = get_franchisee_name_using_frcode($_SESSION['website_variables']['franchisee_code']); //function  changed for franchisee name
      if ($namebycode) {
        $var_franchisee_name = "<span class='fr_success_green'>Franchisee name is: <b>" . ucfirst($namebycode) . "</b></span></br>";
      }
      $mobilebycode = get_mobileno_using_frcode($_SESSION['website_variables']['franchisee_code']);
      if ($mobilebycode) {
        $var_mob_no = "<span class='fr_success_green'>Franchisee Mobile No: <b>" . $mobilebycode . "</b></span></br>";
      }
    }
    #changes for Cart Page in case f mobile number

    $form['franchisee_code_check']['frcode_error_wrap'] = array(
      '#prefix' => '<div id ="frcode_error_wrap">' . $var_franchisee_name . $var_mob_no,
      '#suffix' => '</div>',
      '#type' => 'markup',
    );

    //Update Success/Error message from Ajax Callback
    if (isset($form_state['bbd_common']['fr_code_message']) && !empty($form_state['bbd_common']['fr_code_message'])) {
      $form['franchisee_code_check']['frcode_error_wrap']['#prefix'] = '<div id ="frcode_error_wrap">' . $form_state['bbd_common']['fr_code_message'];
    }
  }
  ############## Oxigen Integration end##################
//}


  if ($current_theme != 'bbdmobile') {
    $bachat_div = '';
    if ($line_bachat > 0) {

      $bachat_div = '<tr>
      <td class="calculation-label"><span class="cost-label">Total Bachat:</span></td>
      <td class="calculation-data"><span class="c-amt"> Rs. ' . number_format($line_bachat, 2) . '</span></td>
    </tr>';
    }
    $mcoupon_discount = 0;
    if (!empty($_SESSION[$channel]['mcoupon']) && $order->mcoupon['status'] == 1) {
      $mcoupon_discount = $order->field_mcoupon_discount[LANGUAGE_NONE][0]['value'];
    }
    $coupon_div = '';
    if ($mcoupon_discount > 0) {

      $coupon_div = '<tr>
      <td class="calculation-label"><span class="cost-label-coupon">Coupon Code Discount:</span></td>
      <td class="calculation-data"><span class="c-amt-coupon"> Rs. ' . number_format($mcoupon_discount, 2) . '</span></td>
    </tr>';
    }


    $form['calculation'] = array(
      '#markup' => '<table><tr>'
      . '<td class="calculation-label"><span class="cost-label">Total:</span></td>'
      . '<td class="calculation-data"><span class="c-amt"> Rs. ' . number_format($order_total_val - $shipping_charge + $line_bachat, 2) . '</span></td>'
      . '</tr>' . $coupon_div . '<tr>'
      . '<td class="calculation-label"><span class="cost-label">Shipping:</span></td>'
      . '<td class="calculation-data"><span class="c-amt"> Rs. ' . number_format($shipping_charge, 2) . '</span></td>'
      . '</tr>' . $bachat_div . '<tr>'
      . '<td class="total-payable-label"><span class="cost-label">Grand Total:</span></td>'
      . '<td class="total-payable-data"><span class="c-amt"> Rs. ' . number_format($order_total_val, 2) . '</span></td>'
      . '</tr></table></div>',
    );
  }
  else {
    $form['close'] = array(
      '#markup' => '</div>'
    );
  }

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'bbd_nearest_pincode') . '/bbd_nearest_pincode.js',
  );
  if ($page_name == 'customer-cart') {
    $form['pincode'] = array(
      '#type' => 'textfield',
      '#title' => 'Check Delivery Availability',
      '#prefix' => '<div id="serve_pincode" class = "commerce-checkout-cart"><div class="chck-davail">
        <div class="verify-pin">
        <div id="pincode_serviceability" nid = "">',
      '#maxlength' => 6,
      '#attributes' => array(
        'id' => array('node_pincode'),
        'placeholder' => t('Enter Pincode'),
      ),
    );
    $form['submit'] = array(
      '#type' => 'button',
      '#value' => t('Check'),
      '#attributes' => array(
        'id' => array('pin_ser'),
        'class' => array('pincode_verify_cart'),
      ),
      '#suffix' => '</div></div></div></div>',
    );





    /* $form['pincode'] = array(
      '#type' => 'textfield',
      '#title' => t('Check Serviceability'),
      '#size' => 6,
      '#maxlength' => 6,
      '#default_value' => $pincode ? $pincode : '',
      '#attributes' => array(
      'placeholder' => t('Enter Pincode'),
      ),
      '#prefix' => '<div class = "commerce-checkout-cart">',
      );
      $form['pincode_submit'] = array(
      '#type' => 'button',
      '#value' => t('Verify'),
      '#attributes' => array('class' => array('pincode_verify_cart')),
      ); */

    $payable_val = ($order_total_val ) - ($exchange_bachat); // $payable_val +
    if ($payable_val < 0) {
      $payable_val = $order_total_val;
    }
    $order_total = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $payback_points = variable_get('payback_points', '');
    $payback_price = variable_get('payback_price', '');
    $payback_points = round(($order_total * $payback_points) / ($payback_price * 100));

    $form['wrapper_pay'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="calulation-"><div class= "payback">',
      '#suffix' => '</div>',
    );

    $form['wrapper_pay']['wrapper'] = array(
      '#type' => 'markup',
      '#markup' => t('<label>Earn <span>' . $payback_points . '</span> Points</label>'),
    );
    if (isset($_SESSION['payback_anonymous'])) {
      $payback_card_no = $_SESSION['payback_anonymous'];
    }
    else {
      $payback_card_no = $user->field_payback[LANGUAGE_NONE][0]['value'];
    }
    $form['wrapper_pay']['payback_cards'] = array(
      '#type' => 'textfield',
      '#maxlength' => 16,
    );
    $roles = user_roles();
    $rid = array_search('Franchisee', $roles);
    if ((!empty($payback_card_no)) && (!array_key_exists($rid, $user->roles))) {
      $form['wrapper_pay']['payback_cards']['#default_value'] = $payback_card_no;
    }
//    for ($i = 1; $i <= 4; $i++) {
//      $form['wrapper_pay']['payback_card' . $i] = array(
//        '#type' => 'textfield',
//        '#size' => 4,
//        '#maxlength' => 4,
//        '#attributes' => array('class' => array('payback_card_inputs')),
//          //  '#default_value' => $payback_card_nos[$i - 1],
//      );
//    }
//
//    $roles = user_roles();
//    $rid = array_search('Franchisee', $roles);
//    if ((!empty($payback_card_no)) && (!array_key_exists($rid, $user->roles))) {
////      $arr1 = str_split($payback_card_no);
//      $payback_card1 = $arr1[0] . $arr1[1] . $arr1[2] . $arr1[3];
//      $payback_card2 = $arr1[4] . $arr1[5] . $arr1[6] . $arr1[7];
//      $payback_card3 = $arr1[8] . $arr1[9] . $arr1[10] . $arr1[11];
//      $payback_card4 = $arr1[12] . $arr1[13] . $arr1[14] . $arr1[15];
//// $form['wrapper_pay']['payback_card1']['#disabled'] = TRUE;
////$form['wrapper_pay']['payback_card2']['#disabled'] = TRUE;
//// $form['wrapper_pay']['payback_card3']['#disabled'] = TRUE;
//// $form['wrapper_pay']['payback_card4']['#disabled'] = TRUE;
    // $form['wrapper_pay']['payback_cards']['#default_value'] =    $payback_card_no;
//      $form['wrapper_pay']['payback_card2']['#default_value'] = $payback_card2;
//      $form['wrapper_pay']['payback_card3']['#default_value'] = $payback_card3;
//      $form['wrapper_pay']['payback_card4']['#default_value'] = $payback_card4;
    //}
// else { //already comentd by someone

    $form['wrapper_pay']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Apply'),
      '#name' => 'add_payback',
      '#ajax' => array(
        'callback' => 'bbd_cart_payback_ajax_submit',
        '#suffix' => '</div>',
        'wrapper' => 'error_wrap',
      ),
    );
// }
    $form['wrapper_pay']['error_wrapper'] = array(
      '#prefix' => '<div id ="error_wrap">',
      '#suffix' => '</div>',
      '#type' => 'markup',
    );
//4 parts end

    if (user_access('access mcoupon')) {
      if (!isset($order->mcoupon) || $order->mcoupon['status'] != 1) {
        $form['coupon'] = array(
          '#type' => 'textfield',
          '#title' => t('Apply a Mcoupon'),
          '#size' => 6,
          '#maxlength' => 30,
          '#attributes' => array(
            'placeholder' => t('Enter Mcoupon'),
            'class' => array('coupon_code')
          ),
        );
        if (user_access('access mcoupon phone')) {
          $form['coupon_phone'] = array(
            '#type' => 'textfield',
            '#title' => t('Phone Number'),
            '#size' => 6,
            '#maxlength' => 10,
            '#attributes' => array(
              'placeholder' => t('Enter Phone Number'),
              'class' => array('coupon_code_phone')
            ),
          );
        }
        $form['coupon_submit'] = array(
          '#type' => 'button',
          '#value' => t('Apply'),
          '#name' => 'add_coupon',
          '#attributes' => array('class' => array('coupon_verify_cart')),
            /* '#ajax' => array(
              'callback' => 'mcoupon_coupon_apply',
              'wrapper' => 'error_coupon',
              'method' => 'replace',
              'effect' => 'fade',
              ), */
        );
      }
      if (!empty($_SESSION[$channel]['mcoupon']) && $order->mcoupon['status'] == 1) {
        $code = $_SESSION[$channel]['mcoupon'];
        $form['coupon_submit']['#suffix'] = '<div class="coupon_info">Coupon Code(' . $code . ')<div><a  id ="remove-coupon"href="#"><input type="button" class="form-submit" value="Remove"></a></div></div>';
      }
      $error_msg = NULL;
      if (!empty($_SESSION[$channel]['mcoupon']) && $order->mcoupon['status'] == 0) {
        $error_msg = $order->mcoupon['message'];
        unset($_SESSION[$channel]['mcoupon']);
      }
      $form['error_coupon'] = array(
        '#prefix' => '<div id ="error_coupon">' . $error_msg,
        '#suffix' => '</div>',
        '#type' => 'markup',
      );
    }

    ################ Hardik & Vikee ######################
    ############ For Hiding Submit Button On Customer-Cart Page if Product is Out Of stock #############
    /* $re_direct = array('bbd_common_shipping_display_form');
      if (!$error) {
      $form['checkout_custom_cart'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#submit' => $re_direct,
      );
      } */
    ######################### END ################### 
    $form['checkout_custom_cart'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#submit' => array('bbd_common_shipping_display_form'),
    );

    //abhishek
    $final_total = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $max_allowed_order_total = variable_get('max_allowed_order_total', 195000);
    $max_allowed_order_total_in_paisa = $max_allowed_order_total * 100;
    if ($final_total > $max_allowed_order_total_in_paisa) {
      $order->order_limit_error = 1;
    }//end

    if ($order->fgsf_limit_error == 1 || $order->order_limit_error) {
      $form['checkout_custom_cart']['#disabled'] = TRUE;
    }
    $form['actions']['continue_shopping'] = array(
      '#type' => 'submit',
      '#value' => t('Continue Shopping'),
      '#submit' => array('website_continue_shopping'),
      '#weight' => 2,
      '#suffix' => '</div></div>',
    );
  }
  elseif ($page_name == 'customer-checkout') {
    global $user;
    $redirect = array('bbd_common_payment_mode_form');

//    $form['checkout_back'] = array(
//      '#type' => 'submit',
//      '#value' => t('Back'),
//      '#submit' => array('commerce_checkout_back_submit'),
//      '#prefix' => '<div class = "commerce-checkout-back">',
//      '#suffix' => '</div>',
//      '#limit_validation_errors' => array(),
//    );

    if (!$error) {
      $form['checkout_custom_cart'] = array(
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#submit' => $redirect,
        '#prefix' => '<div class = "commerce-checkout-cart">',
        '#suffix' => '</div></div>',
      );
    }
    else {
      $form['checkout_custom_cart'] = array(
        '#suffix' => '</div>',
      );
    }
  }
  return $form;
}

################ Oxigen Integration ##########################
################ author : Manish #############################

function resend_otp_ajax($form, &$form_state) {
  return $form;
}

function resend_otp_submit($form, &$form_state) {
  unset($_SESSION['resend_otp_bypass']);
  $form_state['rebuild'] = TRUE;
  return $form;
}

function get_default_value_for_franchisee_check_textbox() {
  $channel = bbd_common_get_channel();
  $partner_name = variable_get('oxi_partner_name', '');
  if (isset($_SESSION[$channel]['franchisee_code'])) {
    if (isset($_COOKIE['agent_id'])) {
      return bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code'], $partner_name);
    }
    else {
      $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code'], $partner_name);
      if ($agent_id) {
        return $agent_id;
      }
      else {
        return $_SESSION[$channel]['franchisee_code'];
      }
    }
  }
}

function get_default_value_for_franchisee_check_title() {
  $channel = bbd_common_get_channel();
  if (isset($_SESSION[$channel]['franchisee_code'])) {
    if (isset($_COOKIE['agent_id'])) {
      return 'Oxigen Agent id.';
    }
    else {
      $partner_name = variable_get('oxi_partner_name', '');
      $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code'], $partner_name);
      if ($agent_id) {
        return 'Oxigen Agent id.';
      }
      else {
        return 'Franchisee code';
      }
    }
  }
}

################ Oxigen integration end#######################
################ author : Manish #############################

/*
 * Back button callback for checkout page
 */

//function commerce_checkout_back_submit($form, &$form_state){
//  $channel = bbd_common_get_channel();
//  if (!empty($_SESSION[$channel]['order_id'])) { 
//    $url = 'customer-shipping/' . $_SESSION[$channel]['order_id'];
//    drupal_goto($url);
//  }
//}
function bbd_cart_fr_code_check_ajax($form, &$form_state) {
  return $form['franchisee_code_check'];
}

/*
 * Ajax call back for franchisee check at pdp
 */

function bbd_cart_fr_code_check_ajax_submit($form, &$form_state) {

  $form_state['rebuild'] = TRUE;

  global $user;
  $channel = bbd_common_get_channel();
  $user_franchisee_code = $form_state['values']['franchisee_check'];
  $error_flag = FALSE;
  $length = strlen($user_franchisee_code);
  if ($length == 12) { //check its mobile number or Franchisee code
    $country_code = substr($user_franchisee_code, 0, 2);
    if ($country_code != '91') {
      $msg = "<span id='fr_error_red'>Invalid Mobile number</span>";
      $error_flag = TRUE;
    }
    else {
      $mobile = substr($user_franchisee_code, 2);
      $fr_code = get_frcode_using_number($mobile); //get_frcode_using_number
      $fr_name = get_franchisee_name_using_frcode($fr_code); //new function for franchisee name
      if (empty($fr_code)) {
        $msg = "<span id='fr_error_red'>Invalid Mobile number</span>";
        $error_flag = TRUE;
      }
      else {
        $fr_uid = bbd_common_get_uid_franchisee_code($fr_code);
        $user_obj = user_load($fr_uid);
        $status = $user_obj->status;
        if ($status == 0) {
          $error_flag = TRUE;
          //$form_state['rebuild'] = TRUE;
          $msg = 'Franchisee/Agent with this mobile number is currently not servicable';
        }
        $partner_name = variable_get('oxi_partner_name', '');
        $agent_id = bbd_common_get_agent_id_from_fr_code($fr_code, $partner_name);
        if (empty($agent_id)) {
          $msg2 = '<div class="fr-success-name-fm fr-success-name-cart">Franchisee Code: ' . $fr_code . '</div>';
        }
        else {
          $msg2 = '<div class="fr-success-name-fm fr-success-name-cart">Oxigen Agent id: ' . $agent_id . '</div>';
        }
      }
    }
  }
  //Checking if input value is franchisee code!
  elseif ($length == 10) {
    $agent_id = $form_state['values']['franchisee_check'];
    $partner_name = variable_get('oxi_partner_name', '');
    $fr_code = bbd_common_get_fr_code_from_agent_id($agent_id, $partner_name);
    if (empty($fr_code)) {
      $msg = "<span id='fr_error_red'>Invalid Oxigen Agent id</span>";
      $error_flag = TRUE;
    }
    else {
      $fr_uid = bbd_common_get_uid_franchisee_code($fr_code);
      $user_obj = user_load($fr_uid);
      $status = $user_obj->status;
      if ($status == 0) {
        $error_flag = TRUE;
        //$form_state['rebuild'] = TRUE;
        $msg = 'Oxigen Agent with this agent id is currently not servicable';
      }
      else {
        $msg2 = '<div class="fr-success-name-fm fr-success-name-cart">Oxigen Agent id: ' . $agent_id . '</div>';
      }
    }
  }
  elseif ($length == 8) {
    $fr_code = $user_franchisee_code;
    $fr_uid = bbd_common_get_uid_franchisee_code($user_franchisee_code);
    if (empty($fr_uid)) {
      $msg = "<span id='fr_error_red'>Invalid Franchisee code</span>";
      $error_flag = TRUE;
    }
    else {
      $user_obj = user_load($fr_uid);
      $status = $user_obj->status;
      if ($status == 0) {
        $error_flag = TRUE;
        //$form_state['rebuild'] = TRUE;
        $msg = 'Franchisee with this franchisee code is currently not servicable';
      }
      else {
        $partner_name = variable_get('oxi_partner_name', '');
        $agent_id = bbd_common_get_agent_id_from_fr_code($fr_code, $partner_name);
        if (empty($agent_id)) {
          $mobilebycode = get_mobileno_using_frcode($fr_code);
          $msg2 = '<div class="fr_success_green">Franchisee Mobile No: <b>' . $mobilebycode . '</b></div>';
        }
        else {
          $msg = "<span id='fr_error_red'>Invalid Franchisee code</span>";
          $error_flag = TRUE;
        }
      }
    }
  }
  else {
    $msg = "<span id='fr_error_red'>Invalid Franchisee code/Oxigen Agent id/ Mobile number.</span>";
    $error_flag = TRUE;
  }

  if ($error_flag) {
    //unset($_SESSION[$channel]['franchisee_code']);
    //unset($_SESSION[$channel]['agent_selector']);
    if ($user->uid != 0) {
      $user->field_user_franchisee_code[LANGUAGE_NONE][0]['value'] = '';
      user_save($user);
    }
    $form['checkout_custom_cart']['#disabled'] = TRUE;

    $form_state['bbd_common']['fr_code_message'] = $msg;
//    return $form['frcode_error_wrap'] = array(
//      '#prefix' => '<div id ="frcode_error_wrap">' . $msg,
//      '#suffix' => '</div>',
//      '#type' => 'markup',
//    );

    return;
  }

  $order_id = $form_state['values']['order_id'];
  $order = commerce_order_load($order_id);
  $order->field_franchisee_uid[LANGUAGE_NONE][0]['uid'] = $fr_uid;
  commerce_order_save($order);
  $_SESSION[$channel]['franchisee_code'] = $fr_code;
  if ($user->uid != 0) {
    $user->field_user_franchisee_code[LANGUAGE_NONE][0]['value'] = $fr_code;
    user_save($user);
  }

  $fr_name = get_franchisee_name_using_frcode($fr_code);
  $partner_name = variable_get('oxi_partner_name', '');
  $agent_id = bbd_common_get_agent_id_from_fr_code($fr_code, $partner_name);
  if ($agent_id) {
    setcookie('agent_id', $agent_id, 0, '/');
    $terminology = 'Oxigen Agent ';
  }
  else {
    unset($_COOKIE['agent_id']); //To destroy agent id cookie if it already exists!
    $terminology = 'Franchisee ';
  }
  if ($fr_name) {
    $msg = "<span id='fr_success_green'>$terminology name is: <b>" . $fr_name . "</b></span>";
  }

  $form['checkout_custom_cart']['#disabled'] = FALSE;


  $form_state['bbd_common']['fr_code_message'] = $msg2 . $msg;
//  return $form['frcode_error_wrap'] = array(
//    '#prefix' => '<div id ="frcode_error_wrap">' . $msg2 . $msg,
//    '#suffix' => '</div>',
//    '#type' => 'markup',
//  );
}

/*
 * form for franchisee code check at add to cart popup
 */

function bbd_common_frcode_popup_form($form, &$form_state) {
  global $base_url;
  $channel = bbd_common_get_channel();
  $arg0 = arg(0);
  global $base_url;
  global $user;
  $pid = $form_state['pid'];
  $sku = bbd_common_get_sku_from_pid($pid);
  $qty = $form_state['qty'];
  $product_remark = '';
  $initial_page_url = $form_state['uri'];
  if (empty($initial_page_url)) {
    $initial_page_url = $base_url;
  }
  $roles = user_roles();
  $output = '';
  $rid = array_search('Franchisee', $roles);
  $cart_count = count($_SESSION[$channel]['order_data']['products']);
  if (!bbd_category_food_category_validation($sku)) { // If Food product and Not customer care
    $nid = bbd_common_get_nid_from_pid($pid);
    $node = bbd_performance_get_flat_table_data_from_nid($nid, $pid);
    $output .= '<div class="cart_hover_inner_main bbd_cart_add_to_cart_notification bbd_cart_add_to_cart_fr_code">';
    $output .= '<div class="fr_code_header1">Food Order Prohibited</div>';
    $output .= '<div class="fr_code_header2">Sorry order cannot be placed for ' . $node->product_title . '</div>';
    $output .= '</div>';
    $form['add-cart-form-html'] = array(
      '#markup' => $output
    );
    return $form;
  }
  ######################Customised URL ###################################
  //If session contains franchisee code
  elseif (isset($_SESSION[$channel]['franchisee_code'])) {
    if (!empty($pid)) {
      $_SESSION['franchisee_first_pid'] = $pid;
      $_SESSION['franchisee_first_qty'] = $qty;
    }
    $html = get_checkout_render_cart($pid, $qty, $product_remark, $initial_page_url);
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'bbd_common') . '/js/bbd_update_cart.js',
    );
    $form['add-to-cart-continue-text'] = array(
      '#markup' => $html
    );
  }
  elseif (!array_key_exists($rid, $user->roles) && empty($_SESSION['website_variables']['franchisee_code']) || (!array_key_exists($rid, $user->roles) && ($cart_count == 0))) {
    ######################## Customised url starts ########################################## 
    //If cookie has franchisee code
    if (isset($_COOKIE['fr_code_from_customised_url'])) {
      $_SESSION[$channel]['franchisee_code'] = $_COOKIE['fr_code_from_customised_url'];
      $channel = bbd_common_get_channel();
      if (!empty($pid)) {
        $_SESSION['franchisee_first_pid'] = $pid;
        $_SESSION['franchisee_first_qty'] = $qty;
      }
      $html = get_checkout_render_cart($pid, $qty, $product_remark, $initial_page_url);
      $form['#attached']['js'] = array(
        drupal_get_path('module', 'bbd_common') . '/js/bbd_update_cart.js',
      );
      $form['add-to-cart-continue-text'] = array(
        '#markup' => $html
      );
    }
    else {
      ######################################### Customised url ends ################################
      $form['#prefix'] = '<div id = "ctool-form-replace">';
      $form['#suffix'] = '</div>';
      if (!empty($pid)) {
        $_SESSION['franchisee_first_pid'] = $pid;
        $_SESSION['franchisee_first_qty'] = $qty;
      }

      $form['franchisee_qty'] = array(
        '#type' => 'value',
        '#value' => $qty,
      );
      $form['franchisee_pid'] = array(
        '#type' => 'value',
        '#value' => $pid,
      );

      $output .= '<div class="cart_hover_inner_main bbd_cart_add_to_cart_notification bbd_cart_add_to_cart_fr_code">';
      $output .= '<div class="fr_code_header1">Kindly Enter Franchisee Details</div>';
      $output .= "<div class='fr_code_header2'>This site is currently open only for the Franchisee & Franchisee's customers.</div>";
      $output .= '<div class="fr_code_header2">Franchisee Code / Franchisee Mobile Number would be required to place an order</div></div>';
      //$output .= '</div>';

      $form['add-cart-form-html'] = array(
        '#markup' => $output
      );

      ############# Oxigen Wallet integration start#######################
      ############# author : Manish           #######################
      //$error_suffix = isset($form_state['bbd_common']['error']) ? $form_state['bbd_common']['error'] : '';

      $form['franchisee_check'] = array(
        '#title' => 'Enter Franchisee Code/ Oxigen Agent id / Mobile Number.',
        '#type' => 'textfield',
        '#size' => 50,
        '#maxlength' => 12,
        '#description' => t('Enter Franchisee Code/ Oxigen Agent id / Mobile Number.'),
        '#attributes' => array('class' => array('fraanchisee_code_inputs'), 'placeholder' => t('Enter Franchisee Code/ Oxigen Agent id / Mobile Number.'),),
        '#default_value' => isset($_SESSION[$channel]['franchisee_code']) ? $_SESSION[$channel]['franchisee_code'] : '',
        '#suffix' => '<div class = "fr-error-suffix">' . '*For mobile,add 91 ahead of mobile number. </div></div>', //$error_suffix . '</div>',
        '#suffix' => '<div class = "fr-error-suffix">' . 'Please add 91 ahead of mobile number. </div></div>', //$error_suffix . '</div>',
        '#suffix' => '<div class = "fr-error-suffix">' . '*For mobile,add 91 ahead of mobile number. </div></div>', //$error_suffix . '</div>',
      );
//      $form['franchisee-check-text-html'] = array(
//        '#markup' => '<div class = "fr-error-suffix"></div>',
//      );
      if (!user_access('skip CAPTCHA')) {
        $form['#attached']['js'][] = drupal_get_path('module', 'image_captcha_refresh') . '/image_captcha_refresh.js';
        $form['#attached']['js'][] = drupal_get_path('module', 'bbd_common') . '/js/bbd_common.js';

        $form['my_captcha_element'] = array(
          '#type' => 'captcha',
          '#captcha_type' => 'image_captcha/Image',
        );
        $form['captcha_widgets']['captcha_refresh'] = array(
          '#markup' => theme('image_captcha_refresh_link', array('url' => 'captcha/refresh/bbd_common_frcode_popup_form')),
        );
        $captcha_text = '<div class="Captcha TextBox"></div>';
        $form['captcha-text'] = array(
          '#markup' => $captcha_text,
        );
      }

      $form['franchisee_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Enter'),
        '#name' => 'add_fr_code',
        '#prefix' => '<div id = "checkout-add-cart-form">',
        '#suffix' => '</div>',
        '#ajax' => array(
          'wrapper' => 'ctool-form-replace',
          'callback' => 'add_to_cart_replace_form',
          'method' => 'replace',
          'event' => 'click', //Change event so that it will also submit on keyboard 'Enter'
        ),
        // '#executes_submit_callback' => TRUE,
        '#submit' => array('add_cart_and_session_checkout'),
      );
      $fr_text = '<div class="fr_code_details_link"><a target="_blank" href="' . $base_url . '/node/16852">What is Franchisee code?</a></div>';
      $form['add-to-cart-text'] = array(
        '#markup' => $fr_text
      );
    }
  }
  else {
    $html = get_checkout_render_cart($pid, $qty, $product_remark, $initial_page_url);
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'bbd_common') . '/js/bbd_update_cart.js',
    );
    $form['add-to-cart-continue-text'] = array(
      '#markup' => $html
    );
  }
  return $form;
}

############# Oxigen Wallet integration ends#######################
############# author : Manish           #######################

/**
 * Returns Html for continue checkout and adds product in session
 */
function get_checkout_render_cart($pid, $qty, $product_remark, $initial_page_url, $fr_message = '') {
  $res_flag = _check_franchisee_kit_flag($pid);
  if (is_numeric($res_flag) && !isset($_SESSION['website_variables']['order_id'])) {
    $_SESSION['website_variables']['channel_mode'] = 6;
  }
  $messages = $_SESSION[$channel]['message'];
  $output = '';
  if (!empty($_SESSION[$channel]['message'])) {
    $output .= '<div class="messages_status">' . $messages . '</div>';
    unset($_SESSION[$channel]['message']);
  }
  if (!empty($fr_message)) {
    $output .= $fr_message;
  }
  $output .= '<div class="cart_hover_inner_main bbd_cart_add_to_cart_notification">';
  $output .= '<div class="cart_hover_header1">Item Successfully added into your cart.</div>';
  $header = array('PRODUCT DETAILS', 'QTY', /* 'DELIVERY DETAIL', */ 'PRICE');
  bbd_web_add_product_in_session($pid, $qty, $product_remark);
  $nid = bbd_common_get_nid_from_pid($pid);
  $node = bbd_performance_get_flat_table_data_from_nid($nid, $pid);
  if (empty($node)) {
    $node = bbd_category_nid_mini_load($nid);
  }
  if (empty($node->product_image)) {// call only if no entry in flat table for backup
    $image_uri = bbd_category_get_uri_from_fid($node->field_product_images_fid);
  }
  else {
    $image_uri = $node->product_image;
  }
  $image = image_style_url('medium_thumbnail', $image_uri);
  $row [] = l('<img src="' . $image . '"/>', 'node/' . $nid, array('html' => TRUE)) . '<span class="cart_hover_title">' . l($node->title, 'node/' . $nid) . '</span>';
  $row [] = $qty;
  $price = $node->commerce_price_amount * 1 / 100;
  $row [] = 'Rs. ' . number_format($price);
  $rows [] = $row;
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= '<div class="cart_hover_footer1">';

  global $base_url;
  //$output .= l(t('Continue Shopping'), $ex[0], array('attributes' => array('class' => 'continue-shopping-button-atg'), 'query' => $param));
  if ($initial_page_url == $base_url) {
    $output .= '<a href="/front_page"  class="continue-shopping-button-atg">Continue Shopping</a>';
  }
  else {
    $output .= '<a href=/' . $initial_page_url . '  class="continue-shopping-button-atg">Continue Shopping</a>';
  }
  $output .= l(t('CHECKOUT'), 'customer-cart', array('attributes' => array('class' => 'continue-checkout-button-tag')));
  $output .= '</div>';
  $output .= '</div>';
  unset($_SESSION['franchisee_first_pid']);
  unset($_SESSION['franchisee_first_qty']);
  return $output;
}

/**
 * Replace content of form in add to cart checkout
 * This function was completely redesigned during oxigen integration
 * Modified by : Manish
 */
function add_to_cart_replace_form(&$form, &$form_state) {

  ############ Oxigen integration starts ####################
  ############ modified by : Manish #########################
  /* Variable initialization starts */
  $channel = bbd_common_get_channel();
  $message = '';
  /* Variable initialization ends */

  ####################capcha###########################
  if (!user_access('skip CAPTCHA')) {
    $captcha_info = $form_state['captcha_info'];
    $captcha_response = $form_state['values']['captcha_response'];
    $csid = $captcha_info['captcha_sid'];
    $solution = db_query('SELECT solution FROM {captcha_sessions} WHERE csid = :csid', array(':csid' => $csid))->fetchField();
    if (strcmp($captcha_response, $solution) || empty($captcha_response)) {
      return $form;
    }
  }
#################### capcha end ###########################

  $mobile_or_code = $form_state['values']['franchisee_check']; //check mobile or franchisee
  if (empty($mobile_or_code)) {
    return $form;
  }

  $length = strlen($mobile_or_code);
  $partner_name = variable_get('oxi_partner_name', '');
  //check if input string is a mobile number.
  if ($length == 12) {
    //Input string is mobile number
    $mobile = $mobile_or_code;
    $country_code = substr($mobile, 0, 2);
    if ($country_code != '91') {
      return $form;
    }
    //Removing 91 from start of the mobile number.
    $mobile = substr($mobile, 2);
    //Obtain franchisee code using mobile number
    $fr_code = get_frcode_using_number($mobile);
    //If empty franchisee code, return back.
    if (empty($fr_code)) {
      return $form;
    }
    $uid = bbd_common_get_uid_franchisee_code($fr_code);
    $user_obj = user_load($uid);
    $status = $user_obj->status;
    if ($status == 0) {
      return $form;
    }
    //Obtain agent id using franchisee code
    $agent_id = bbd_common_get_agent_id_from_fr_code($fr_code, $partner_name);
    //check if franchisee is agent
    //If franchisee is an agent
    if ($agent_id) {
      //Add a session variable to indicate franchisee is agent
      //$_SESSION[$channel]['agent_id'] = $agent_id;
      setcookie('agent_id', $agent_id, 0, "/");
      $terminology = 'Oxigen Agent';
    }
    else {
      unset($_COOKIE['agent_id']); //To destroy agent id cookie if it already exists!
      $terminology = 'Franchisee';
    }
    //Add a session variable to store franchisee code
    $_SESSION[$channel]['franchisee_code'] = $fr_code;
    //Obtain name of franchisee using franchisee code
    $namebycode = get_franchisee_name_using_frcode($fr_code);

    $message .= '<div class = "code-accepted-msg"><div class="fr-success-msg-cart">' . $terminology . ' Mobile Number accepted</div>';
    //If name not empty, display it.
    if (!empty($namebycode)) {
      $message .= '<div class="fr-success-name-cart">' . $terminology . ' Name: ' . ucfirst($namebycode) . '</div>';
    }
    //Display agent id in case of Oxigen agent
    if ($agent_id) {
      $message .= '<div class="fr-success-name-fm fr-success-name-cart">Oxigen Agent id: ' . $agent_id . '</div></div>';
    }
    //Display franchisee code in case of Franchisee
    else {
      $message .= '<div class="fr-success-name-fm fr-success-name-cart">Franchisee Code: ' . $fr_code . '</div></div>';
    }
  }
  elseif ($length < 12) {
    //check if input string is a agent id.
    if ($length == 10) {
      //Input string is agent id.
      $agent_id = $mobile_or_code;

      //Obtain uid using agent id
      $uid = bbd_common_get_uid_from_agent_id($agent_id);

      //Check if any user exists with inputed user id.
      if ($uid) {
        $user_obj = user_load($uid);
        $status = $user_obj->status;
        if ($status == 0) {
          return $form;
        }
        //Obtain franchisee code using agent id.
        $partner_name = variable_get('oxi_partner_name', '');
        $fr_code = bbd_common_get_fr_code_from_agent_id($agent_id, $partner_name);

        //Check if franchisee code exists.
        if ($fr_code) {
          //Add a session variable to store agent id.
          //$_SESSION[$channel]['agent_id'] = $agent_id;
          setcookie('agent_id', $agent_id, 0, "/");
          //Add a session variable to store franchisee code.
          $_SESSION[$channel]['franchisee_code'] = $fr_code;

          //Obtain mobile number using franchisee code
          $mobilebycode = get_mobileno_using_frcode($fr_code);

          //Obtain name using franchisee code
          $namebycode = get_franchisee_name_using_frcode($fr_code);
          $message .= '<div class = "code-accepted-msg"><div class="fr-success-msg-cart">Oxigen Agent Details Accepted</div>';

          //If name not empty, display it.
          if ($namebycode) {
            $message .= '<div class="fr-success-name-cart">Oxigen Agent Name: ' . ucfirst($namebycode) . '</div>';
          }

          //If mobile not empty, display it.
          if ($mobilebycode) {
            $message .= '<div class="fr-success-name-fm fr-success-name-cart">Agent Mobile No: ' . $mobilebycode . '</div></div>'; //changes for Franchisee Code
          }
        }
        //If franchisee code doesn't exist, return back.
        else {
          return $form;
        }
      }
      //If uid doesn't exist, return back.
      else {
        return $form;
      }
    }
    //check if input string is a franchisee code.
    elseif ($length == 8) {
      $fr_code = $mobile_or_code;
      //Obtain uid from franchisee code.
      $uid = bbd_common_get_uid_franchisee_code($fr_code);
      //Check if uid exists.
      if ($uid) {
        $user_obj = user_load($uid);
        $status = $user_obj->status;
        if ($status == 0) {
          return $form;
        }
        // Obtain agent id using franchisee code.
        $agent_id = bbd_common_get_agent_id_from_fr_code($fr_code, $partner_name);
        //In case of franchisee, agent id should be empty
        if (empty($agent_id)) {
          unset($_COOKIE['agent_id']); //To destroy agent id cookie if it already exists!
          $_SESSION[$channel]['franchisee_code'] = $fr_code;
          $mobilebycode = get_mobileno_using_frcode($fr_code);
          $namebycode = get_franchisee_name_using_frcode($fr_code);
          $message .= '<div class = "code-accepted-msg"><div class="fr-success-msg-cart">Franchisee Details Accepted</div>';
          if ($namebycode) {
            $message .= '<div class="fr-success-name-cart">Franchisee Name: ' . ucfirst($namebycode) . '</div>';
          }
          if ($mobilebycode) {
            $message .= '<div class="fr-success-name-fm fr-success-name-cart">Franchisee Mobile No: ' . $mobilebycode . '</div></div>'; //changes for Franchisee Code
          }
        }
        else {
          return $form;
        }
      }
      else {
        return $form;
      }
    }
    else {
      return $form;
    }
  }
  $pid = $form_state['values']['franchisee_pid'];
  $qty = $form_state['values']['franchisee_qty'];
  $initial_page_url = $form_state['uri'];
  $remark = '';
  $html = get_checkout_render_cart($pid, $qty, $remark, $initial_page_url, $message);
  drupal_add_js(drupal_get_path('module', 'bbd_common') . '/js/bbd_update_cart.js');

  $commands[] = ajax_command_replace('#ctool-form-replace', $html);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
  ############ Oxigen integration ends ####################
}

/*
 * form submit for franchisee code check at add to cart popup
 * This function was completely redesigned during oxigen integration
 * Modified by : Manish
 */

function add_cart_and_session_checkout($form, &$form_state) {
  $mobile_or_code = $form_state['values']['franchisee_check'];
  $length = strlen($mobile_or_code);
  //check if input string is a mobile number.
  if ($length == 12) {
    //Input string is mobile number
    $mobile = $mobile_or_code;
    $country_code = substr($mobile, 0, 2);
    if ($country_code != '91') {
      $form_state['rebuild'] = TRUE;
      $form_state['bbd_common']['error'] = 'Please enter correct mobile no';
      drupal_set_message('Please enter correct mobile no', 'error');
      return $form;
    }
    //Removing 91 from start of the mobile number.
    $mobile = substr($mobile, 2);
    //Obtain franchisee code using mobile number
    $fr_code = get_frcode_using_number($mobile);
    //If empty franchisee code, return back.
    if (empty($fr_code)) {
      $form_state['rebuild'] = TRUE;
      $form_state['bbd_common']['error'] = 'Please enter correct mobile no';
      drupal_set_message('Please enter correct mobile no', 'error');
      return $form;
    }
    else {
      $uid = bbd_common_get_uid_franchisee_code($fr_code);
      $user_obj = user_load($uid);
      $status = $user_obj->status;
      if ($status == 0) {
        $form_state['rebuild'] = TRUE;
        $form_state['bbd_common']['error'] = 'Franchisee/Agent with this mobile number is currently not servicable';
        drupal_set_message('Franchisee/Agent with this mobile number is currently not servicable', 'error');
        return $form;
      }
    }
  }
  elseif ($length < 12) {
    //check if input string is a agent id.
    if ($length == 10) {
      //Input string is agent id.
      $agent_id = $mobile_or_code;
      //Obtain uid using agent id
      $uid = bbd_common_get_uid_from_agent_id($agent_id);
      //Check if any user exists with inputed user id.
      if ($uid) {
        $user_obj = user_load($uid);
        $status = $user_obj->status;
        if ($status == 0) {
          $form_state['rebuild'] = TRUE;
          $form_state['bbd_common']['error'] = 'Oxigen Agent with this mobile number is currently not servicable';
          drupal_set_message('Oxigen Agent with this mobile number is currently not servicable', 'error');
          return $form;
        }
        //Obtain franchisee code using agent id.
        $partner_name = variable_get('oxi_partner_name', '');
        $fr_code = bbd_common_get_fr_code_from_agent_id($agent_id, $partner_name);
        //Check if franchisee code exists.
        if (!$fr_code) {
          $form_state['rebuild'] = TRUE;
          $form_state['bbd_common']['error'] = 'Please enter correct Oxigen Agent id';
          drupal_set_message('Please enter correct Oxigen Agent id', 'error');
          return $form;
        }
      }
      //If uid doesn't exist, return back.
      else {
        $form_state['rebuild'] = TRUE;
        $form_state['bbd_common']['error'] = 'Please enter correct Oxigen Agent id';
        drupal_set_message('Please enter correct Oxigen Agent id', 'error');
        return $form;
      }
    }
    //check if input string is a franchisee code.
    elseif ($length == 8) {
      $fr_code = $mobile_or_code;
      //Obtain uid from franchisee code.
      $uid = bbd_common_get_uid_franchisee_code($fr_code);
      //Check if uid exists.
      if ($uid) {
        $user_obj = user_load($uid);
        $status = $user_obj->status;
        if ($status == 0) {
          $form_state['rebuild'] = TRUE;
          $form_state['bbd_common']['error'] = 'Franchisee with this franchisee code is currently not servicable';
          drupal_set_message('Franchisee with this franchisee code is currently not servicable', 'error');
          return $form;
        }
        // Obtain agent id using franchisee code.
        $agent_id = bbd_common_get_agent_id_from_fr_code($fr_code, $partner_name);
        //In case of franchisee, agent id should be empty
        if (!empty($agent_id)) {
          $form_state['rebuild'] = TRUE;
          $form_state['bbd_common']['error'] = 'Please enter correct Franchisee code';
          drupal_set_message('Please enter correct Franchisee code', 'error');
          return $form;
        }
      }
      else {
        $form_state['rebuild'] = TRUE;
        $form_state['bbd_common']['error'] = 'Please enter correct Franchisee code';
        drupal_set_message('Please enter correct Franchisee code', 'error');
        return $form;
      }
    }
    else {
      $form_state['rebuild'] = TRUE;
      $form_state['bbd_common']['error'] = 'Please enter correct Franchisee code / Agent id / Mobile number';
      drupal_set_message('Please enter correct Franchisee code/ Agent id / Mobile number', 'error');
      return $form;
    }
  }







//  $frcodecheck = bbd_common_get_uid_franchisee_code($form_state['values']['franchisee_check']); //check validity of entered franchisee code
//  if (empty($frcodecheck)) {
//    $fr_code = get_frcode_using_number($form_state['values']['franchisee_check']);
//    if (empty($fr_code)) {
//      $form_state['rebuild'] = TRUE;
//      $form_state['bbd_common']['error'] = 'Please enter correct franchisee code or franchisee mobile no';
//      drupal_set_message('Please enter correct franchisee code or franchisee mobile no', 'error');
//    }
//  }
}

#################### oxigen wallet integration end##########################

/*
 * Get you Franchisee Code by UID
 */

function bbd_common_get_user_franchisee_code_from_uid($uid) {
  $query = db_select("field_data_field_user_franchisee_code", "f");
  $query->join("users", "d", "f.entity_id=d.uid");
  $query->fields("f", array('field_user_franchisee_code_value'));
  $query->condition("f.entity_id", $uid);
  $output = $query->execute()->fetchField();
  return $output;
}

/*
 * Get you Franchisee Code by UID
 */

function bbd_common_get_uid_franchisee_code($franchisee_code) {
  $query = db_select("field_data_field_franchisee_code", "f");
  $query->fields("f", array('entity_id'));
  $query->condition("f.field_franchisee_code_value", $franchisee_code);
  $output = $query->execute()->fetchField();
  return $output;
}

/*
 * 
 * alter pincode servicibility form: bbd_common_get_custom_cart_form
 */

function bbd_common_get_custom_cart_form_alter($form, &$form_state, $form_id) {
  /* if ($form_id == 'bbd_common_get_custom_cart_form') {
    /*$form['pincode_submit']['#attributes']['onkeypress'][] = 'if(event.keyCode==13){this.form.submit();}';
    $f1 = $form['wrapper_pay']['payback_card1']['#disabled'];
    $f2 = $form['wrapper_pay']['payback_card2']['#disabled'];
    $f3 = $form['wrapper_pay']['payback_card3']['#disabled'];
    $f4 = $form['wrapper_pay']['payback_card4']['#disabled'];
    if (empty($f1) || empty($f2) || empty($f3) || empty($f4)) {
    form_set_error('Fields cannot be empty');
    }
    } */
}

/**
 * 
 * returns shipping amount from order id
 */
function bbd_common_get_shipping_charges_from_order_id($order_id) {
  $query = db_select('commerce_line_item', 'cli');
  $query->fields('cli', array('line_item_id'));
  $query->condition('cli.order_id', $order_id);
  $query->condition('cli.type', 'shipping');
  $line_item_id = $query->execute()->fetchField();
  return $line_item_id;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * Handler  for update custom cart
 */
function bbd_common_update_custom_cart($form, &$form_state) {
  $channel = bbd_common_get_channel();
  if ($form_state['values']['op'] == 'Update cart') {
    $franchisee_code = !empty($_SESSION[$channel]['franchisee_code']) ? $_SESSION[$channel]['franchisee_code'] : $_SESSION[$channel]['franchisee_code'];
    $pincode = !empty($_SESSION[$channel]['pin_code']) ? $_SESSION[$channel]['pin_code'] : $_SESSION[$channel]['pin_code'];
    $franchisee_uid = !empty($_SESSION[$channel]['userID']) ? $_SESSION[$channel]['userID'] : $_SESSION[$channel]['userID'];
    $order_data['order_id'] = arg(1);
    $line_items = $form_state['values']['cart_line_items'];
    foreach ($line_items as $key => $qty) {
      $line_item = commerce_line_item_load($key);
      $product = commerce_product_load_by_sku($line_item->line_item_label);
      if ($line_item->type == 'product') {
        $order_data['products'][$i]['SKU'] = $line_item->line_item_label;
        $order_data['products'][$i]['quantity'] = $qty['quantity'];
        if ($product->commerce_stock[LANGUAGE_NONE][0]['value'] < $qty['quantity']) {
          form_set_error(check_plain($line_item->line_item_label, "The maximum stock of " . $product->title . " " . $line_item->line_item_label . " that can be purchased is " . $product->commerce_stock[LANGUAGE_NONE][0]['value'] . "."));
        }
        $i++;
      }
    }
    if (isset($_SESSION[$channel]['order_data'])) {
      $_SESSION[$channel]['order_data'] = $order_data;
      $order = android_services_order_create_new($franchisee_code, $franchisee_uid, $order_data, $pincode, 1); // Pass 1 for Phone Order
    }
    else {
      $_SESSION[$channel]['order_data'] = $order_data;
      if (isset($_SESSION[$channel]['channel_mode'])) {
        $channel_mode = $_SESSION[$channel]['channel_mode'];
      }
      else {
        $channel_mode = 3;
      }
      $order = android_services_order_create_new($franchisee_code, $franchisee_uid, $order_data, $pincode, $channel_mode, NULL, $mcoupon); // Pass 3 for Web Order
    }
    $error = NULL;
    if (isset($order->error) || isset($order->non_serviceable) || isset($order->out_of_stock) || isset($order->messages) || isset($order->invalid_sku)) {
      if (!empty($order->error)) {
        $error = $order->error;
      }
      if (!empty($order->non_serviceable)) {
        $error = "Product with SKU-" . $order->non_serviceable[0]['SKU'] . " is not servicable";
      }
      if (!empty($order->out_of_stock)) {
        $error = "This Product is out of stock";
      }
      if (!empty($order->invalid_sku)) {
        $error = "Invalid SKU";
      }

      if ($error) {
        form_set_error(check_plain('', t($error)));
      }
    }
  }
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * Handler  for checkout custom cart
 */
function bbd_common_shipping_display_form($form, &$form_state) {
  $channel = bbd_common_get_channel();
  global $base_url;
  global $user;
  $roles = user_roles();
  $rid = array_search('Franchisee', $roles);
  if (!($_SESSION[$channel]['franchisee_code']) && !array_key_exists($rid, $user->roles)) {
    drupal_set_message(t("<script>alert('Please enter valid franchisee code!!');</script>"));
    return FALSE;
  }
  if (!empty($_SESSION[$channel]['userID']) && $channel == 'phone_commerce_variables') {// Redirect Logic for Phone commerce
    $url = $base_url . "/" . SHIPPING_ADDRESS . "/" . $_SESSION[$channel]['userID'] . "/" . $_SESSION[$channel]['type'] . "/" . $_SESSION[$channel]['order_id'];
  }
  elseif (!empty($_SESSION[$channel]['order_id'])) { // Redirect Logic for Website
    if ($user->uid) {
      $url = $base_url . '/customer-shipping/' . $_SESSION[$channel]['order_id'];
    }
    else {
      $url = $base_url . '/customer-login/' . $_SESSION[$channel]['order_id'] . '?destination=customer-shipping/' . $_SESSION[$channel]['order_id'];
    }
  }
  drupal_goto($url);
}

function bbd_common_payment_mode_form($form, &$form_state) {
  global $base_url;
  $channel = bbd_common_get_channel();
  global $user;
  $roles = user_roles();
  $rid = array_search('Franchisee', $roles);
  if (!($_SESSION[$channel]['franchisee_code']) && !array_key_exists($rid, $user->roles)) {
    drupal_set_message(t("<script>alert('Please enter valid franchisee code!!');</script>"));
    return FALSE;
  }
  if (!empty($_SESSION[$channel]['order_id'])) { // Redirect Logic for Website
    ############# API call to create oxigen wallet for customer -> start #######################
    ############# Author : Manish ##############################################################
    $partner_name = variable_get('oxi_partner_name', '');
    $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code'], $partner_name);
    if (!empty($form_state['values']['otp_oxigen']) && !empty($agent_id) && !user_is_anonymous()) {
      $order_id = $_SESSION[$channel]['order_id'];
      $order = commerce_order_load($order_id);
      //$customer_profile = commerce_customer_profile_load($order->commerce_customer_shipping['und'][0]['profile_id']);
      $billing_profile = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
      $mobile_no = $billing_profile->field_phone_number['und'][0]['value'];
      $Transid = $order_id;
      $Requestdate = Date("YmdHis");
      $Mobile = '91' . $mobile_no; // 91 is reqd for mobile number. Refer oxigen create wallet api
      $Firstname = substr($billing_profile->commerce_customer_address['und'][0]['first_name'], 0, 20); //only 20 letters allowed in firstname. Refer oxigen create wallet api
      $LastName = substr($billing_profile->commerce_customer_address['und'][0]['last_name'], 0, 20); //only 20 letters allowed in lastname. Refer oxigen create wallet api
      $DOB = date('M-d-Y', $billing_profile->field_oxi_customer_dob['und'][0]['value']); //DOB is reqd in M-d-Y frmt. Refer oxigen create wallet api.
      $Email = $billing_profile->field_neft_customer_email['und'][0]['value'];
      $OTP = $form_state['values']['otp_oxigen'];
      $WalletOwner = $_SESSION[$channel]['wallet_owner'];
      $agent_id = bbd_common_get_agent_id_from_fr_code($_SESSION[$channel]['franchisee_code'], $partner_name);
      $Opt1 = $agent_id;
      $data = array();
      $data['Transid'] = $Transid;
      $data['Requestdate'] = $Requestdate;
      $data['Mobile'] = $Mobile;
      $data['Firstname'] = $Firstname;
      $data['LastName'] = $LastName;
      $data['DOB'] = $DOB;
      $data['Email'] = $Email;
      $data['OTP'] = $OTP;
      $data['WalletOwner'] = $WalletOwner;
      $data['RetailerMDN'] = $Opt1;
      $sql_ins_id = db_insert('bbd_oxigen_log')
          ->fields(array(
            'order_id' => $order_id,
            'request_data' => serialize($data),
            'api_type' => 'oxi_create_wallet_api', // pass vraiable defined in oxigen wallet configuratation form
            'request_time' => time(),
          ))
          ->execute();
      $response = get_wallet_api_response('oxi_create_wallet_api', $data);
      if ($response->status == TRUE) {

        $response_data = (array) $response->output;
        db_update('bbd_oxigen_log')
            ->fields(array(
              'response_data' => serialize($response_data),
              'response_time' => time(),
            ))
            ->condition('id', $sql_ins_id, '=')
            ->execute();
        if ($response_data['ResponseCode'] == 0) {
          unset($_SESSION['resend_otp_bypass']);
          $wallet_response = array();
          $wallet_response['cashback_wallet_id'] = $response_data['BigBazaarCashBackEwalletId'];
          $wallet_response['billing_profile_id'] = $order->commerce_customer_billing['und'][0]['profile_id'];

          if ($WalletOwner == 'OxigenWallet') {
            $wallet_response['oxi_wallet_flag'] = 1;
            $wallet_response['bbd_cb_wallet_flag'] = 1;
            bbd_oxigen_insert_record_to_oxigen_wallet_holders($mobile_no, $wallet_response);
          }
          elseif ($WalletOwner == 'BBCashBackWallet') {
            $wallet_response['oxi_wallet_flag'] = 0;
            $wallet_response['bbd_cb_wallet_flag'] = 1;
            bbd_oxigen_insert_record_to_oxigen_wallet_holders($mobile_no, $wallet_response);
          }
        }
        elseif ($response_data['ResponseCode'] == 1) {
          $form_state['rebuild'] = TRUE;
          drupal_set_message('Oxigen wallet creation failed for mobile number :' . $Mobile . ' : ' . $response_data['ResponseMessage'], 'error');
          return $form;
        }
      }
      else {
        drupal_set_message('Something went wrong in creating oxigen wallet. Please Try again or keep otp empty to skip wallet creation.', 'error');
        return $form;
      }
      //}
      ############# API call to create oxigen wallet for customer -> end #######################
    }
    $url = 'customer-payment/' . $_SESSION[$channel]['order_id'];
    drupal_goto($url);
  }
}

/**
 * 
 * @param type $sku_id
 * Populate the unit price and Inventory for Bundle product
 */
function bbd_common_bundle_product_autofill($sku_id) {
  $product = commerce_product_load_by_sku($sku_id);
  $unit_price = $product->commerce_price[LANGUAGE_NONE][0]['amount'];
  $stock = $product->commerce_stock[LANGUAGE_NONE][0]['value'];
  $comission = $product->field_franchise_comission[LANGUAGE_NONE][0]['amount'] / 100;
  return array('amount' => ($unit_price / 100), 'stock' => ($stock), 'comission' => $comission);
}

/**
 * callback of admin/management/inventory/import
 */
function bbd_common_import_inventory_form($form, &$form_state) {
  $form['template'] = array(
    '#markup' => l(t(' Click Here'), drupal_get_path('module', 'bbd_common') . '/virtual_inventory_update.csv') . ' To download Template',
  );
  $items = array('<b>Inventory Type</b> : physical / virtual',
    '<b>Sub Inventory Type</b> : pre-order / back-order',
    '<b>Sourcing Date Format with Example </b> : 20-05-2014 16:00:00',
    '<b>Start Date Format with Example </b> : 20-05-2014 16:00:00',
    '<b>End Date Format with Example </b> : 20-05-2014 16:00:00'
  );
  $form['instructions'] = array(
    '#title' => t('Import instructions'),
    '#theme' => 'item_list',
    '#items' => $items,
  );
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Choose a CSV file (Max limit 1000 rows)'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );
  return $form;
}

/**
 * Hook_validate
 */
function bbd_common_import_inventory_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
    'file_validate_extensions' => array('csv'), FALSE, FILE_EXISTS_REPLACE
  ));
  if ($file) {
    if ($file = file_move($file, 'public://inventory/')) {
      $form_state['values']['file'] = $file;
    }
    else {
      form_set_error(check_plain('file', t('Failed to write the uploaded file the site\'s file folder.')));
    }
  }
  elseif ($file === NULL) {
    form_set_error('file', 'Please select a file to upload');
  }
}

/**
 * Hook_submit
 */
function bbd_common_import_inventory_form_submit($form, &$form_state) {
  $file = $form_state['values']['file'];
  $uri = $file->uri; /* db_query("SELECT uri FROM {file_managed} WHERE fid = :fid", array(
    ':fid' => $form_state['values']['file']->fid,
    ))->fetchField(); */
  if (!empty($uri)) {
    $batch = array(
      'title' => t('uploading order status'),
      'operations' => array(
        array('batch_to_update_inventory_table', array($file/* $uri */)),
      ),
      'progress_message' => t('Uploading order status...'),
      'error_message' => t('Error!'),
      'finished' => 'batch_to_update_inventory_table_finish',
    );
    batch_set($batch);
// Only needed if not inside a form _submit handler.
// Setting redirect in batch_process.
    batch_process('admin/management/inventory/import');
  }
}

function batch_to_update_inventory_table($file/* $uri */, &$context) {
  if (!isset($context['results'])) {
    $results = '';
  }
  $uri = $file->uri;
  $row = 1;
  //$num_updated = 0;
  $count = 0;
  $fp = file($uri);
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 1;
    $context['sandbox']['max'] = count($fp) - 1;
    $context['results']['success'] = 0;
    $context['results']['error'] = 0;
  }
  $file = new SplFileObject($uri);
  $header = $file->current(); //Always gets the header.
  $progress = $context['sandbox']['progress'];
  $max = $context['sandbox']['max'];

  for ($i = 0; ($i < 25) && (($i + $progress) <= $max); $i++) { // condition to process 100 rows at a time.
    $file->seek($i + $progress);
    $data = explode(',', $file->current());

    $head = explode(',', $header);
    foreach ($data as $key => $value) {
      $data[$key] = trim($value);
      if (is_null($data[$key]) || $data[$key] === '') {
        drupal_set_message($head[$key] . ' is empty at row ' . ($i + $progress), 'error');
        $context['results']['error'] ++;
        continue 2;
      }
    }
    $count = $i + $progress;
    $sku = str_pad($data[0], 18, '0', STR_PAD_LEFT);
    $remaining_inventory = $inventory = $data[1];
    $dc_code = $data[2];
    $inv_type = $data[3];
    $sub_inv_type = $data[4];
    $inv_vendor = $data[5];
    $sourcing_time = $data[6];
    $sourcing_date = trim($data[7]);
    $start_date = trim($data[8]);
    $end_date = trim($data[9]);
    $virtual_inv_flag = $data[10];

    if (isset($sku) && isset($remaining_inventory) && isset($dc_code)) {
      $dc_code = bbd_common_get_check_if_dc_exist($dc_code);
      if (!empty($dc_code)) {
//Inventory should be numeric
        if (preg_match('/^[0-9]*$/', $remaining_inventory)) {
          $sku = (str_pad((string) $sku, 18, '0', STR_PAD_LEFT));
          $product = commerce_product_load_by_sku($sku);
          if ($inv_type == 'physical') {
            $remaining_inventory = bbd_common_process_virtual_orders($sku, $dc_code, $remaining_inventory);
            $db_stock = db_select('bbd_inventory', 'b')->fields('b', array('stock'))->condition('b.sku', (str_pad((string) $sku, 18, '0', STR_PAD_LEFT)))->condition('b.distribution_center', $dc_code)->execute()->fetchField();
          }
          $stock = bbd_common_get_delta_from_sku_details($product->sku, $dc_code, $inv_type, 'qty', $sub_inv_type, $vendor_id);

          $changed_stock = $remaining_inventory - $stock;

          $tran_type = 'OVERRIDE';
          $error = bbd_common_attach_dc_wise_stock_to_sku($product, $remaining_inventory, $dc_code, $inv_type, $tran_type, $sub_inv_type, $inv_vendor, $sourcing_time, $sourcing_date, $start_date, $end_date, 'virtual', 1);

          if (!empty($error)) {
            drupal_set_message(check_plain($error . $count, 'error'));
            $results .= '<br/>' . $error . $count;
          }
          else {
            $inventory_message = 'inventory update';
            if ($inv_type == 'physical') {
              $inventory_message = 'Inventory Adjustment';
              db_merge('bbd_inventory')
                  ->key(array('sku' => $sku, 'distribution_center' => $dc_code))
                  ->fields(array(
                    't_code' => '',
                    'sku' => $sku,
                    'distribution_center' => $dc_code,
                    'storage_locator' => 10,
                    'stock' => $db_stock + $changed_stock,
                    'created' => REQUEST_TIME,
                    'changed' => REQUEST_TIME,
                  ))
                  ->execute();
            }

            $variables = array('T_CODE' => '', 'MATNR' => (str_pad((string) $sku, 18, '0', STR_PAD_LEFT)),
              'I_WERKS' => '', 'R_WERKS' => $dc_code, 'I_LGORT' => '', 'R_LGORT' => '', 'BWART' => '', 'MEINS' => '', 'ACT_QUAN' => '',
              'TRNSFR_QUAN' => $changed_stock,
              'MAT_DOC' => '', 'SEG_NUM' => '', 'PO_NUM' => '', 'CAN_GR' => '', 'inv_type' => $inv_type, 'sub_inv_type' => $sub_inv_type, 'inv_vendor' => $inv_vendor,
              'old_qty' => $stock, 'new_qty' => $remaining_inventory);

            bbd_activity_log_insert('bbd_inventory', 0, $inventory_message, 'Inventory upload', $variables);

            if (!empty($virtual_inv_flag))
              $product->field_virtual_inventory_flag[LANGUAGE_NONE][0]['value'] = $virtual_inv_flag;
            if (!empty($product)) {
              commerce_product_save($product);
              $context['results']['success'] ++;
            }
          }
        }
        else {
          drupal_set_message(check_plain('Inventory should be Numeric on row ' . $count), 'error');
          $results .= '<br/>Inventory should be Numeric on row ' . $count;
        }
      }
      else {
        drupal_set_message(check_plain('DC code doesnot exist in Dc master on row ' . $count), 'error');
        $results .= '<br/>DC code doesnot exist in Dc master on row ' . $count;
      }
    }
    $context['sandbox']['progress'] = $i + $progress;
  }
  $rows_remain = $context['sandbox']['max'] - $context['sandbox']['progress'];
  $context['message'] = t($rows_remain . ' Remaining.');
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $context['finished'] = 1;
  }
  // }
  // else {
  //   $row++;
  // }
  //}
  //}
  if ($context['results']['success'] != 0) {
    $message = $context['results']['success'] . ' Records updated successfully.';
    //drupal_set_message(check_plain($message, 'status'));
    $results .= '<br/>' . $message;
  }
  $context['results'] = $results;
//watchdog('BATCH', '<pre>%array</pre>', array('%array' => print_r($results, true)));
}

/**
 * callback of admin/management/inventory/import
 */
function bbd_common_import_physical_inventory_form($form, &$form_state) {
  $form['template'] = array(
    '#markup' => l(' Click Here', drupal_get_path('module', 'bbd_common') . '/physical_inventory_update.csv') . ' To download Template',
  );
  $items = array('<b>Inventory Type</b> : physical');
  $form['instructions'] = array(
    '#title' => t('Import instructions'),
    '#theme' => 'item_list',
    '#items' => $items,
  );
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Choose a CSV file (Max limit 1000 rows)'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );
  return $form;
}

/**
 * Hook_validate
 */
function bbd_common_import_physical_inventory_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
    'file_validate_extensions' => array('csv'), FALSE, FILE_EXISTS_REPLACE
  ));
  if ($file) {
    if ($file = file_move($file, 'public://inventory/')) {
      $form_state['values']['file'] = $file;
    }
    else {
      form_set_error(check_plain('file', t('Failed to write the uploaded file the site\'s file folder.')));
    }
  }
  elseif ($file === NULL) {
    form_set_error('file', 'Please select a file to upload');
  }
}

/**
 * Hook_submit
 */
function bbd_common_import_physical_inventory_form_submit($form, &$form_state) {
  $file = $form_state['values']['file'];
  $uri = $file->uri; /* db_query("SELECT uri FROM {file_managed} WHERE fid = :fid", array(
    ':fid' => $form_state['values']['file']->fid,
    ))->fetchField(); */

  if (!empty($uri)) {
    $batch = array(
      'title' => t('uploading order status'),
      'operations' => array(
        array('batch_to_update_physical_inventory_table', array($file/* $uri */)),
      ),
      'progress_message' => t('Uploading order status...'),
      'error_message' => t('Error!'),
      'finished' => 'batch_to_update_inventory_table_finish',
    );
    batch_set($batch);
// Only needed if not inside a form _submit handler.
// Setting redirect in batch_process.
    batch_process('admin/management/inventory/import/physical');
  }
}

function batch_to_update_physical_inventory_table($file/* $uri */, &$context) {
  if (!isset($context['results'])) {
    $results = '';
  }
  //$file = $uri;
  $uri = $file->uri;
  $row = 1;
  //$num_updated = 0;
  $count = 0;
  $fp = file($uri);
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 1;
    $context['sandbox']['max'] = count($fp) - 1;
    $context['results']['success'] = 0;
    $context['results']['error'] = 0;
  }
  $file = new SplFileObject($uri);
  $header = $file->current(); //Always gets the header.
  $progress = $context['sandbox']['progress'];
  $max = $context['sandbox']['max'];

  for ($i = 0; ($i < 25) && (($i + $progress) <= $max); $i++) { // condition to process 100 rows at a time.
    $file->seek($i + $progress);
    $data = explode(',', $file->current());

    $head = explode(',', $header);
    foreach ($data as $key => $value) {
      $data[$key] = trim($value);
      if (is_null($data[$key]) || $data[$key] === '') {
        drupal_set_message($head[$key] . ' is empty at row ' . ($i + $progress), 'error');
        $context['results']['error'] ++;
        continue 2;
      }
    }
    $count = $i + $progress;
    //$count++;
    // if ($row != 1) {
    $sku = str_pad($data[0], 18, '0', STR_PAD_LEFT);
    $remaining_inventory = $inventory = $data[1];
    $dc_code = $data[2];
    $inv_type = $data[3];
    $sub_inv_type = $data[4];
    $inv_vendor = $data[5];
    $sourcing_time = $data[6];
    $sourcing_date = trim($data[7]);
    $start_date = trim($data[8]);
    $end_date = trim($data[9]);
    $virtual_inv_flag = $data[10];
    if (isset($sku) && isset($remaining_inventory) && isset($dc_code)) {
      $dc_code = bbd_common_get_check_if_dc_exist($dc_code);
      if (!empty($dc_code)) {
//Inventory should be numeric
        if (preg_match('/^[0-9]*$/', $remaining_inventory)) {
          $sku = (str_pad((string) $sku, 18, '0', STR_PAD_LEFT));
          $product = commerce_product_load_by_sku($sku);
          if ($inv_type == 'physical') {
            $remaining_inventory = bbd_common_process_virtual_orders($sku, $dc_code, $remaining_inventory);
            $db_stock = db_select('bbd_inventory', 'b')->fields('b', array('stock'))->condition('b.sku', (str_pad((string) $sku, 18, '0', STR_PAD_LEFT)))->condition('b.distribution_center', $dc_code)->execute()->fetchField();
          }

          $stock = bbd_common_get_delta_from_sku_details($product->sku, $dc_code, $inv_type, 'qty', $sub_inv_type, $vendor_id);

          $changed_stock = $remaining_inventory - $stock;

          $tran_type = 'OVERRIDE';
          $error = bbd_common_attach_dc_wise_stock_to_sku($product, $remaining_inventory, $dc_code, $inv_type, $tran_type, $sub_inv_type, $inv_vendor, $sourcing_time, $sourcing_date, $start_date, $end_date, 'physical', 1);

          if (!empty($error)) {
            //drupal_set_message(check_plain($error . $count, 'error'));
            $results .= '<br/>' . $error . $count;
          }
          else {
            $inventory_message = 'inventory update';
            if ($inv_type == 'physical') {
              $inventory_message = 'Inventory Adjustment';
              db_merge('bbd_inventory')
                  ->key(array('sku' => $sku, 'distribution_center' => $dc_code))
                  ->fields(array(
                    't_code' => '',
                    'sku' => $sku,
                    'distribution_center' => $dc_code,
                    'storage_locator' => 10,
                    'stock' => $db_stock + $changed_stock,
                    'created' => REQUEST_TIME,
                    'changed' => REQUEST_TIME,
                  ))
                  ->execute();
            }

            $variables = array('T_CODE' => '', 'MATNR' => (str_pad((string) $sku, 18, '0', STR_PAD_LEFT)),
              'I_WERKS' => '', 'R_WERKS' => $dc_code, 'I_LGORT' => '', 'R_LGORT' => '', 'BWART' => '', 'MEINS' => '', 'ACT_QUAN' => '',
              'TRNSFR_QUAN' => $changed_stock,
              'MAT_DOC' => '', 'SEG_NUM' => '', 'PO_NUM' => '', 'CAN_GR' => '', 'inv_type' => $inv_type, 'sub_inv_type' => $sub_inv_type, 'inv_vendor' => $inv_vendor,
              'old_qty' => $stock, 'new_qty' => $remaining_inventory);

            bbd_activity_log_insert('bbd_inventory', 0, $inventory_message, 'Inventory upload', $variables);

            if (!empty($virtual_inv_flag))
              $product->field_virtual_inventory_flag[LANGUAGE_NONE][0]['value'] = $virtual_inv_flag;
            if (!empty($product)) {
              commerce_product_save($product);
              //$num_updated += $num_updated++;
              $context['results']['success'] ++;
            }
          }
        }
        else {
          //drupal_set_message(check_plain('Inventory should be Numeric on row ' . $count), 'error');
          $results .= '<br/>Inventory should be Numeric on row ' . $count;
        }
      }
      else {
        //drupal_set_message(check_plain('DC code doesnot exist in Dc master on row ' . $count), 'error');
        $results .= '<br/>DC code doesnot exist in Dc master on row ' . $count;
      }
    }
    //}
//      else {
//        $row++;
//      }
    //}
    //}
    $context['sandbox']['progress'] = $i + $progress;
  }
  $rows_remain = $context['sandbox']['max'] - $context['sandbox']['progress'];
  $context['message'] = t($rows_remain . ' Remaining.');
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $context['finished'] = 1;
  }
//  if ($context['results']['success'] != 0) {
//    //$message = $context['results']['success'] . ' Records updated successfully.';
//    //drupal_set_message(check_plain($message, 'status'));
//    //$results .= $message;
//  }
  $context['results']['error'] = $results;
//watchdog('BATCH', '<pre>%array</pre>', array('%array' => print_r($results, true)));
}

/**
 * 
 * @param type $name
 * @return type
 * 
 */
function bbd_common_get_check_if_dc_exist($name) {
  $vid = taxonomy_vocabulary_machine_name_load('dc')->vid;
  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('name'));
  $query->condition('t.name', $name);
  $query->condition('t.vid', $vid);
  $dc = $query->execute()->fetchField();
  return $dc;
}

/**
 * 
 * @param type $sku
 * @param type $dc
 * @param type $inventory
 * @return type
 * 
 * 
 */
function bbd_common_process_virtual_orders($sku, $dc, $inventory) {
  $line_item_status = array('Stock allocated', 'Stock Not Allocated', 'Awaiting product confirmation');
  $query = db_select('commerce_line_item', 'cli');
  $query->join('commerce_order', 'co', 'co.order_id = cli.order_id');
  $query->join('field_data_field_dc_lineitem', 'dc', 'dc.entity_id = cli.line_item_id');
  $query->join('field_data_field_delivery_lineitem', 'del', 'del.entity_id = cli.line_item_id');
  $query->leftJoin('field_data_field_line_item_status', 'lis', 'lis.entity_id = del.field_delivery_lineitem_value');
  $query->leftJoin('taxonomy_term_data', 't', 't.tid = lis.field_line_item_status_tid');
  $query->leftJoin('field_data_field_inventory_type', 'it', 'it.entity_id = dc.field_dc_lineitem_value');
  $query->leftJoin('field_data_field_dc_code', 'dccode', 'dccode.entity_id = dc.field_dc_lineitem_value');
  $query->leftJoin('field_data_field_dc_quantity', 'dcqty', 'dcqty.entity_id = dc.field_dc_lineitem_value');
  $query->addField('cli', 'order_id', 'ORDER_ID');
  $query->addField('dcqty', 'field_dc_quantity_value', 'QTY');
  $query->addField('dc', 'field_dc_lineitem_value', 'FC_ID');
  $query->condition('it.field_inventory_type_value', 'virtual');
  $query->condition('cli.line_item_label', $sku);
  $query->condition('dccode.field_dc_code_value', $dc);
  $query->condition('t.name', $line_item_status, 'IN');
  $results = $query->distinct()->orderBy('cli.created')->execute()->fetchAll();

//Get current SKU quantity
  $old_qty = bbd_common_get_delta_from_sku_details($sku, $dc, 'physical', 'qty');

  $remaining_qty = $inventory;
  foreach ($results as $key => $val) {
    if ($remaining_qty != 0) {
      if ($remaining_qty <= $val->QTY) {
        $processed_qty = $remaining_qty;
        $remaining_qty = $remaining_qty - $processed_qty;
      }
      else {
        $processed_qty = $val->QTY;
        $remaining_qty = $remaining_qty - $processed_qty;
      }
      $variable = array(
        'T_CODE' => '',
        'MATNR' => $sku,
        'I_WERKS' => '',
        'R_WERKS' => $dc,
        'I_LGORT' => '',
        'R_LGORT' => '',
        'BWART' => '',
        'MEINS' => '',
        'ACT_QUAN' => '',
        'TRNSFR_QUAN' => -$processed_qty,
        'MAT_DOC' => '',
        'SEG_NUM' => '',
        'PO_NUM' => '',
        'CAN_GR' => '',
        'inv_type' => 'physical',
        'old_qty' => $old_qty,
        'new_qty' => $old_qty
      );

      bbd_activity_log_insert('bbd_inventory', $val->ORDER_ID, 'Order Placed', 'Physical Inventory Consumed', $variable);
      bbd_common_update_line_item($val->FC_ID, $processed_qty);
    }
    else {
      return $remaining_qty;
    }
  }
  return $remaining_qty;
}

/**
 * 
 * @param type $field_id
 * @param type $processed_qty
 * 
 * Update DC Line item after Virtual Order is processed
 */
function bbd_common_update_line_item($field_id, $processed_qty) {
  $field_collection_item = entity_load('field_collection_item', array($field_id));
  $field_collection_item = end($field_collection_item);

  $dc_qty = $field_collection_item->field_dc_quantity[LANGUAGE_NONE][0]['value'];
  $remaining_qty = $dc_qty - $processed_qty;

  $field_collection_item->field_dc_quantity[LANGUAGE_NONE][0]['value'] = $remaining_qty;
  if ($remaining_qty == 0) {
    $field_collection_item->field_inventory_type[LANGUAGE_NONE][0]['value'] = 'physical';
  }
  $field_collection_item->save();
}

/**
 * 
 * @param type $product
 * @param type $inventory
 * @param type $dc_code
 * @param type $inv_type
 * @param type $sub_inv_type
 * @param type $inv_vendor
 * @param type $sourcing_time
 * @param type $start_date
 * @param type $end_date
 * 
 * Attach Dc-wise Stock to SKU
 */
function bbd_common_attach_dc_wise_stock_to_sku($product, $inventory, $dc_code, $inv_type, $tran_type = NULL, $sub_inv_type = NULL, $inv_vendor = NULL, $sourcing_time = NULL, $sourcing_date = NULL, $start_date = NULL, $end_date = NULL, $upload_type = NULL, $excel = NULL, $channel = NULL) {
  if ($channel != 'SAP_OUTBOUND') { // Bypass Validation When Channel is SAP_OUTBOUND
    if (empty($inv_type)) {
      $error = 'Inventory type cannot be empty on row';
      return $error;
    }
    else {
      $inventory_type = array('physical', 'virtual');
      if (!in_array($inv_type, $inventory_type)) {
        $error = 'Invalid Inventory Type on row ';
        return $error;
      }
    }
    if ($inv_type == 'virtual' && $upload_type == 'virtual') {
      $vendor_id = bbd_common_get_term_id_from_name($inv_vendor, 'vendor');
      if (empty($inv_vendor)) {
        $error = 'Inventory vendor cannot be empty for Virtual Inventory on row  ';
        return $error;
      }
      else {
        if (!is_numeric($vendor_id)) {
          $error = 'Invalid vendor on row ';
          return $error;
        }
      }
      $sub_inventory_type = array('back-order', 'pre-order');
      if (empty($sub_inv_type)) {
        $error = 'Sub Inventory type cannot be empty for Virtual Inventory on row ';
        return $error;
      }
      else {
        if (!in_array($sub_inv_type, $sub_inventory_type)) {
          $error = 'Invalid Sub-Inventory Type on row ';
          return $error;
        }
      }
      if ($sub_inv_type == 'back-order') {
        if (!is_numeric($sourcing_time)) {
          $error = 'Sourcing Time has to be Numeric on row ';
          return $error;
        }
        if (!empty($sourcing_date)) {
          $error = 'Sourcing Date Not valid in-case of Back-order on row ';
          return $error;
        }

        $sourcing_days_limit = variable_get('sourcing_days_limit', 0);
        if ($sourcing_days_limit != 0) {
          if ($sourcing_time > $sourcing_days_limit) {
            $error = 'Sourcing Time cannot be more than ' . $sourcing_days_limit . ' of Back-order on row ';
            return $error;
          }
        }
      }
      if ($sub_inv_type == 'pre-order') {
        if (!empty($sourcing_time)) {
          $error = 'Sourcing Time Not valid in-case of Pre-order on row ';
          return $error;
        }
        if (empty($sourcing_date)) {
          $error = 'Sourcing Date cannot be empty for Pre-order on row ';
          return $error;
        }
        else {
          if (!preg_match('/^([0-9]{2})-([0-9]{2})-([0-9]{4}) ([0-9]{2}):([0-9]{2}):([0-9]{2})$/', $sourcing_date)) {
            $error = 'Invalid Sorcing date Format on row ';
            return $error;
          }
          $current_time = REQUEST_TIME;
          $sourcing_timestamp = strtotime($sourcing_date);
          $sourcing_days = round(($sourcing_timestamp - $current_time) / 86400) + 1;
          $sourcing_days_limit = variable_get('sourcing_days_limit', 0);

          if ($sourcing_days_limit != 0) {
            if ($sourcing_days > $sourcing_days_limit) {
              $error = 'Sourcing Date cannot be more than ' . $sourcing_days_limit . ' of Pre-order on row ';
              return $error;
            }
          }
        }
      }

      if (!empty($start_date)) {
        if (!preg_match('/^([0-9]{2})-([0-9]{2})-([0-9]{4}) ([0-9]{2}):([0-9]{2}):([0-9]{2})$/', $start_date)) {
          $error = 'Invalid Start date Format on row ';
          return $error;
        }
      }
      if (!empty($end_date)) {
        if (!preg_match('/^([0-9]{2})-([0-9]{2})-([0-9]{4}) ([0-9]{2}):([0-9]{2}):([0-9]{2})$/', $end_date)) {
          $error = 'Invalid End date Format on row ';
          return $error;
        }
      }
    }
    elseif ($upload_type == 'virtual') {
      $error = 'Only Virtual Inventory allowed on row';
      return $error;
    }

    if ($inv_type == 'physical' && $upload_type == 'physical') {
      if (!empty($sub_inv_type)) {
        $error = 'Sub Inventory Type Not valid in-case of Physical Inventory on row ';
        return $error;
      }
      if (!empty($inv_vendor)) {
        $error = 'Vendor  Not valid in-case of Physical Inventory on row ';
        return $error;
      }
      if (!empty($sourcing_time)) {
        $error = 'Sourcing Time  Not valid in-case of Physical Inventory on row ';
        return $error;
      }
      if (!empty($sourcing_date)) {
        $error = 'Sourcing Date  Not valid in-case of Physical Inventory on row ';
        return $error;
      }
      if (!empty($start_date)) {
        $error = 'Start Date  Not valid in-case of Physical Inventory on row ';
        return $error;
      }
      if (!empty($end_date)) {
        $error = 'End Date  Not valid in-case of Physical Inventory on row ';
        return $error;
      }
    }
    elseif ($upload_type == 'physical') {
      $error = 'Only Physical Inventory allowed on row ';
      return $error;
    }
  }

  if (!empty($product)) {
    $delta = bbd_common_get_delta_from_sku_details($product->sku, $dc_code, $inv_type, 'delta', $sub_inv_type, $vendor_id);

    if (!is_Numeric($delta)) {
      if (isset($product->field_inventory)) {
        $delta = count($product->field_inventory);
      }
      else {
        $delta = 0;
      }
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_inventory'));
      $field_collection_item->setHostEntity('commerce_product', $product);
      $field_collection_item->field_inventory_dc[LANGUAGE_NONE][0]['value'] = $dc_code;
      $field_collection_item->field_inventory_type[LANGUAGE_NONE][0]['value'] = $inv_type;

      if ($channel != 'SAP_OUTBOUND') { // Bypass for SAP Outbound
        $field_collection_item->field_sub_inventory_type[LANGUAGE_NONE][0]['value'] = $sub_inv_type;
        $field_collection_item->field_inventory_vendors[LANGUAGE_NONE][0]['tid'] = $vendor_id;
        $field_collection_item->field_sourcing_time[LANGUAGE_NONE][0]['value'] = $sourcing_time;
        if (!empty($sourcing_date)) {
          $field_collection_item->field_sourcing_date[LANGUAGE_NONE][0]['value'] = strtotime($sourcing_date);
        }
        else {
          if ($excel) {
            unset($field_collection_item->field_sourcing_date[LANGUAGE_NONE]);
          }
        }
        if (!empty($start_date)) {
          $field_collection_item->field_inventory_start_date[LANGUAGE_NONE][0]['value'] = strtotime($start_date);
        }
        else {
          if ($excel) {
            unset($field_collection_item->field_inventory_start_date[LANGUAGE_NONE]);
          }
        }
        if (!empty($end_date)) {
          $field_collection_item->field_inventory_end_date[LANGUAGE_NONE][0]['value'] = strtotime($end_date);
        }
        else {
          if ($excel) {
            unset($field_collection_item->field_inventory_end_date[LANGUAGE_NONE]);
          }
        }
      }
      if ($tran_type == 'OVERRIDE') {
        $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'] = $inventory;
      }
      if ($tran_type == 'ADD') {
        $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'] += $inventory;
      }
      if ($tran_type == 'SUBSTRACT') {
        $actual_stock = $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'];
        $new_stock = ($actual_stock - $inventory > 0) ? ($actual_stock - $inventory) : 0;
        $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'] -= $new_stock;
      }
      $field_collection_item->save();
    }
    else {
      $field_id = $product->field_inventory[LANGUAGE_NONE][$delta]['value'];
      $field_collection_item = entity_load('field_collection_item', array($field_id));
      $field_collection_item = end($field_collection_item);
      $field_collection_item->field_inventory_dc[LANGUAGE_NONE][0]['value'] = $dc_code;
      $field_collection_item->field_inventory_type[LANGUAGE_NONE][0]['value'] = $inv_type;

      if ($channel != 'SAP_OUTBOUND') { // Bypass for SAP Outbound
        $field_collection_item->field_sub_inventory_type[LANGUAGE_NONE][0]['value'] = $sub_inv_type;
        $field_collection_item->field_inventory_vendors[LANGUAGE_NONE][0]['tid'] = $vendor_id;
        $field_collection_item->field_sourcing_time[LANGUAGE_NONE][0]['value'] = $sourcing_time;
        if (!empty($sourcing_date)) {
          $field_collection_item->field_sourcing_date[LANGUAGE_NONE][0]['value'] = strtotime($sourcing_date);
        }
        else {
          if ($excel) {
            unset($field_collection_item->field_sourcing_date[LANGUAGE_NONE]);
          }
        }
        if (!empty($start_date)) {
          $field_collection_item->field_inventory_start_date[LANGUAGE_NONE][0]['value'] = strtotime($start_date);
        }
        else {
          if ($excel) {
            unset($field_collection_item->field_inventory_start_date[LANGUAGE_NONE]);
          }
        }
        if (!empty($end_date)) {
          $field_collection_item->field_inventory_end_date[LANGUAGE_NONE][0]['value'] = strtotime($end_date);
        }
        else {
          if ($excel) {
            unset($field_collection_item->field_inventory_end_date[LANGUAGE_NONE]);
          }
        }
      }
      if ($tran_type == 'OVERRIDE') {
        $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'] = $inventory;
      }
      if ($tran_type == 'ADD') {
        $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'] += $inventory;
      }
      if ($tran_type == 'SUBSTRACT') {
        $actual_stock = $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'];
        $new_stock = ($actual_stock - $inventory > 0) ? ($actual_stock - $inventory) : 0;
        $field_collection_item->field_inventory_qty[LANGUAGE_NONE][0]['value'] = $new_stock;
      }
      $field_collection_item->save();
    }
  }
}

/**
 * 
 * @param type $sku
 * @param type $dc
 * @param type $inv_type
 * @return type
 * 
 */
function bbd_common_get_delta_from_sku_details($sku, $dc, $inv_type, $return_type, $sub_inv_type = NULL, $vendor_id = NULL) {
  $query = db_select('commerce_product', 'cp');
  $query->join('field_data_field_inventory', 'fi', 'fi.entity_id = cp.product_id');
  $query->join('field_data_field_inventory_dc', 'dc', 'dc.entity_id = fi.field_inventory_value');
  $query->join('field_data_field_inventory_qty', 'iq', 'iq.entity_id = fi.field_inventory_value');
  if (!empty($inv_type)) {
    $query->join('field_data_field_inventory_type', 'fit', 'fit.entity_id = fi.field_inventory_value');
    $query->condition('fit.field_inventory_type_value', $inv_type);
    $query->condition('fit.entity_type', 'field_collection_item');
    $query->condition('fit.bundle', 'field_inventory');
  }
  if (!empty($sub_inv_type)) {
    $query->join('field_data_field_sub_inventory_type', 'fsit', 'fsit.entity_id = fi.field_inventory_value');
    $query->condition('fsit.field_sub_inventory_type_value', $sub_inv_type);
    $query->condition('fsit.entity_type', 'field_collection_item');
    $query->condition('fsit.bundle', 'field_inventory');
  }
  if (!empty($vendor_id)) {
    $query->join('field_data_field_inventory_vendors', 'fiv', 'fiv.entity_id = fi.field_inventory_value');
    $query->condition('fiv.field_inventory_vendors_tid', $vendor_id);
    $query->condition('fiv.entity_type', 'field_collection_item');
    $query->condition('fiv.bundle', 'field_inventory');
  }
  if ($return_type == 'delta') {
    $query->fields('fi', array('delta'));
  }
  if ($return_type == 'qty') {
    $query->fields('iq', array('field_inventory_qty_value'));
  }
  $query->condition('cp.sku', $sku);
  $query->condition('dc.field_inventory_dc_value', $dc);
  $delta = $query->execute()->fetchField();
  return $delta;
}

/**
 * 
 * @param type $vendor_name
 * 
 */
function bbd_common_get_term_id_from_name($name, $vocal_name) {
  $vid = taxonomy_vocabulary_machine_name_load($vocal_name)->vid;
  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('tid'));
  $query->condition('t.name', $name);
  $query->condition('t.vid', $vid);
  $vendor_id = $query->execute()->fetchField();
  return $vendor_id;
}

function batch_to_update_inventory_table_finish($success, $results, $operations) {
  drupal_set_message(t('Batch process for inventory upload is finished'));
  drupal_set_message($results['error']);
  drupal_set_message($results['success'] . ' Records updated successfully');
}

/**
 * Implements Callback of admin/management/image_upload
 */
function bbd_common_image_upload_multiple() {
  $output = '';
  $form = drupal_get_form('bbd_common_image_upload_multiple_form');
  $output .= render($form);
  return $output;
}

/**
 * Implements form_validate
 */
function bbd_common_image_upload_multiple_form($form, &$form_state) {
  $form['zip_file'] = array(
    '#type' => 'file',
    '#title' => t('Upload Zip File'),
    '#size' => 48,
    '#description' => t('Warning : MAX SIZE LIMIT : 30MB<br/>ZIP File should contain Images directly, not in Folder<br/>Image Extesions allowed are JPG,PNG,JPEG '),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Upload',
  );
  return $form;
}

function bbd_common_image_upload_multiple_form_validate($form, &$form_state) {

  global $base_url;
  $path_check = $base_url . '/sites/default/files/images/Product_images/';
  $file = file_save_upload('zip_file', array('file_validate_extensions' => array('zip'),), 'public://', FILE_EXISTS_REPLACE);

  $zip = new ZipArchive;
  $zip = zip_open(drupal_realpath($file->uri));

  $count = 0;
  $invalid_files = '';
  if (is_resource($zip)) {
    while ($zip_entry = zip_read($zip)) {
      $file_name = zip_entry_name($zip_entry);
      $extension = end(explode(".", $file_name));
      if (!in_array($extension, array('png', 'PNG', 'jpg', 'JPG', 'jpeg', 'JPEG'))) {
        $count++;
        $invalid_files .= $count . ')' . $file_name . '<br/>';
      }
    }
    $zip = zip_close($zip);

    if ($count > 0) {
      drupal_set_message(check_plain(t("An error occurred and processing did not complete.<br/>Please Upload only image files.<br/>There are $count invalid files as<br/>$invalid_files"), 'error'));
    }
    else {
      $zip = new ZipArchive;
      $res = $zip->open(drupal_realpath($file->uri));
      $number = $zip->numFiles;
      for ($i = 0; $i < $zip->numFiles; $i++) {

        $filename = $zip->getNameIndex($i);
        $zip->extractTo('sites/default/files/images/Product_images/', array($filename));

        $fid = bbd_common_check_image_exist($filename);
        if (!empty($fid)) {

          $filepath = drupal_realpath('sites/default/files/images/Product_images/' . $filename);

          //Moves the actual file from '/images/Product_images' to '/default/files/'
          //without any database changes to the file object 
          file_unmanaged_move($filepath, 'public://', FILE_EXISTS_REPLACE);


          //Clear all image styles of the product so they will be rebuilt
          //Code taken from 'image_path_flush'
          $path = 'public://' . $filename;
          $styles = image_styles();
          foreach ($styles as $style) {
            $image_path = image_style_path($style ['name'], $path);
            if (file_exists($image_path)) {
              file_unmanaged_delete($image_path);
              $purge_paths[] = str_replace('public:/', 'sites/default/files', $image_path);
            }
          }
          $purge_paths[] = 'sites/default/files/' . $filename;

          //Purge varnish cache for all images and image styles
          acquia_purge_purge_paths($purge_paths);
        }
      }

      $zip->close();
      drupal_set_message(t('Files in ' . $file->filename . ' Uploaded Successfully<br/>' . $number . ' images were uploaded<br/>You can check uploaded image using ' . $path_check . '+ image name'), 'status');
      unlink(drupal_realpath($file->uri));
    }
  }
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 * 
 * Implements hook_form_alter
 * 
 */
function bbd_common_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'bbd_common') . '/js/bbd_common.js');
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'inactive_product_activation' && $form['#id'] == 'views-exposed-form-inactive-product-activation-page') {
    $form['sku']['#type'] = 'textarea';
  }
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'commerce_products' && $form['#id'] == 'views-exposed-form-commerce-products-admin-page') {
    $form['sku']['#type'] = 'textarea';
  }

  if ($form_id == 'comment_node_product_display_form') {
    unset($form['subject']);
    unset($form['author']);
    $form['field_your_message']['#attributes']['#maxlength'] = '2000';
    $form ['field_your_message'][LANGUAGE_NONE][0]['value']['#attributes']['class'][] = 'text-jq';
    $form['markup1'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="text-count">',
      '#suffix' => '</div>',
      '#weight' => 50,
    );
    $form ['field_your_message'][LANGUAGE_NONE][0]['value']['#attributes']['maxlength'] = '2000';
    $form ['field_your_message'][LANGUAGE_NONE][0]['value']['#attributes']['class'][] = 'text-jq';
    $form['markup1'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="text-count">',
      '#suffix' => '</div>',
      '#weight' => 50,
    );
  }
  if ($form_id == 'bbd_common_frcode_popup_form') {
    $form['#after_build'][] = 'aleter_captcha_response_title';
  }
}

function aleter_captcha_response_title($form, &$form_state) {
  $form['my_captcha_element']['captcha_widgets']['captcha_response']['#title'] = "Please enter captcha image.";
  return $form;
}

function bbd_common_promotion_load($promo_id) {
  $query = db_query("SELECT P.promo_id as pid, P.selected_sku_status as selected_sku, P.*, PS.*, PB.*, PB.selected_sku_status as selected_sku_y FROM bbd_promotions P
LEFT OUTER JOIN bbd_promotions_selected_sku PS ON PS.promo_id = P.promo_id
LEFT OUTER JOIN bbd_promotions_buy_x_get_y PB ON PB.promo_id = P.promo_id
where P.promo_id IN (:promo_ids) and P.valid_upto >= UNIX_TIMESTAMP(NOW()) ORDER BY P.buy_qty DESC", array(":promo_ids" => $promo_id));
  $result = $query->fetch();
  return $result;
}

function bbd_common_promotion_without_expiry_load($promo_id) {
  $query = db_query("SELECT P.promo_id as pid, P.selected_sku_status as selected_sku, P.*, PS.*, PB.*, PB.selected_sku_status as selected_sku_y FROM bbd_promotions P
LEFT OUTER JOIN bbd_promotions_selected_sku PS ON PS.promo_id = P.promo_id
LEFT OUTER JOIN bbd_promotions_buy_x_get_y PB ON PB.promo_id = P.promo_id
where P.promo_id IN (:promo_ids) ORDER BY P.buy_qty DESC", array(":promo_ids" => $promo_id));
  $result = $query->fetch();
  return $result;
}

function bbd_common_prodcut_price_descending($products, $type = NULL) {
  $qty_processed_prodcuts = array();
  foreach ($products as $key => $product) {
    $qty_processed_prodcuts[$key]['quantity'] = $product['quantity'];
    $qty_processed_prodcuts[$key]['SKU'] = $product['SKU'];
    if ($type == 'ALL') {
      $qty_processed_prodcuts[$key]['DC'] = $product['DC'];
      $qty_processed_prodcuts[$key]['INV_TYPE'] = $product['INV_TYPE'];
      $qty_processed_prodcuts[$key]['SUB_INV_TYPE'] = $product['SUB_INV_TYPE'];
      $qty_processed_prodcuts[$key]['SOURCING_TIME'] = $product['SOURCING_TIME'];
      $qty_processed_prodcuts[$key]['SOURCING_DATE'] = $product['SOURCING_DATE'];
      $qty_processed_prodcuts[$key]['QTY'] = $product['QTY'];
      $qty_processed_prodcuts[$key]['VENDOR_ID'] = $product['VENDOR_ID'];
      $qty_processed_prodcuts[$key]['req_qty'] = $product['req_qty'];
      $qty_processed_prodcuts[$key]['requested_quantity'] = $product['requested_quantity'];
    }
  }
  rsort($qty_processed_prodcuts);
  $processed_prodcuts = array();
  foreach ($qty_processed_prodcuts as $key => $product) {
    $commerce_product = commerce_product_load_by_sku($product['SKU']);
    $processed_prodcuts[$key]['price'] = (int) $commerce_product->commerce_price[LANGUAGE_NONE][0]['amount'];
    $processed_prodcuts[$key]['SKU'] = $product['SKU'];
    $processed_prodcuts[$key]['quantity'] = $product['quantity'];
    if ($type == 'ALL') {
      $processed_prodcuts[$key]['DC'] = $product['DC'];
      $processed_prodcuts[$key]['INV_TYPE'] = $product['INV_TYPE'];
      $processed_prodcuts[$key]['SUB_INV_TYPE'] = $product['SUB_INV_TYPE'];
      $processed_prodcuts[$key]['SOURCING_TIME'] = $product['SOURCING_TIME'];
      $processed_prodcuts[$key]['SOURCING_DATE'] = $product['SOURCING_DATE'];
      $processed_prodcuts[$key]['QTY'] = $product['QTY'];
      $processed_prodcuts[$key]['VENDOR_ID'] = $product['VENDOR_ID'];
      $processed_prodcuts[$key]['req_qty'] = $product['req_qty'];
      $processed_prodcuts[$key]['requested_quantity'] = $product['requested_quantity'];
    }
  }
  rsort($processed_prodcuts);
  return $processed_prodcuts;
}

function bbd_common_get_pids_from_category_tid($tid) {
  $nids = bbd_common_get_nids_from_category_tid($tid);
  $pid_array = array();
  foreach ($nids as $nid) {
    $pids = bbd_common_get_pid_from_nid($nid->entity_id);
    foreach ($pids as $pid) {
      if (!in_array($pid->product_id, $pid_array)) {
        $pid_array[] = $pid->product_id;
      }
    }
  }
  return $pid_array;
}

function bbd_common_get_skus_from_category_tid($tid) {
  $nids = bbd_common_get_nids_from_category_tid($tid);
  $sku_array = array();
  foreach ($nids as $nid) {
    $pids = bbd_common_get_pid_from_nid($nid->entity_id);
    foreach ($pids as $pid) {
      if (!in_array($pid->product_id, $sku_array)) {
        $sku_array[] = bbd_common_get_sku_from_pid($pid->product_id);
      }
    }
  }
  return $sku_array;
}

function bbd_common_get_mrp_from_pid($pid) {
  $q = db_select('field_data_field_product_mrp', 'fp');
  $q->fields('fp', array('field_product_mrp_amount'));
  $q->condition('fp.entity_id', $pid);
  $res = $q->execute()->fetchField();
  return $res;
}

function bbd_common_get_price_from_pid($pid) {
  $q = db_select('field_data_commerce_price', 'fp');
  $q->fields('fp', array('commerce_price_amount'));
  $q->condition('fp.entity_id', $pid);
  $res = $q->execute()->fetchField();
  return $res;
}

/**
 * function payback on pdp page
 */
function payback_pdp_form($form, &$form_state, $order_total) {
// $order_id = $_SESSION['website_variables']['order_id'];
// $order = commerce_order_load($order_id);
// $order_total = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $payback_points = variable_get('payback_points');
  $payback_price = variable_get('payback_price');
  global $user;
  $res = get_payback_value_by_uid($uid);
  $payback_card = $res[0]->field_payback_value;

  $payback_points = round($order_total / $payback_price * $payback_points);

  $form['wrapper_pay'] = array(
    '#prefix' => '<div class="calulation-div"><div class= "payback"><label>Earn <span>' . $payback_points . '</span> Points</label>',
    '#suffix' => '</div>',
  );
  if (!empty($payback_card) && $user->uid != 0) {
    $payback_card_nos = str_split($payback_card, 4);
  }
  else {
    $payback_card_nos = '';
  }



  $form['wrapper_pay']['payback_card1'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => array('class' => array('payback_card_inputs')),
    '#default_value' => $payback_card_nos[0],
  );
  $form['wrapper_pay']['payback_card2'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => array('class' => array('payback_card_inputs')),
    '#default_value' => $payback_card_nos[1],
  );
  $form['wrapper_pay']['payback_card3'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => array('class' => array('payback_card_inputs')),
    '#default_value' => $payback_card_nos[2],
  );
  $form['wrapper_pay']['payback_card4'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => array('class' => array('payback_card_inputs')),
    '#default_value' => $payback_card_nos[3],
  );

  /* if (!empty($payback_card)) {
    $form['wrapper_pay']['payback_card1']['#disabled'] = TRUE;
    $form['wrapper_pay']['payback_card2']['#disabled'] = TRUE;
    $form['wrapper_pay']['payback_card3']['#disabled'] = TRUE;
    $form['wrapper_pay']['payback_card4']['#disabled'] = TRUE;

    $form['wrapper_pay']['submit'] = array(
    '#suffix' => '</div>',
    );
    }
    else { */
  $form['wrapper_pay']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
    '#name' => 'add_payback',
    '#ajax' => array(
      'callback' => 'bbd_cart_payback_ajax_submit',
      'wrapper' => 'error_wrap',
    ),
    '#suffix' => '</div>',
  );
// }
  $form['error_wrapper'] = array(
    '#prefix' => '<div id ="error_wrap">',
    '#suffix' => '</div>',
    '#type' => 'markup',
  );
  return $form;
}

/**
 * hook_node_preprocess
 */
function bbd_common_preprocess_node(&$vars) {
  global $user;
  global $base_url;

  $channel = bbd_common_get_channel();
  $arg0 = arg(0);
  $arg1 = arg(1);
  unset($vars['comments']['comment_form']['author']['name']);
  $node = node_load($arg1);
  $node_type = $node->type;
  $node_id = $node->nid;
  drupal_add_js(array('variant' => array('node' => $node_id)), array('type' => 'setting'));

  if ($node_type == 'offer_page') {
    $uri_strip = $node->field_image_title_offerpage[LANGUAGE_NONE][0]['uri'];
    $imagestrip = theme('image_style', array('style_name' => 'strip_banner_offer_page',
      'path' => $uri_strip,
      'getsize' => TRUE,
      'alt' => 'No image',
      'title' => ''));
    $uri_banner = $node->field_image_offer_page[LANGUAGE_NONE][0]['uri'];
    $imagebanner = theme('image_style', array('style_name' => 'banner_main_offer_page',
      'path' => $uri_banner,
      'getsize' => TRUE,
      'alt' => 'No image',
      'title' => ''));
    $link_imagebanner = $node->field_link_main_offerpage[LANGUAGE_NONE][0]['value'];
    $vars['strip_banner'] = $imagestrip;
    $vars['img_banner'] = '<a href="' . $link_imagebanner . '">' . $imagebanner . '</a>';
    $countall = count($node->field_imagelink_offerpage[LANGUAGE_NONE]);
    $count = 0;
    foreach ($node->field_imagelink_offerpage[LANGUAGE_NONE] as $key => $offer) {

      $entity_banner = $offer['value'];
      $entitys = entity_load('field_collection_item', array($entity_banner));
      $count++;
      $count2++;
      foreach ($entitys as $key => $val) {

        $uri_each_banner = $val->field_image_offer_page[LANGUAGE_NONE][0]['uri'];
        $link_each_banner = $val->field_link_offer_page[LANGUAGE_NONE][0]['value'];
        $imageeachbanner = theme('image_style', array('style_name' => 'small_banner_ofpage',
          'path' => $uri_each_banner,
          'getsize' => TRUE,
          'alt' => 'No image',
          'title' => ''));
//$link_each_banner
        if ($count == 1) {
          $desclass = 'first';
        }if ($count == 2) {
          $desclass = 'last';
        }
        $html .= '<div class ="' . $desclass . '"><a href="#">' . $imageeachbanner . '</a></div>';
        if ($count == 2 || $count2 == $countall) {
          $vars['each_banner'] .= '<div class= "outersmall">'
              . $html .
              '</div>';

          $count = 0;
          $html = '';
        }
      }
    }
  }
  if (isset($arg0) && isset($arg1)) {

    if (is_numeric($arg1)) {
      ctools_include('modal');
      ctools_modal_add_js();

      if ($node_type == 'product_display') {
        $vars['user'] = $user;
        $path = 'user/login';
        $text = 'Login';
        if ($user->uid != 0) {
          $text = 'Write a Review';
          $path = '#';
        }
        $vars['write_review'] = '<td class="wrt-revw-btn"><a  id = "link-rev" href="' . $path . '">' . $text . '</a></td>';


        if (count($node->field_product_reference[LANGUAGE_NONE]) > 1) {
          $vars['variants'] = '<div class="empty_div"></div>';
        }
        else {
          $vars['variants'] = '';
        }
        $pid = bbd_common_get_pid_from_nid($arg1);
        $product_id = $res[0]->product_id;

        $mahabachat_on_off_value = mahabachat_get_on_off_value($arg1);
        if (!empty($mahabachat_on_off_value)) {
          $vars['mahabachat_logo'] = '<td class="5days-mahabachat-logo"><img src ="' . $base_url . '/sites/all/themes/bbd/images/tag-pdp-jan.png"></td>';
        }

        $result = bbd_performance_get_flat_table_data_from_nid($arg1, $product_id);
        if (empty($result)) {
          $result = bbd_category_nid_mini_load($arg1);
        }
        $wishlist_res = commerce_wishlist_in_wishlist($user->uid, $result->product_id, $result->nid);
        $token = drupal_get_token();
        $login_to_wish_url = $base_url . '/login-to-wishlist';
        if (!$user->uid) {
          $wish_list = '<div class="login-to-wishlist"><li class="add-w"><a href ="' . $login_to_wish_url . '" uid ="' . $user->uid . '" product_id ="' . $result->product_id . '" nid="' . $result->nid . '" token="' . $token . '">Add to Wishlist</a></li></div>';
        }
        else {
          if (!empty($wishlist_res)) {
            $wish_list = '<div class="added-to-wishlist"><li class="add-w"><a class ="added-to-wishlist" uid ="' . $user->uid . '" product_id ="' . $result->product_id . '" nid="' . $result->nid . '" token="' . $token . '">Added to Wishlist</a></li></div>';
          }
          else {
            $wish_list = '<div class="add-to-wishlist"><li class="add-w"><a class ="add-wish-list" uid ="' . $user->uid . '" product_id ="' . $result->product_id . '" nid="' . $result->nid . '" token="' . $token . '">Add to Wishlist</a></li></div>';
          }
        }
        $vars['wishlist'] = $wish_list;

        $cart = bbd_category_add_to_cart_form_html($result);
        $mrp_res = $result->field_product_mrp_amount / 100;
        $price_res = $result->commerce_price_amount / 100;

        $bachat = $mrp_res - $price_res;
        $vars['bachat_res'] = '<div class="mrp-save"></div>';
        $vars['mrp_display'] = '<div class="mrp-proper"></div>';
        //TO DO
//        $x = $vars['content']['product:sku']['#markup'];
//        $y = explode("SKU: ", $x);
//        $y = $y[1];
//        $z = explode("</div>", $y);
//        $sku = $z[1];
//        $sku = trim($sku);
        $sku = bbd_common_get_sku_from_pid($pid[0]->product_id);
        if ($bachat > 0 && display_mrp(strval($sku))) {

          $vars['clstoggle'] = 'mrp_is_not_sp';
          $vars['mrp_pack'] = '<div class="mrp-actual mrp_is_not_sp">
                      <div class="rs-div">Rs.&nbsp;</div>
                       ' . number_format($price_res, 0) . ' </div>';
          $class_notify = "mrp_is_not_sp_notify";
        }
        else {
          $vars['clstoggle'] = 'mrp_is_sp';
          $vars['mrp_pack'] = '<div class="mrp-actual mrp_is_sp">
                      <div class="rs-div">Rs.&nbsp;</div>
                       ' . number_format($price_res, 0) . ' </div>';
          $class_notify = "mrp_is_sp_notify";
        }
        if ($bachat > 0 && display_mrp(strval($sku))) {
          $vars['bachat_res'] = '<div class="mrp-save">
                      <div class="rs-div">Save Rs.&nbsp;</div>
                      ' . number_format($bachat, 0) . ' </div>';
          $vars['mrp_display'] = '<div class="mrp-proper mrp-cross">
                      <div class="rs-div">Rs.&nbsp;</div>
                       ' . number_format($mrp_res, 0) . ' </div>';
        }

        $uriprod = bbd_common_get_uri_from_fid_of_product_pid($pid[0]->product_id);
        $vars['product_sku'] = bbd_common_get_sku_from_pid($pid[0]->product_id);

        $imageprod = theme('image_style', array('style_name' => 'product_detail_img',
          'path' => $uriprod,
          'getsize' => TRUE,
          'alt' => 'No image',
          'title' => ''));

        $vars['product_detail_image'] = $imageprod;
        $customer_supp = bbd_web_get_customer_support_data();
        $vars['order_ph'] = '<div class="r-order ' . $class_notify . '"><span class="o1">Order on Phone</span><span class="o2">(between 8 am - 10 pm)</span><span class="o3">' . $customer_supp->field_toll_free_header_value . '</span></div>';
        if ($pid) {
          $vars['custom_buttons'] = '<div class="button-region">'
              . '<input id="edit-submit" type="submit" class="form-submit" value="Continue Shopping" onClick="javascript:location.href = \'/' . BROWSE_CATALOG_PARAM . '/' . $_SESSION[$channel]['userID'] . '/' . $_SESSION[$channel]['type'] . '\';" style="margin-right: 10px;" />';

          if (isset($_SESSION[$channel]['order_id'])) {
            $vars['custom_buttons'] .='<input id="edit-submit" type="submit" class="form-submit" value="Go to Cart" onClick="javascript:location.href = \'/customer-cart/' . $_SESSION[$channel]['order_id'] . '\';" />';
          }
          $vars['custom_buttons'] .= '</div>';
          if (isset($pid[0]->product_id)) {
            $uri = urlencode(current_path());
            $commerce_product = commerce_product_load($pid[0]->product_id);
            $product_specs = bbd_product_specification_get_specification_by_sku($commerce_product->sku);
            $product_specs_display = bbd_common_get_product_specs_from_json($product_specs);
            if (empty($product_specs_display)) {
              $feature_variable = 1;
            }

            $shipping_charge = $ship_cond = variable_get('shipping_charges');

            if (isset($commerce_product->field_shipping_charge[LANGUAGE_NONE][0]['amount']) && $commerce_product->field_shipping_charge[LANGUAGE_NONE][0]['amount'] > 0) {
              $vars['pdp_shipping'] = '<div class="pdp-shipping"> + Rs. ' . ($commerce_product->field_shipping_charge[LANGUAGE_NONE][0]['amount'] / 100) . ' (Shipping charge)</div>';
            }
            else {
              if ($commerce_product->commerce_price[LANGUAGE_NONE][0]['amount'] > ($ship_cond * 100)) {
                $vars['pdp_shipping'] = '<div class="pdp-shipping">(Free home delivery)';
              }
              else if ($commerce_product->commerce_price[LANGUAGE_NONE][0]['amount'] < ($ship_cond * 100)) {
                $vars['pdp_shipping'] = '<div class="pdp-shipping">(Free home delivery if order total is greater than ' . $ship_cond . ')</div>';
              }
            }
          }
          $top_features = drupal_json_decode($commerce_product->field_product_specification[LANGUAGE_NONE][0]['value']);
          $top_features_display = bbd_common_get_top_feature_from_json($top_features);

          $top_features_display = bbd_common_get_top_feature_from_json($top_features, $feature_variable);

          $promo_ids = bbd_promotions_get_promo_id_from_node_object($node);

          //To check If PDP page Has offer or not , According To Which Set key features up or below the price.
          if (!empty($promo_ids)) {
            $vars['top_features_with_offer'] = $top_features_display;
          }
          else {
            $vars['top_features'] = $top_features_display;
          }

          $vars['product_spec'] = $product_specs_display;
          $vars['prod_title'] = $commerce_product->title;
          $vars['sku'] = $commerce_product->sku;
          $vars['qty'] = $p_stock = $commerce_product->commerce_stock[LANGUAGE_NONE][0]['value'];
          // = urlencode(current_path());
          $uri = request_uri();
          $uri = ltrim($uri, '/');
          $uri = urlencode($uri);
          if ($p_stock <= 0) {
            $vars['custom_cart_button'] = '<div class = "submit-cart-ajax" style="display:none;"><div class="out-of-stock form-button-disabled"></div></div>';
          }
          else {
            $vars['custom_cart_button'] = '<div class = "submit-cart-ajax"> ' . l(t('Buy Now'), 'add-cart-ctool/nojs/1/' . $uri . '/' . $pid[0]->product_id, array('attributes' => array('class' => 'ctools-use-modal cart-clicked-item'))) . '</div>';
          }
          if ($vars['qty'] <= 0 && module_exists('bbd_notify')) {
            //$vars['notify'].= '<div class="pdp-notify"></div>';
            $vars['notify'].= '<div class="pdp-notify bbd-prod-notify ' . $class_notify . '">';
            $vars['notify'].= '<a class="colorbox-inline" href="width=500&height=200&inline=true#notify-' . $node->nid . '">Notify Me</a>';
            $vars['notify'].= '<div style="display:none"><div id="notify-' . $node->nid . '">' . drupal_render(drupal_get_form('bbd_notify_form_' . $node->nid, $result)) . '</div></div>';
            $vars['notify'].= '</div>';
            drupal_add_js(drupal_get_path('module', 'bbd_notify') . '/js/bbd_notify.js');
//    $vars['notify'] .= '<script>Drupal.behaviors.notifyMe = {
//    attach: function(context, settings) {
//        jQuery(document).ready(function($) {
//            $(document).ajaxComplete(function() {
//                attach_notify_events();
//                console.log("1");
//
//            });
//            console.log("2");
//            attach_notify_events();
//
//        });
//        function attach_notify_events() {
//             console.log("3");
//            jQuery(".bbd-prod-notify a").colorbox({inline: true, width: "50%", href: "#notify-' . $node->nid . '", className: "order-notify-popup",
//
//         onClosed: function() {
//                 
//          }
//            });
//        }
//    }
//};</script>';
          }
          else {
            $vars['notify'].= '<div class="pdp-notify" style="display:none;"></div>';
            $vars['notify'] = '<div class="bbd-prod-notify ' . $class_notify . '"></div>';
          }
          $vars['assortment_flag'] = $commerce_product->field_assortment_flag[LANGUAGE_NONE][0]['value'];
          $vars['payback_form'] = drupal_render(drupal_get_form('payback_pdp_form', $price_res));
// $vars['payback_form'] ='';
//          $block_2 = block_load('bbd_performance', 'special_offers');
//
//          $data_options = sharethis_get_options_array();
//          $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
//          $mPath = url($_GET['q'], array('absolute' => TRUE));
//          $mTitle = drupal_get_title();
//          NEXT LINE IS COMMENT IN REAL CODE
//  $vars['share_prod'] = ' <div class="share-pop"><div class="pop-close"><a href="#" class="fb-close">X</a></div>' . sharethis_get_button_HTML($data_options, $mPath, $mTitle) . '</div>';
//          $output_block2 = drupal_render(_block_get_renderable_array(_block_render_blocks(array($block_2))));
//          $vars['special_offer'] = $output_block2;


          $you_may_like_block_new = block_load('bbd_performance', 'you_may_also_like');
          $output_you_may_like_block_new = drupal_render(_block_get_renderable_array(_block_render_blocks(array($you_may_like_block_new))));
          $vars['you_like_new'] = $output_you_may_like_block_new;


          $vars['cart'] = $cart;

          // Get Term Id
          $mc_cat_id = $node->field_product_master_category['und']['0']['tid'];
// Get Term Name
          $term_name = bbd_common_get_term_name_from_tid($mc_cat_id);
          // Get root Term Id form Leaf Term Id.
          $root_term_id = get_root_tid_from_mc_flat_table_using_leaf_tid($mc_cat_id);
          // Get root Name from root Id
          $root_term_name = bbd_common_get_term_name_from_tid($root_term_id);

          //For Mobile pdp show Warranty of 1 year.
          if ($term_name == "Mobiles") {
            $vars['warranty'] = "<h1 class='mobile-text-heading'>WARRANTY</h1>"
                . "<span class='mobile-text'>1 year manufacturer warranty for Phone and 6 months warranty for in the box accessories.</span>";
          }
          //For Electronic pdp show Warranty.
          else if ($root_term_name == "Electronics") {

            $vars['warranty'] = "<h1 class='electronic-text-heading'>WARRANTY</h1>"
                . "<span class='electronic-text'>Genuine warranty as per manufacturer.</span>";
          }
//          else {
//            $vars['warranty']='';
//          }


          if ($vars['qty'] > 0) {
//            $upper_limit = $commerce_product->field_delivery_upper_limit[LANGUAGE_NONE][0]['value'];
//            $lower_limit = $commerce_product->field_delivery_lower_limit[LANGUAGE_NONE][0]['value'];
//            if (!empty($upper_limit) && !empty($lower_limit)) {
//              if (is_numeric($upper_limit) && is_numeric($lower_limit)) {
//                if ($upper_limit > $lower_limit) {
//                  $vars['avail'] = 'IN <span>STOCK</span><p>Delivered within ' . $lower_limit . ' - ' . $upper_limit . ' working days</p>';
//                }
//                else {
//                  $vars['avail'] = 'IN <span>STOCK</span><p></p>';
//                }
//              }
//              else {
//                $vars['avail'] = 'IN <span>STOCK</span><p></p>';
//              }
//            }
//            else {
//              $vars['avail'] = 'IN <span>STOCK</span><p></p>';
//            }
            $inv_types = bbd_common_get_inventory_types_from_sku($commerce_product->sku);
            $vars['wishlist'] = '<div class="wishlist-pdp"> ' . $wish_list . '</div>';
            if (in_array('physical', $inv_types)) {
              $vars['avail'] = '<span id="stock-message" class="instock">IN STOCK:<p>Usually ships in 1 day</p></span>';
            }
            else {
              $vars['avail'] = '<span id="stock-message class="instock">IN STOCK:<p>Usually ships in 2-3 days</p></span>';
            }

            $vars['pin_form'] = '<div class="chck-davail"><p>Check Delivery Availability</p>
          <div class="verify-pin"><div id="pincode_serviceability" nid=' . $arg1 . '>'
                . drupal_render(drupal_get_form('bbd_nearest_pincode_service_form')) . '</div></div></div>';
          }
          else {
            $vars['wishlist'] = '<div class="wishlist-pdp" style="display:none;"> ' . $wish_list . '</div>';
            $vars['avail'] = '<span id="stock-message" class="outofstock">OUT OF STOCK</span>';
            $vars['oostock'] = 1;

            $vars['pin_form'] = '<div class="chck-davail" style="display: none;"><p>Check Delivery Availability</p>
          <div class="verify-pin"><div id="pincode_serviceability" nid=' . $arg1 . '>'
                . drupal_render(drupal_get_form('bbd_nearest_pincode_service_form')) . '</div></div></div>';
          }
          drupal_add_js(drupal_get_path('module', 'bbd_nearest_pincode') . '/bbd_nearest_pincode.js', 'file');


          // Return Policy Text and Link
          $vars['return_policy'] = '<a href="' . $base_url . '/content/easy-returns" class="esay-result-ul">Easy Return Policy</a><br>'
              . '<span class="esay-result-li">*Condition Apply</span>';

          $promo_ids = bbd_promotions_get_promo_id_from_node_object($node);
          if (!empty($promo_ids)) {
            $vars['offer_available'] = '<span style="color:red">Offer Available</span>';
            $promo = '';
            $promo_id = $promo_ids[0];
            $promotion_load = bbd_common_promotion_load($promo_id);
            $promo_des = $promotion_load->offer_description;
            $promo_type = $promotion_load->promo_type;

            $mini_node = bbd_performance_get_flat_table_data_from_nid($arg1, $pid[0]->product_id);
            if (empty($mini_node)) {
              $mini_node = bbd_category_nid_mini_load($arg1);
            }
            $promo = bbd_promotions_html_of_offers($promo_ids, $promo_id, $promo_des, $promo_type);
            $vars['promo_desc'] = $promo;
            $vars['offer_image'] = $imageprodoffer;
            $vars['offer_sku'] = $first_offer_sku;
            $vars['offer_image2'] = $imageoffer_buy;
            if (!empty($promo_ids)) {
              $vars['promotion'] = $promo;
              $vars['offer'] = $promo;
            }
            else {
              $vars['promotion'] = 'No Promotions';
            }
          }
        }
      }//if product display
    }
  }
}

function bbd_common_block_info() {
  $blocks['similar_products'] = array(
    'info' => t('Similer Products'),
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $blocks['footer_brands'] = array(
    'info' => t('Footer Brands'),
  );
  $blocks['sort_filter_responsive'] = array(
    'info' => t('sort and filter for responsive'),
  );
  ##### OXIGEN to edit the footer #### 
  $blocks['secure_payment'] = array(
    'info' => t('Secure Payment Footer'),
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'customer-shipping*\ncustomer-login*\ncustomer-checkout*\ncustomer-payment*\ncheckout/*/complete',
  );
  ##### OXIGEN to edit the footer ####
  return $blocks;
}

function bbd_common_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'similar_products':
      $block['subject'] = t('Similar Products');
      $block['content'] = array(
        '#markup' => bbd_common_display_similar_products()
      );
      break;
    case 'footer_brands':
      $block['subject'] = t('Footer Brands');
      $block['content'] = bbd_common_display_footer_brands();
      break;
    case 'sort_filter_responsive':
      $block['subject'] = t('Sort and Filter For Responsive');
      $block['content'] = get_sort_filter_data();
      break;
    case 'secure_payment': ##### OXIGEN to edit the footer ####
      $block['subject'] = NULL;
      $block['content'] = get_secure_payment_footer_data();
      break;
  }
  return $block;
}

##### OXIGEN to edit the footer ####

function get_secure_payment_footer_data() {
  global $user;
  $output = '<div class="sp-footer secure-pay-footer">';
  $oxipartner = variable_get('oxi_partner_name', '');
  if (function_exists('check_franchise_is_partner_using_uid')) {
    $partner_status = check_franchise_is_partner_using_uid($user->uid, $oxipartner);
  }

  if (empty($partner_status)) {
    $output .= '<div class="payment-method"><span>Payment</span><img src="/sites/all/themes/bbd/images/payment-method.png" /></div>';
  }
  $output .= '<div class="secure-payment">
                <h2 class="block-title">Secure Payment</h2>
                <div class="ssl-txt">Our Checkout is secured by latest SSL</div>
              </div>
            </div>';
  return $output;
}

##### OXIGEN to edit the footer ####

function get_sort_filter_data() {
  $arg0 = arg(0);
  $arg1 = arg(1);
  if (($arg0 == "taxonomy") && ($arg1 == "term")) {
    $tid = arg(2);
    $taxonomy_term = taxonomy_term_load($tid);
    $parent_tid = $taxonomy_term->tid;
    $isleaf = db_select('taxonomy_term_hierarchy', 'h')->fields('h')->condition('h.parent', $parent_tid)->execute()->fetchAll();
    if (empty($isleaf)) {
      $output = '<div class="sortBy-Filter-Option"><div>
                <div class="sortBy"><div class="toggle sorttype"><span class="icon"></span><span class="alterText"></span></div>' . drupal_render(drupal_get_form('sort_by_responsive_form')) . '</div>
                <div class="filterBy"><span class="icon"></span><a>Filter</a></div>
            </div>
            </div>';
      return $output;
    }
    else {
      return FALSE;
    }
  }
//  l('Filter', 'javascript:',  array('external' => TRUE))
}

function bbd_common_display_footer_brands() {
  $output = '<div class="footer-logo">
          <ul class="footer_nav_store">
            <li class="footer_nav_store central"><a href="javascript:void(0)"></a></li>
            <li class="footer_nav_store planet-sports"><a href="javascript:void(0)"></a></li>
            <li class="footer_nav_store fbb"><a href="javascript:void(0)"></a></li>
            <li class="footer_nav_store food-bazaar"><a href="javascript:void(0)"></a></li>
            <li class="footer_nav_store ezone"><a href="javascript:void(0)"></a></li>
          </ul>
        </div>';
  $block['#markup'] = $output;
  return $block;
}

function bbd_common_display_similar_products() {
  $nid = arg(1);
  $nid_details = node_load($nid);

  $nids = bbd_common_get_similar_product_from_nid($nid_details);
  $c = 0;
  $output = '<div class="similar-products">
    <h1>BBD Promotions</h1>
    <ul>';
  foreach ($nids as $n) {
    $c++;
    if ($c == 1) {
      $class = 'first';
    }
    else if ($c % 3 == 0) {
      $class = 'last';
    }
    $commerce_product = commerce_product_load($n->product_id);
    $title = $commerce_product->title;
    $sku = $commerce_product->sku;
    $uri = bbd_common_get_uri_from_fid_of_product_pid($n->product_id);
    $price = $commerce_product->commerce_price[LANGUAGE_NONE][0]['amount'];
    $desc = $commerce_product->field_product_short_description[LANGUAGE_NONE][0]['value'];
    $decsc_len = strlen($desc);
    if ($decsc_len > 38) {
      $desc = substr($desc, 0, 38);
    }
    $imageprod = theme('image_style', array('style_name' => 'thumbnail',
      'path' => $uri,
      'getsize' => TRUE,
      'alt' => 'No image',
      'title' => ''));

    $output .= '
      <li class="' . $class . '">
        <div class="sp-img">' . $imageprod . '</div>
        <div class="sp-data">
          <p class="sp-desc">' . $desc . '</p>
          <p class="sp-rs"><span class="WebRupee">Rs. </span>' . number_format($price, 2) . ' </p>
          <a href="#" class="sp-view">View Details</a>
        </div>
      </li>
      ';
  }
  $output .= '</ul>
  </div>';

  return $output;
// echo$nid_details;
}

/**
 * 
 * @param type $promo_id
 * @return type
 * Returns offer description from promo id
 */
function bbd_common_get_promo_description_from_promo_id($promo_id) {
  $q = db_select('bbd_promotions', 'p');
  $q->fields('p', array('offer_description'));
  $q->condition('p.promo_id', $promo_id);
  $offer_name = $q->execute()->fetchField();
  return $offer_name;
}

/**
 * 
 * @param type $promo_id
 * @return type
 * Returns offer description from promo id
 */
function bbd_common_get_promo_type_from_promo_id($promo_id) {
  $q = db_select('bbd_promotions', 'p');
  $q->fields('p', array('promo_type'));
  $q->condition('p.promo_id', $promo_id);
  $offer_name = $q->execute()->fetchField();
  return $offer_name;
}

/**
 * 
 * @param type $promo_id
 * @return type
 * Returns sku details fromsku
 */
function bbd_common_get_sku_detaiil_from_sku($sku) {
  $q = db_select('commerce_product', 'p');
  $q->fields('p', array('title'));
  $q->condition('p.sku', $sku);
  $skudetail = $q->execute()->fetchField();
  return $skudetail;
}

/**
 * 
 * @param type $top_features
 * @return string
 * Returns Top Features
 * 
 */
function bbd_common_get_top_feature_from_json($top_features, $feature_variable = NULL) {
  ############### VIkee && Hardik ############
  drupal_add_js(drupal_get_path('module', 'bbd_common') . '/js/bbd_common_vt_slider.js');
  ##################### END #####################################
  drupal_add_js(drupal_get_path('module', 'bbd_common') . '/js/bbd_common.js');

  $top_features_output = '<ul>';
  if (!empty($top_features['feature1'])) {
    $top_features_output .= '<li>' . $top_features['feature1'] . '</li>';
  }
  if (!empty($top_features['feature2'])) {
    $top_features_output .= '<li>' . $top_features['feature2'] . '</li>';
  }
  if (!empty($top_features['feature3'])) {
    $top_features_output .= '<li>' . $top_features['feature3'] . '</li>';
  }
  if (!empty($top_features['feature4'])) {
    $top_features_output .= '<li>' . $top_features['feature4'] . '</li>';
  }
  $top_features_output .= '</ul>';
  if ($feature_variable != 1) {
    $top_features_output .= '<a class="click-more-details" href="javascript:void(0)">Click for more details</a>';
  }

  return $top_features_output;
}

/**
 * 
 * @param type $product_specs
 * @return type
 * Returns Product Specification
 */
function bbd_common_get_product_specs_from_json($product_specs) {
  $output = '';
  $header = '';
  $rows = array();
  foreach ($product_specs as $key => $value) {
    $row = array();
    $row[] = array('data' => ucfirst($key));
    $row[] = array('data' => ucfirst($value));
    $rows[] = array('data' => $row);
  }
  if ($rows) {
    $output .= '<h2 class="pdesc-title">Product Features</h2>';
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  return $output;
}

/**
 * 
 * @param type $line_item
 * @return type
 * Return Dc code used in lint item
 */
function bbd_common_get_dc_code_from_line_item($line_item) {
  $field_collection = field_collection_item_load($line_item->field_dc_lineitem[LANGUAGE_NONE][0]['value']);
  return $field_collection->field_dc_code[LANGUAGE_NONE][0]['value'];
}

/**
 * 
 * @param type $sku
 * Returns no of orders from last month of particular sku
 */
function bbd_common_get_no_of_orders_since_last_month_from_sku($sku) {
  $time = REQUEST_TIME;
  $expire_time = strtotime("-1 month", $time);
  $order_status = array(
    'payment_refunded',
    'replacement_in_process',
    'partial_shipped',
    'partial_returned',
    'partial_processed',
    'replacement_processed',
    'replace_completed',
    'shipped',
    'return_to_seller_in_process',
    'partial_delivered',
    'order_placed',
    'delivered',
    'delivery_attempted',
    'in_process',
    'order_confirmed',
    'jcaps_success',
    'delivery',
  );

  $query = db_select('commerce_line_item', 'cli');
  $query->join('commerce_order', 'co', 'cli.order_id = co.order_id');
  $query->addExpression('COUNT(cli.order_id)', 'total_sale');
  $query->condition('cli.changed', $expire_time, '<');
  $query->condition('cli.line_item_label', $sku);
  $query->condition('co.status', $order_status, 'IN');
  $order_ids = $query->groupBy('cli.order_id')->execute()->fetchField();
  return $order_ids;
}

/**
 * Implement hook_mail().
 */
function bbd_common_mail($key, &$message, $params) {
  switch ($key) {
    case 'zero_inventory_report':
      $prev_date = date('d-m-Y', strtotime('-10 day'));
      $date = date('d-m-Y');
      $filename = 'inventory-report-' . $date . '.csv';
      $prev_filename = 'inventory-report-' . $prev_date . '.csv';
      if (file_exists("sites/default/files/" . $prev_filename))
        unlink("./sites/default/files/" . $prev_filename);
      if (file_exists("sites/default/files/" . $filename))
        unlink("./sites/default/files/" . $filename);
      $csv_headers_data = array('NID', 'SKU', 'DC', 'Qty', 'Status');
      $file = fopen("./sites/default/files/" . $filename, "w");
      fputcsv($file, $csv_headers_data, ',', '"');
      $query = db_select('node', 'n');
      $query->join('field_data_field_product_reference', 'f', 'n.nid = f.entity_id');
      $query->join('commerce_product', 'c', 'c.product_id = f.field_product_reference_product_id');
      $query->join('field_data_field_inventory', 'fi', 'c.product_id = fi.entity_id');
      $query->join('field_data_field_inventory_dc', 'dc', 'dc.entity_id = fi.field_inventory_value');
      $query->join('field_data_field_inventory_qty', 'qty', 'qty.entity_id = fi.field_inventory_value');
      $query->fields('c', array('sku'));
      $query->fields('dc', array('field_inventory_dc_value'));
      $query->fields('qty', array('field_inventory_qty_value'));
      $query->fields('n', array('nid', 'status'));
      $result = $query->execute()->fetchAll();
      $data = array();
      foreach ($result as $v) {
        $row = array();
        $row[] = $v->nid;
        $row[] = $v->sku;
        $row[] = $v->field_inventory_dc_value;
        $row[] = $v->field_inventory_qty_value;
        $row[] = $v->status;
        fputcsv($file, $row, ',', '"');
      }

      header('Content-Encoding: UTF-8');
      header('Content-type: text/csv; charset=UTF-8');
      header("Content-Disposition: attachment; filename=$filename");
      header("Pragma: no-cache");
      header("Expires: 0");
      fclose($file);

      $message['headers'] += $params['headers'];
      $message['subject'] = $params['subject'];
      $l = l('Click Here', file_create_url('sites/default/files/' . $filename));
      $message['body'][] = 'To Download Inventory Report ' . $l;
      $attachment = array(
        'filecontent' => file_get_contents("./sites/default/files/" . $filename),
        'filename' => $filename,
        'filemime' => 'text/csv',
      );
      $message['params']['attachments'][] = $attachment;
      break;

    ############ Hardik & Vikee###########
    ########## subject and body of Email for reference of profile id deleted from customer profile UI ########
    case 'profile_deleted':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    ############ END #####################
  }
}

/**
 * 
 * Funct to get Delivery detail of an order
 * $lineitemID : This is an Line Item ID of a Product in Order
 * $delNo      : Delivery No. flag whether or not to display. Default is True i.e to display
 * $delAWB     : Delivery AWB flag whether or not to display. Default is True i.e to display
 *
 */
function bbd_common_get_deliveryinfo($lineitemID, $delNo = TRUE, $delAWB = TRUE) {
  if (!empty($lineitemID)) {
    $line = commerce_line_item_load($lineitemID);
    $delivery = NULL;
    if (!empty($line->field_delivery_lineitem[LANGUAGE_NONE])) {
      foreach ($line->field_delivery_lineitem[LANGUAGE_NONE] as $key => $val) {
        $fc = field_collection_item_load($val);
        if (!empty($fc)) {
          if ($delNo) {
            $delivery = $fc->field_delivery_number[LANGUAGE_NONE][0]['value'];
          }
          if ($delAWB) {
            $delivery = $fc->field_delivery_awb[LANGUAGE_NONE][0]['value'];
          }
        }
      }
    }
    return $delivery;
  }
}

/**
 * 
 * @param type $sku
 * @param type $quantity
 * Returns Availability of product stock using Soft commit of 60 Mins 
 */
function bbd_common_check_inventory($sku, $quantity) {
  $message = 'instock';
  $time = REQUEST_TIME;
  $expire_time = strtotime("-1 hour", $time);
  $query = db_select('commerce_order', 'co');
  $query->join('commerce_line_item', 'cli', 'cli.order_id = co.order_id');
  $query->addExpression('SUM(cli.quantity)', 'stock');
  $query->condition('status', 'phone_commerce_processing');
  $query->condition('co.changed', $expire_time, '>');
  $query->condition('cli.line_item_label', $sku);
  $stock = $query->distinct()->orderBy('co.changed')->execute()->fetchField();
  $product_stock = commerce_product_load_by_sku($sku)->commerce_stock[LANGUAGE_NONE][0]['value'];
  $available_stock = $product_stock - intval($stock);
  if ($available_stock < intval($quantity)) {
    $message = 'out_of_stock';
  }
  return $message;
}

function bbd_common_cronapi($op, $job = NULL) {
  $items['bbd_reconciliation_sales_order_data_fetch'] = array(
    'description' => 'Sales Order Reconcilation',
    'rule' => '0 4 * * *', // Every day 4 AM
    'arguments' => array('elysia'),
  );
  $items['bbd_reconciliation_inventory_data_fetch'] = array(
    'description' => 'Inventory Reconcilation',
    'rule' => '0 4 * * *', // Every day 4 AM
    'arguments' => array('elysia'),
  );
  $items['bbd_reconciliation_sku_data_fetch'] = array(
    'description' => 'Sku Order Reconcilation',
    'rule' => '0 4 * * *', // Every day 4 AM
    'arguments' => array('elysia'),
  );
  return $items;
}

/**
 * 
 * @param type $nid
 * @return type
 * Returns theme uri of nid
 */
function get_image_by_nid($nid) {
  $get_uri = db_select('field_data_field_banner ', 'fm');
  $get_uri->fields('fm', array('field_banner_fid'));
  $get_uri->condition('fm.entity_id', $nid);
  $uri = $get_uri->execute()->fetchField();
  return $uri;
}

function bbd_common_get_tid_from_nid($nid) {
  $q = db_select('field_data_field_product_category', 'fc');
  $q->fields('fc', array('field_product_category_tid'));
  $q->condition('fc.entity_type', 'node');
  $q->condition('fc.entity_id', $nid);
  $tid = $q->execute()->fetchField();
  return $tid;
}

/**
 * 
 * @param type $nid
 * @return type
 * Get Type from Nid
 */
function bbd_common_get_type_from_nid($nid) {
  $q = db_select('node', 'n');
  $q->fields('n', array('type'));
  $q->condition('n.nid', $nid);
  $type = $q->execute()->fetchField();
  return $type;
}

/**
 * 
 * @param type $nid
 * @return type
 * Get Type from Nid
 */
function bbd_common_get_type_from_sku($sku) {
  $q = db_select('commerce_product', 'cp');
  $q->fields('cp', array('type'));
  $q->condition('cp.sku', $sku);
  $type = $q->execute()->fetchField();
  return $type;
}

function get_leaf_level_mc_categories() {
  $vocavulary = taxonomy_vocabulary_machine_name_load('mc_category');
  return db_query('SELECT t.name, t.tid FROM taxonomy_term_data t
  LEFT JOIN taxonomy_term_hierarchy h ON h.tid = t.tid
  WHERE t.tid NOT IN (SELECT parent FROM taxonomy_term_hierarchy)   
  AND t.vid = ' . $vocavulary->vid . '
  AND h.parent !=0
  ORDER BY h.parent ASC')->fetchAll();
}

function get_first_offer_sku_by_pid($pid) {
  $q = db_select('bbd_promotions_selected_sku', 'p');
  $q->fields('p', array('selected_sku_offer'));
  $q->condition('p.promo_id', $pid);
  $sku = $q->execute()->fetchField();
  return $sku;
}

/*
 * Param:Nid is array of node ids
 * returns array of specification
 */

function get_spec_array_by_nid($nids) {
  $query = db_select('product_specifications', 'spec');
  $query->fields('spec', array('name', 'value'));
  $query->condition('spec.nid', $nids, 'IN');
  $result = $query->execute()->fetchAllAssoc('nid');
  $spec_arr = array();
  foreach ($result as $k => $v) {
    $spec_arr[$v->name] = $v->value;
  }
  return $spec_arr;
}

/*
 * Param:sku is array of product  sku
 * returns array of specification
 */

function get_spec_array_by_sku($skus) {
  $query = db_select('product_specifications', 'spec');
  $query->fields('spec', array('name', 'value'));
  $query->condition('spec.sku', $skus, 'IN');
  $result = $query->execute()->fetchAll();
  $spec_arr = array();
  return $result;
}

function get_spec_array_by_single_sku($sku) {
  $query = db_select('product_specifications', 'spec');
  $query->fields('spec', array('name', 'value'));
  $query->condition('spec.sku', $sku);
  $result = $query->execute()->fetchAll();
  $spec_arr = array();
  return $result;
}

function bbd_common_node_validate($node, $form, &$form_state) {
  $skus = explode(',', $form_state['input']['field_product_reference'][LANGUAGE_NONE]);
  $mc_category = $form_state['input']['field_product_master_category'][LANGUAGE_NONE];
  $load_product = commerce_product_load_by_sku('000000000600403287');
  ####### Content validation#######
  if ($form_id == 'product_display_node_form') {
    $pid = array();
    foreach ($form_state['values']['field_product_reference']['und'] as $pid_val) {
      $pid[] = $pid_val['product_id'];
      // $pid = $form_state['values']['field_product_reference']['und'][0]['product_id'];
    }
    $scm_flag = check_scm_flag_from_pid($pid);
    $scm_check = array_filter($scm_flag);
    if (empty($form_state['values']['nid'])) {
      if (empty($scm_check)) {
        form_set_error('name', t('Can not create node since scm qc flag is still attached'));
      }
    }
  }
  ####### Content validation#######
}

function website_continue_shopping() {
  global $base_url;
  $channel = bbd_common_get_channel();
  if ($channel == 'phone_commerce_variables') {
    $user_type = $_SESSION['phone_commerce_variables']['type'];
    $user_id = $_SESSION['phone_commerce_variables']['userID'];
    $redirect_url = $bsae_url . '/Browse-catalog/' . $user_id . '/' . $user_type;
  }
  else {
    $redirect_url = $bsae_url;
  }
  drupal_goto($redirect_url);
}

function bbd_common_get_franchisee_by_pin($pin = NULL, $name = NULL, $fc_code = NULL) {
  $query = db_select('users', 'u');
  $query->fields('u', array('name'));
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('field_data_field_franchisee_code', 'fc', 'fc.entity_id = u.uid');
  $query->leftJoin('field_data_field_user_billing_address', 'ba', 'u.uid = ba.entity_id');
  $query->fields('ba');
  if (!empty($fc_code)) {
    $query->condition('fc.field_franchisee_code_value', $fc_code);
  }
  else {
    if ($name == NULL) {
      $query->condition('ba.field_user_billing_address_postal_code', $pin);
    }
    else {
      $or = db_or();
      $or->condition('ba.field_user_billing_address_postal_code', $pin);
      $or->condition('u.name', $name);
      $query->condition($or);
    }
  }
  $query->condition('ur.rid', 5);
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * 
 * 
 */
function bbd_common_get_master_cat_id_from_nid($nid) {
  $q = db_select('field_data_field_product_master_category', 'mc');
  $q->fields('mc', array('field_product_master_category_tid'));
  $q->condition('mc.entity_type', 'node');
  $q->condition('mc.entity_id', $nid);
  $tid = $q->execute()->fetchField();
  return $tid;
}

function bbd_common_get_promo_id_from_node_object($node) {
  return bbd_promotions_get_promo_id_from_node_object($node);
}

/*
 * get franchisee code from user id
 */

function bbd_common_get_franchisee_code_uid($uid) {
  $query = db_select("field_data_field_franchisee_code", "f");
  $query->fields("f", array('field_franchisee_code_value'));
  $query->condition("f.entity_id", $uid);
  $output = $query->execute()->fetchField();
  return $output;
}

/*
 * get franchisee name bu franchisee code
 */

function bbd_common_ge_franchiseename_bycode($franchisee_code) {
  $query = db_select("field_data_field_franchisee_code", "fc");
  $query->join("field_data_field_franchisee_name", "fn", "fc.entity_id = fn.entity_id");
  $query->fields("fn", array('field_franchisee_name_value'));
  $query->condition("fc.field_franchisee_code_value", $franchisee_code);
  $namebycode = $query->execute()->fetchField();
  return $namebycode;
}

/*
 * Get Franchisee Mobile number throught Franchisee Code
 */

function get_mobileno_using_frcode($franchisee_code) {
  $query = db_select("field_data_field_franchisee_code", "fc");
  $query->join("field_data_field_phone_number", "fn", "fc.entity_id = fn.entity_id");
  $query->fields("fn", array('field_phone_number_value'));
  $query->condition("fc.field_franchisee_code_value", $franchisee_code);
  $number = $query->execute()->fetchField();
  return $number;
}

/*
 * Get Franchisee Code through Franchisee Name
 */

function get_frcode_using_number($fr_mobile) {
  $query = db_select("field_data_field_franchisee_code", "fc");
  $query->join("field_data_field_phone_number", "fn", "fc.entity_id = fn.entity_id");
  $query->fields("fc", array('field_franchisee_code_value'));
  $query->condition("fn.field_phone_number_value", $fr_mobile);
  $number = $query->execute()->fetchField();
  return $number;
}

/*
 * Get Franchisee Name through Franchisee Code
 */

function get_franchisee_name_using_frcode($fr_code) {
  $query = db_select('users', 'u');
  $query->join('field_data_field_franchisee_code', 'fc', 'fc.entity_id = u.uid');
  $query->join('field_data_field_user_billing_address', 'fb', 'fb.entity_id = u.uid');
  $query->fields('fb', array('field_user_billing_address_name_line'));
  $query->condition('fc.field_franchisee_code_value', $fr_code);
  $name = $query->execute()->fetchField();
  if (empty($name)) {
    $name = bbd_common_ge_franchiseename_bycode($fr_code);
  }
  return $name;
}

function _get_mc_code_from_product_id($product_id) {
  $query = db_select('field_data_field_mc_sap_hierarchy_number', 'mc');
  $query->fields('mc', array('field_mc_sap_hierarchy_number_value'));
  $query->condition('entity_id', $product_id);
  $mc_code = $query->execute()->fetchField();
  return $mc_code;
}

/**
 * Returns the inventory types of all DC's servicing a product
 * @param type $sku
 * SKU of a product
 * @return array
 * Array of Inventory types
 */
function bbd_common_get_inventory_types_from_sku($sku) {
  $query = db_select('commerce_product', 'cp');
  $query->join('field_data_field_inventory', 'fi', 'fi.entity_id = cp.product_id');
  $query->join('field_data_field_inventory_type', 'fit', 'fit.entity_id = fi.field_inventory_value');
  $query->fields('fit', array('field_inventory_type_value'));
  $query->condition('cp.sku', $sku);

  $types = $query->execute()->fetchCol();
  return $types;
}

function bbd_common_import_delivery_dates_form($form, &$form_state) {
  $form['template'] = array(
    '#markup' => l(t(' Click Here'), drupal_get_path('module', 'bbd_common') . '/delivery_dates_update.csv') . ' To download Template<br />',
  );
  $form['instructions'] = array(
    '#title' => 'Note',
    '#markup' => 'Enter only one of shipping, inventory and delivery dates<br />Format : MM/DD/YYYY HH:mm:ss AM <br />eg: 11/22/2015 11:00:05 AM <br />'
  );
  $form['sms_flag'] = array(
    '#type' => 'checkbox',
    '#title' => t('If ticked, an SMS will be sent for all orders'),
  );
  $form['date_override_flag'] = array(
    '#type' => 'checkbox',
    '#title' => t('If ticked, date validation will be bypassed (Only use for critical cases)'),
  );
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Choose a CSV file (Max limit 1000 rows)'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );
  return $form;
}

/**
 * hook_form_validate
 */
function bbd_common_import_delivery_dates_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
    'file_validate_extensions' => array('csv'), FALSE, FILE_EXISTS_REPLACE
  ));
  if ($file) {
    if ($file = file_move($file, 'public://')) {
//$form_state['values']['file'] = $file;
      $form_state['bbd_common']['uri'] = $file->uri;
    }
    else {
      form_set_error(check_plain('file', t('Failed to write the uploaded file the site\'s file folder.')));
    }
  }
}

/**
 * hook_form_submit
 */
function bbd_common_import_delivery_dates_form_submit($form, &$form_state) {
  $uri = $form_state['bbd_common']['uri'];
  $sms_flag = $form_state['values']['sms_flag'];
  $date_override_flag = $form_state['values']['date_override_flag'];
//  if (!empty($uri)) {
//   if (($handle = fopen($uri, "r")) !== FALSE) {
//    while (($datas = fgetcsv($handle, 1000, ",")) !== FALSE) {
//      $rows[] = $datas;
//    }
//    fclose($handle);
//  }
//    $totalCount = count($rows);
//    $chunks = array_chunk($rows, 10);
//    $batch = array(
//      'title' => t('uploading'),
//      'operations' => array(
//        array('batch_to_insert_product_specs_progress', array($chunks, $totalCount)),
//      ), //$operations,
//      'progress_message' => t('Uploading ...'),
//      'error_message' => t('Error!'),
//      'finished' => 'batch_to_insert_product_specs_finish',
//    );
//    batch_set($batch);
//  }

  $row = 0;
  $row_success = 0;
  $date_count = 0;
  $sms_array = array();
  $order_error = array();
  if (($handle = fopen($uri, "r")) !== FALSE) {
    while (($datas = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $rows[] = $datas;
    }
    fclose($handle);
  }

  foreach ($rows as $data) {
    $date_count = 0;

    if ($row == 0) {
      $row ++;
      continue;
    }
    else {
      $row ++;
    }

    $order_id = $data[0];
    $sap_id = $data[1];
    if ($inventory_date = $data[2]) {
      $date_count++;
      $timestamp = strtotime($inventory_date);
      if (empty($timestamp)) {
        $error = 'Invalid Inventory date Format on row ' . $row;

        $order_error[$order_id] = 1;
        drupal_set_message($error, 'error');
        continue;
      }
    }
    if ($shipping_date = $data[3]) {
      $date_count++;
      $timestamp = strtotime($shipping_date);
      if (empty($timestamp)) {
        $error = 'Invalid Shipping date Format on row ' . $row;

        $order_error[$order_id] = 1;
        drupal_set_message($error, 'error');
        continue;
      }
    }
    if ($delivery_date = $data[4]) {
      $date_count++;
      $timestamp = strtotime($delivery_date);
      if (empty($timestamp)) {
        $error = 'Invalid Delivery date Format on row ' . $row;

        $order_error[$order_id] = 1;
        drupal_set_message($error, 'error');
        continue;
      }
    }

    if ($date_count > 1) {
      $order_error[$order_id] = 1;

      drupal_set_message('Enter only one of inventory, shipping and delivery date on row ' . $row, 'error');
      continue;
    }
    if ($date_count == 0) {
      $order_error[$order_id] = 1;

      drupal_set_message('Enter EXACTLY one of inventory, shipping and delivery date on row ' . $row, 'error');
      continue;
    }
    if (!isset($line_item_ids[$order_id])) {
      $query = db_select('field_data_commerce_line_items', 'cli');
      $query->fields('cli', array('delta'));
      $query->addField('cli', 'commerce_line_items_line_item_id', 'line_item_id');

      $query->condition('cli.entity_id', $order_id);
      $result = $query->execute()->fetchAllKeyed(0, 1);

      $line_item_ids[$order_id] = $result;

      if (empty($result)) {
        $order_error[$order_id] = 1;

        drupal_set_message('Enter correct Order ID on row ' . $row, 'error');
        continue;
      }
    }
    $delta = ($sap_id / 10) - 1;
    $line_item = commerce_line_item_load($line_item_ids[$order_id][$delta]);
    if (empty($line_item)) {
      $order_error[$order_id] = 1;

      drupal_set_message('Enter correct SAP ID on row ' . $row, 'error');
      continue;
    }

    $sku = $line_item->line_item_label;
    $field_collection_id = $line_item->field_dc_lineitem[LANGUAGE_NONE][0]['value'];

    $dc_collection = field_collection_item_load($field_collection_id);
    $dc_to_attach = $dc_collection->field_dc_code[LANGUAGE_NONE][0]['value'];

    $delivery_update_flag = 0; //Set Flag as 0 bydefault
    if ($inventory_date) {
      $inventory_timestamp = strtotime($inventory_date);

      if ($inventory_timestamp > $dc_collection->field_inventory_expected_date[LANGUAGE_NONE][0]['value'] || $date_override_flag) {

        $dc_field_collections[$order_id][] = array('type' => 'inventory',
          'fc_id' => $field_collection_id,
          'value' => $inventory_timestamp,
          'sku' => $sku);
        $delivery_update_flag = 1;
      }
      else {
        $order_error[$order_id] = 1;

        drupal_set_message('Inventory date value should be greater than current value - on row ' . $row, 'error');
        continue;
      }
    }
    elseif ($shipping_date) {
      $shipping_timestamp = strtotime($shipping_date);

      if ($shipping_timestamp > $dc_collection->field_shipping_expected_date[LANGUAGE_NONE][0]['value'] || $date_override_flag) {
        $dc_field_collections[$order_id][] = array('type' => 'shipping',
          'fc_id' => $field_collection_id,
          'value' => $shipping_timestamp,
          'sku' => $sku);
        $delivery_update_flag = 1;
      }
      else {
        $order_error[$order_id] = 1;

        drupal_set_message('Shipping date value should be greater than current value - on row ' . $row, 'error');
        continue;
      }
    }
    elseif ($delivery_date) {
      $delivery_timestamp = strtotime($delivery_date);

      if ($delivery_timestamp > $dc_collection->field_customer_delivery_date[LANGUAGE_NONE][0]['value'] || $date_override_flag) {

        $dc_field_collections[$order_id][] = array('type' => 'delivery',
          'fc_id' => $field_collection_id,
          'value' => $delivery_timestamp,
          'sku' => $sku);
        $delivery_update_flag = 1;
      }
      else {
        $order_error[$order_id] = 1;

        drupal_set_message('Delivery date value should be greater than current value - on row ' . $row, 'error');
        continue;
      }
    }
    if ($delivery_update_flag == 1) {
      $delivery_update_limit = variable_get('delivery_date_update_limit', 0);
      $current_delivery_update = !empty($line_item->field_delivery_date_update_limit) ? $line_item->field_delivery_date_update_limit[LANGUAGE_NONE][0]['value'] : 0;
      if ($current_delivery_update < $delivery_update_limit) {
        $line_item->field_delivery_date_update_limit[LANGUAGE_NONE][0]['value'] = $current_delivery_update + 1; // Update Delivery Flag
        commerce_line_item_save($line_item);
      }
      else {
        $order_error[$order_id] = 1;
        drupal_set_message('Delivery date Max Update limit of ' . $delivery_update_limit . ' is reached - on row ' . $row, 'error');
        continue;
      }
    }
  }
  foreach ($dc_field_collections as $order_id => $array) {
    $result = bbd_common_get_pincode_mobile_for_order($order_id);

    $pincode = $result->pincode;
    $mobile = $result->mobile;

    if ($order_error[$order_id] != 1 && !empty($order_id)) {
      foreach ($array as $k => $v) {

        $sku = $v['sku'];
        $dc_collection = field_collection_item_load($v['fc_id']);
        $dc_to_attach = $dc_collection->field_dc_code[LANGUAGE_NONE][0]['value'];

        if ($dc_collection) {
          switch ($v['type']) {
            case 'inventory':
//Inventory expected date calcualtion
              $dc_collection->field_inventory_expected_date[LANGUAGE_NONE][0]['value'] = $v['value'];

//Shipping expected date calculation
              $dc_processing_days = android_service_get_dc_processing_days($dc_to_attach);
              $dc_processing_days = is_numeric($dc_processing_days) ? $dc_processing_days : 0;
              $dc_collection->field_dc_processing_days[LANGUAGE_NONE][0]['value'] = $dc_processing_days;

              $shipping_expected_time = bbd_holiday_get_working_day($v['value'], $dc_processing_days);
              $dc_collection->field_shipping_expected_date[LANGUAGE_NONE][0]['value'] = $shipping_expected_time;

//Customer delivery date calculation
              $transit_time = android_services_get_transit_time_from_pincode_dc($pincode, $dc_to_attach, $sku);
              $transit_time = is_numeric($transit_time) ? $transit_time : 0;

              $customer_delivery_date = bbd_holiday_get_working_day($shipping_expected_time, $transit_time);
              $dc_collection->field_customer_delivery_date[LANGUAGE_NONE][0]['value'] = $customer_delivery_date;
              $dc_collection->revision = 1;
              $dc_collection->save();

              break;
            case 'shipping':
//Shipping expected date calculation
              $dc_collection->field_shipping_expected_date[LANGUAGE_NONE][0]['value'] = $v['value'];

//Customer delivery date calculation
              $transit_time = android_services_get_transit_time_from_pincode_dc($pincode, $dc_to_attach, $sku);
              $transit_time = is_numeric($transit_time) ? $transit_time : 0;
              $customer_delivery_date = bbd_holiday_get_working_day($v['value'], $transit_time);
              $dc_collection->field_customer_delivery_date[LANGUAGE_NONE][0]['value'] = $customer_delivery_date;
              $dc_collection->revision = 1;
              $dc_collection->save();

              break;
            case 'delivery':
//Customer delivery date calculation
              $dc_collection->field_customer_delivery_date[LANGUAGE_NONE][0]['value'] = $v['value'];
              $dc_collection->revision = 1;
              $dc_collection->save();

              break;

            default:
              break;
          }
        }
      }
      $row_success++;

      if ($sms_flag) {
//Send SMS
        $min_max_dates = bbd_common_get_min_max_order_delivery_dates($order_id);
        $instance = field_info_instance('field_collection_item', 'field_customer_delivery_date', 'field_dc_lineitem');
        $settings = $instance['display']['default']['settings'];
        $from = $settings['from_days'];
        $to = $settings['to_days'];

        $lower = strtotime('-' . $from . 'days', $min_max_dates->min);
        $higher = strtotime($to . 'days', $min_max_dates->max);

        $op = date('d M.', $lower) . ' - ' . date('d M. Y', $higher);
        $var = array('order_id' => $order_id, 'date_range' => $op);
        sms_configuration_helper_for_sms_template($mobile, 'order_delivery_delayed', $var);
      }
    }
  }


  drupal_set_message('<b>' . $row_success . ' Orders were successfully updated</b>');
  if (!empty($order_error)) {
    drupal_set_message('<b>Following Orders were not updated - ' . implode(' , ', array_keys($order_error)) . '</b>');
  }
//drupal_set_message('<b>' . ($row - $row_success - 1) . '</b> Records failed to update', 'error');
}

function bbd_common_get_min_max_order_delivery_dates($order_id) {
  $query = db_select('field_data_commerce_line_items', 'cli');
  $query->join('field_data_field_dc_lineitem', 'fdc', 'fdc.entity_id = cli.commerce_line_items_line_item_id');
  $query->join('field_data_field_customer_delivery_date', 'fc', 'fc.entity_id =fdc.field_dc_lineitem_value');
  $query->addExpression('MIN(field_customer_delivery_date_value)', 'min');
  $query->addExpression('MAX(field_customer_delivery_date_value)', 'max');
  $query->condition('cli.entity_id', $order_id);
  $result = $query->execute()->fetch();

  return $result;
}

function bbd_common_get_pincode_mobile_for_order($order_id) {
  $query = db_select('commerce_order', 'o');
  $query->join('field_data_commerce_customer_billing', 'fcb', 'o.order_id = fcb.entity_id');
  $query->join('field_data_commerce_customer_address', 'fca', 'fca.entity_id = fcb.commerce_customer_billing_profile_id');
  $query->join('field_data_field_phone_number', 'fp', 'fp.entity_id = fcb.commerce_customer_billing_profile_id');

  $query->addField('fca', 'commerce_customer_address_postal_code', 'pincode');
  $query->addField('fp', 'field_phone_number_value', 'mobile');

  $query->condition('o.order_id', $order_id);
  $result = $query->execute()->fetch();

  return $result;
}

/**
 * 
 * @param type $franchisees
 * @return type
 */
function get_mobile_nos_by_franchisee_codes($franchisees) {
  $query = db_select('field_data_field_phone_number', 'pn');
  $query->join('field_data_field_franchisee_code', 'fc', 'pn.entity_id = fc.entity_id');
  $query->addExpression('GROUP_CONCAT(pn.field_phone_number_value)', 'field_phone_number_value');
  $query->condition('fc.field_franchisee_code_value', $franchisees, 'IN');
  $query->condition('pn.entity_type', 'user');
  $query->condition('fc.entity_type', 'user');
  $result = $query->execute()->fetchField();
  return $result;
}

/* #######price optimisation #########
 * author Manish
 * Move to prod
 */

function bbd_common_is_present_sku($sku) {
  $sku_count = db_select('commerce_product', 'cp')
      ->fields('cp', array('sku'))
      ->condition('cp.sku', $sku)
      ->countQuery()
      ->execute()
      ->fetchField();
  if ($sku_count == 0) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

############## Hardik & vikee copy cat##############
############## Trigger Email when Profile Id is deleted ################

function bbd_common_commerce_customer_profile_can_delete($profile) {

  global $base_root;
  $path = $base_root . request_uri();
  if (preg_match('/dev/', $path) || preg_match('/staging/', $path)) {
    // do nothing
  }
  else {
    $user_id = $profile->uid;
    $profile_id = $profile->profile_id;


    global $user;

    $to = variable_get('to_email_id');
    $from = variable_get('from_email_id');

    $params = array(
      'subject' => 'Profile Id is Deleted or Trying To Deleted for Profile Id = ' . $profile_id . ' , For User Id = ' . $user_id,
      'body' => 'Profile Id is Deleted or Trying To Deleted for Profile Id = ' . $profile_id . ' , For User Id = ' . $user_id . ' , and User Last Position is = ' . $path,
    );

    $language = language_default();
    $send = TRUE;
    if (!empty($to)) {
      $result = drupal_mail('bbd_common', 'profile_deleted', $to, $language, $params, $from, $send);
    }
  }
}

########################## END ##################################
############## Oxigen integration starts ############################
########## author : Manish ##################

function bbd_common_get_agent_id_from_fr_code($fr_code, $partner_name = '') {
  $query = db_select('field_data_field_franchisee_code', 'fc');
  $query->join('field_data_field_agent_identifier', 'fa', 'fc.entity_id = fa.entity_id');
  $query->fields('fa', array('field_agent_identifier_value'))->condition('fc.field_franchisee_code_value ', $fr_code);
  $agent_id = $query->execute()->fetchField();
  if ($partner_name) {
    $uid = bbd_common_get_uid_from_agent_id($agent_id);
    $partner_name = check_franchise_is_partner_using_uid($uid, $partner_name);
    if ($partner_name) {
      return $agent_id;
    }
    else {
      return FALSE;
    }
  }
  return $agent_id;
}

function bbd_common_get_uid_from_agent_id($agent_id) {
  $query = db_select('field_data_field_agent_identifier', 'fa');
  $query->fields('fa', array('entity_id'))
      ->condition('fa.field_agent_identifier_value', $agent_id);
  $uid = $query->execute()->fetchField();
  return $uid;
}

function bbd_common_get_fr_code_from_agent_id($agent_id, $partner_name = '') {
  $query = db_select('field_data_field_agent_identifier', 'fa');
  $query->join('field_data_field_franchisee_code', 'fc', 'fa.entity_id = fc.entity_id');
  $query->fields('fc', array('field_franchisee_code_value'))->condition('fa.field_agent_identifier_value', $agent_id);
  $fr_code = $query->execute()->fetchField();
  if ($partner_name) {
    $uid = bbd_common_get_uid_from_agent_id($agent_id);
    $partner_name = check_franchise_is_partner_using_uid($uid, $partner_name);
    if ($partner_name) {
      return $fr_code;
    }
    else {
      return FALSE;
    }
  }
  return $fr_code;
}

function bbd_common_entity_insert($entity, $type) {
  if ($type == "field_collection_item") {
    dsm($entity, "manish1");
    dsm($type, "manish2");   
  }
}

############## Oxigen integration ends ############################

